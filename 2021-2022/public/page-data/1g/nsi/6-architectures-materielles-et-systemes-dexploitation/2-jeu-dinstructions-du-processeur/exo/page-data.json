{"componentChunkName":"component---src-templates-exo-md-js","path":"/1g/nsi/6-architectures-materielles-et-systemes-dexploitation/2-jeu-dinstructions-du-processeur/exo","result":{"data":{"markdownRemark":{"html":"<p>Rappels des instructions utilisées dans ce cours.</p>\n<table class=\"table table-bordered table-hover\">\n<thead class=\"table-warning\">\n<tr class=\"header\">\n<th>instruction</th>\n<th>codage</th>\n<th>signification</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>LDA</td>\n<td>0</td>\n<td>Charge l’état de la case mémoire donnée en argument dans le registre\nA.</td>\n</tr>\n<tr class=\"even\">\n<td>LDB</td>\n<td>1</td>\n<td>Charge l’état de la case mémoire donnée en argument dans le registre\nB.</td>\n</tr>\n<tr class=\"odd\">\n<td>STA</td>\n<td>2</td>\n<td>Stocke l’état du registre A dans la case mémoire donnée en\nargument.</td>\n</tr>\n<tr class=\"even\">\n<td>STB</td>\n<td>3</td>\n<td>Stocke l’état du registre B dans la case mémoire donnée en\nargument.</td>\n</tr>\n<tr class=\"odd\">\n<td>ADD</td>\n<td>4</td>\n<td>Additionne le contenu des registres et le stocke dans le registre\ndonné en argument.</td>\n</tr>\n<tr class=\"even\">\n<td>DEC</td>\n<td>5</td>\n<td>Décrémente la valeur contenue dans le registre donné en argument,\nc’est à dire soustrait 1.</td>\n</tr>\n<tr class=\"odd\">\n<td>JMP</td>\n<td>6</td>\n<td>Fait “sauter”(JUMP) le programme vers une ligne donnée en\nargument</td>\n</tr>\n<tr class=\"even\">\n<td>JMPZ</td>\n<td>7</td>\n<td>Comme JUMP, mais uniquement si le registre A est 0.</td>\n</tr>\n<tr class=\"odd\">\n<td>END</td>\n<td>8</td>\n<td>Termine le programme</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"addition-simple\" style=\"position:relative;\"><a href=\"#addition-simple\" aria-label=\"addition simple permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Addition simple</h2>\n<p>Écrire une séquence d'instructions qui multiplie par 5 le nombre contenu\ndans la case mémoire 10 et stocke le résultat dans la case mémoire 11.</p>\n<p>Traduire les instrcuctions en langage machine binaire avec des mots de 4\nbits(3= <code class=\"language-text\">0011</code> par exemple).</p>\n<h2 id=\"différence\" style=\"position:relative;\"><a href=\"#diff%C3%A9rence\" aria-label=\"différence permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Différence</h2>\n<p>Écrire un programme qui lit deux valeurs x et y contenues respectivement\ndans les cases mémoires 11 et 12, calcule la différence <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi><mo>−</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">y - x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span></span> et\nstocke le résultat à l'adresse 13. On suppose que ces deux valeurs sont\ndes nombres entiers positifs.</p>\n<p>Compléter ce programme pour qu'il stocke la valeur 0 à l'adresse 15 si x\nest égal à y, ou la valeur x sinon.</p>\n<h2 id=\"multiplication\" style=\"position:relative;\"><a href=\"#multiplication\" aria-label=\"multiplication permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Multiplication</h2>\n<p>Écrire un programme qui multiplie la valeur contenue à la case mémoire\n12 par celle contenue dans la case mémoire 13 et stocke le résultat à\nl'adresse 14. On suppose que ces valeurs sont des nombres entiers\npositifs.</p>\n<p>Quel problème l'écriture de ce programme pose-t-elle ? Quelle\nmodification du processeur permettrait de contourner ce problème et donc\nde simplifier le programme ?</p>\n<h2 id=\"tp-ecrire-de-lassembleur-sur-un-simulateur\" style=\"position:relative;\"><a href=\"#tp-ecrire-de-lassembleur-sur-un-simulateur\" aria-label=\"tp ecrire de lassembleur sur un simulateur permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TP: Ecrire de l'assembleur sur un simulateur</h2>\n<p>La page suivante propose d'écrire quelques programmes en assembleur.</p>\n<p><span class=\"uri\" ><a href=\"https://pixees.fr/informatiquelycee/n_site/nsi_prem_sim_cpu.html\">https://pixees.fr/informatiquelycee/n_site/nsi_prem_sim_cpu.html</a></span></p>\n<p>Elle utilise la simulation de Peter Higginson qui simule le langage\nassembleur AQA.</p>\n<p><a href=\"http://www.peterhigginson.co.uk/AQA/\">http://www.peterhigginson.co.uk/AQA/</a></p>\n<!-- ### De python à l'assembleur\n\n Voici un programme Python très simple :\n\n```\nx = 4\ny = 8\nif x == 10:\n    y = 9\nelse :\n    x=x+1\nz=6\n```\n            \n\net voici maintenant voici son équivalent en assembleur :\n\n```asm\n   MOV R0, #4\n   STR R0,30\n   MOV R0, #8\n   STR R0,75\n   LDR R0,30\n   CMP R0, #10\n   BNE else\n   MOV R0, #9\n   STR R0,75\n   B endif\nelse:\n   LDR R0,30\n   ADD R0, R0, #1\n   STR R0,30\nendif:\n   MOV R0, #6\n   STR R0,23\n   HALT\n```         \n\nAprès avoir analysé très attentivement le programme en assembleur ci-dessus, vous essaierez\nd'établir une correspondance entre les lignes du programme en Python et les lignes du programme en\nassembleur. À quoi sert la ligne \"B endif\" ? À quoi correspondent les adresses mémoires 23, 75 et\n30 ?\n\nSource: pixees.fr CC-BY-SA\n\n\n### AIDE: L'ensemble d'instructions AQA\n\nVoici une traduction de la documentation proposée à partir du bouton [INFO](http://www.peterhigginson.co.uk/AQA/info.html)\n\nLes registres sont numérotés de `R0` à `R12`.\n\nLes opérations peuvent être effectuées sur deux types de valeurs (notées `<opérande2>` dans la suite):\n\n- une constante notée `#nnn`. Ex: `#12`: la valeur décimale 12.\n- le contenu du régistre n `Rn`. Ex: `R1`: la valeur contenie dans le registre 1.\n\nOn peut ajouter des étiquettes dans le programme (notées `<label>`); il suffit de noter le nom de\nl'étiquette de son choix et de le faire suivre de deux points. \n\nexemple:\n\n```asm test: ```\n\nToute référence à cette étiquette fera \"sauter\" le programme à la case mémoire de\nl'étiquette et exécutera donc les instructions qui suivent.\n\nles commentaires commencent par au moins un `/`.\n\n### Affectations\n\n- `LDR Rd, <adresse mémoire>`\n\nCharge la valeur stockée dans l'emplacement de mémoire spécifié par `<adresse mémoire>` dans le\nregistre d.\n\n- `STR Rd, <adresse mémoire>`\n\nStocke la valeur qui se trouve dans le registre d dans l'emplacement de mémoire spécifié par\n`<adresse mémoire>`.\n\n- `MOV Rd, <opérande2>`\n\nCopiez la valeur spécifiée par `<opérande 2>`dans le registre d.\n\n\n### Opérations\n\n- `ADD Rd, Rn, <opérande2>`\n\nAjouter la valeur spécifiée dans `<opérande 2>`à la valeur du registre \nn et stocker le résultat dans le registre d.\n\n- `SUB Rd, Rn, <opérande2>`\n\nSoustrayez la valeur spécifiée par `<opérande 2>`de la valeur du \nregistre n et stockez le résultat dans le registre d.\n\n### Comparaisons\n\n- `CMP Rn, <opérande2>`\n\nComparez la valeur stockée dans le registre n avec la valeur spécifiée \npar `<opérande 2>`\n\n- `B <condition> <label>`\n\nConnectez conditionnellement l'instruction à la position `<label>` dans\nle programme si la dernière comparaison a répondu aux critères spécifiés par la `<condition>`. Les\nvaleurs possibles pour `<condition>` et leur signification sont les suivantes:\n   - `EQ`: égal à,\n   - `NE`: différent de,\n   - `GT`: supérieur à,\n   - `LT`: inférieur à. \n\n### Sauts(JUMP)\n\n- `B <label>`\n\nToujours relier l'instruction à la position `<label>` dans le programme.\n\n### Fin du programme\n\n- `HALT`: Arrête l'exécution du programme.\n\n### Non utilisées dans ce TD\n\n- `AND Rd, Rn, <opérande2>`:\n\nEffectue une opération ET logique au niveau du bit entre la valeur du \nregistre n et la valeur spécifiée par `<opérande 2>` et stocke le résultat dans le registre d.\n\n- `ORR Rd, Rn, <opérande2>`:\n\nEffectue une opération OU logique au niveau des bits entre la\nvaleur du registre n et la valeur spécifiée par `<opérande 2>`et stocke le résultat dans le registre\nd.\n\n- `EOR Rd, Rn, <opérande2>`:\n\nEffectue une opération logique ou binaire exclusive au sens des bits\nentre la valeur du registre n et la valeur spécifiée par `<opérande 2>`et stocke le résultat dans le\nregistre d.\n\n- `MVN Rd, <opérande2>`:\n\nExécutez une opération NOT logique au niveau des bits sur la valeur\nspécifiée par `<opérande 2>`et stockez le résultat dans le registre d.\n\n- `LSL Rd, Rn, <opérande2>`:\n\nDécalez logiquement vers la gauche la valeur stockée dans le registre\nn du nombre de bits spécifié par `<opérande 2>` et stockez le résultat dans le registre d.\n\n- `LSR Rd, Rn, <opérande2>`:\n\nDécalez logiquement à droite la valeur stockée dans le registre n du \nnombre de bits spécifié par `<opérande 2>` et stockez le résultat dans le registre d. -->\n<div class=\"ref\">\n<ul>\n<li>Chapitre 15: L'organisation d'un ordinateur <span><a href=\"http://www.editions-eyrolles.com/Livre/9782212135435/\">Informatique et\nsciences du numérique Spécialité ISN en terminale S - Avec des\nexercices corrigés et des idées de projets par Gilles\nDowek</a></span></li>\n<li><a href=\"https://pixees.fr/informatiquelycee/n_site/nsi_prem_sim_cpu.html\">https://pixees.fr/informatiquelycee/n_site/nsi_prem_sim_cpu.html</a></li>\n<li><a href=\"http://www.lyceerotroudreux.com/images/NSI/Langage_Assembleur.pdf\">http://www.lyceerotroudreux.com/images/NSI/Langage_Assembleur.pdf</a></li>\n<li><a href=\"http://www.peterhigginson.co.uk/AQA/info.html\">http://www.peterhigginson.co.uk/AQA/info.html</a></li>\n</ul>\n</div>","fields":{"classe":"1g","chapter":"Jeu d'instructions du processeur","matter":"nsi","nChapter":"2","part":"Architectures matérielles et systèmes d'exploitation","nPart":"6","type":"exo"}}},"pageContext":{"slug":"1g/nsi/6-architectures-materielles-et-systemes-dexploitation/2-jeu-dinstructions-du-processeur/exo"}},"staticQueryHashes":["604483588"]}