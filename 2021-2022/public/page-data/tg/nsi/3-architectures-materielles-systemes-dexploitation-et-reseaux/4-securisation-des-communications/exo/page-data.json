{"componentChunkName":"component---src-templates-exo-md-js","path":"/tg/nsi/3-architectures-materielles-systemes-dexploitation-et-reseaux/4-securisation-des-communications/exo","result":{"data":{"markdownRemark":{"html":"<p>Pour réaliser ces exercices on peut utiliser le module <code class=\"language-text\">string</code> de\npython.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># crée une chaîne de caractères avec l'alphabet</span>\n\n<span class=\"token keyword\">from</span> string <span class=\"token keyword\">import</span> ascii_uppercase <span class=\"token keyword\">as</span> alphabet\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>alphabet<span class=\"token punctuation\">)</span>     <span class=\"token comment\"># affiche ABCDEFGHIJKLMNOPQRSTUVWXYZ</span>\n\n<span class=\"token comment\"># accès aux caractères par l'index</span>\nalphabet<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> alphabet<span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">]</span>     <span class=\"token comment\"># renvoie \"A\", \"Z\"</span>\n\n<span class=\"token comment\"># recherche d'un caractère</span>\nalphabet<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> alphabet<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span><span class=\"token string\">\"Z\"</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\"># renvoie 0, 25</span>\n\n<span class=\"token comment\"># Méthode str.upper pour mettre une chaîne de caractère en majuscules</span>\n<span class=\"token string\">\"Message\"</span><span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># renvoie \"MESSAGE\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id=\"implémenter-des-chiffrements-symétriques-en-python\" style=\"position:relative;\"><a href=\"#impl%C3%A9menter-des-chiffrements-sym%C3%A9triques-en-python\" aria-label=\"implémenter des chiffrements symétriques en python permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Implémenter des chiffrements symétriques en Python</h2>\n<ol>\n<li>\n<p>Implémenter le <strong>chiffrement de César</strong> en créant une fonction\n<code class=\"language-text\">cesar</code> qui prend deux paramètres:</p>\n<ul>\n<li><code class=\"language-text\">message</code> une chaîne de caractères à (dé)coder.</li>\n<li><code class=\"language-text\">n</code> un entier qui donne le décalage.</li>\n</ul>\n<p>Cette fonction doit convertir le message en majuscule, et décaler\ntoutes les lettres de <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span></span> grâce au codage César, et laisser tous les\nautres caractères inchangés(ponctuation).</p>\n<p>Voici une série de tests à passer.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">assert</span> cesar<span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"MESSAGE\"</span>\n<span class=\"token keyword\">assert</span> cesar<span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">'NFTTBHF'</span>\n<span class=\"token keyword\">assert</span> cesar<span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">'LDRRZFD'</span>\n<span class=\"token keyword\">assert</span> cesar<span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">'MESSAGE'</span>\n<span class=\"token keyword\">assert</span> cesar<span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">53</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">'NFTTBHF'</span>\n<span class=\"token keyword\">assert</span> cesar<span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">27</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">'LDRRZFD'</span>\n\neluard <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">\"\"\"Sur mes cahiers d’écolier\nSur mon pupitre et les arbres\nSur le sable sur la neige\nJ’écris ton nom\"\"\"</span>\n<span class=\"token keyword\">assert</span> cesar<span class=\"token punctuation\">(</span>eluard<span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">'FHE ZRF PNUVREF Q’ÉPBYVRE\\nFHE ZBA CHCVGER RG YRF NEOERF\\nFHE YR FNOYR FHE YN ARVTR\\nW’ÉPEVF GBA ABZ'</span>\n\n<span class=\"token comment\"># vérification du décodage</span>\n<span class=\"token keyword\">assert</span> cesar<span class=\"token punctuation\">(</span>cesar<span class=\"token punctuation\">(</span>eluard<span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">13</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> eluard<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<!-- \n```python\ndef cesar(message, n):\n m = message.upper()\n codage = \"\"\n for lettre in m:\n     if lettre in alphabet:\n         index = (alphabet.index(lettre) + n) % len(alphabet)\n         codage += alphabet[index]\n     else:\n         codage += lettre\n return codage\n ``` -->\n</li>\n<li>\n<p>Implémenter le <strong>chiffrement par substitution</strong> avec une fonction\n<code class=\"language-text\">substitution</code> qui prend deux paramètres:</p>\n<ul>\n<li><code class=\"language-text\">message</code> une chaîne de caractères à (dé)coder.</li>\n<li><code class=\"language-text\">clé</code> une chaîne de caractères qui donne les correspondances des\ncaractères. Par exemple: <code class=\"language-text\">AZERTYUIOPQSDFGHJKLMWXCVBN</code> dans le\ncours.</li>\n</ul>\n<p>On pourra vérifier son fonctionnement sur l'exemple du cours:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">assert</span> substitution<span class=\"token punctuation\">(</span><span class=\"token string\">\"SUBSTITUTION\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"AZERTYUIOPQSDFGHJKLMWXCVBN\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"LWZLMOMWMOGF\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Comment devra être effectué le décodage à partir du message codé et\nde la clé?</p>\n</li>\n<li>\n<p>Implémenter le <strong>chiffrement de Vigenère</strong> avec une fonction\n<code class=\"language-text\">vigenère</code> qui prend deux paramètres:</p>\n<ul>\n<li><code class=\"language-text\">message</code> une chaîne de caractères à (dé)coder.</li>\n<li><code class=\"language-text\">clé</code> une chaîne de caractères qui donne les décalages des\ncaractères. Par exemple: <code class=\"language-text\">ABC</code> dans le cours.</li>\n</ul>\n<p>On pourra vérifier son fonctionnement sur l'exemple du cours:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">assert</span> vigenère<span class=\"token punctuation\">(</span><span class=\"token string\">\"SUBSTITUTION\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ABC\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"SVDSUKTVVIPP\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Comment devra être effectué le décodage à partir du message codé et\nde la clé?</p>\n</li>\n</ol>","fields":{"classe":"tg","chapter":"Sécurisation des communications*","matter":"nsi","nChapter":"4","part":"Architectures matérielles, systèmes d’exploitation et réseaux","nPart":"3","type":"exo"}}},"pageContext":{"slug":"tg/nsi/3-architectures-materielles-systemes-dexploitation-et-reseaux/4-securisation-des-communications/exo"}},"staticQueryHashes":["604483588"]}