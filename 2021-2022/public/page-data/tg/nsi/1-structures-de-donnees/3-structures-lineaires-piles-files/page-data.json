{"componentChunkName":"component---src-templates-cours-md-js","path":"/tg/nsi/1-structures-de-donnees/3-structures-lineaires-piles-files","result":{"data":{"markdownRemark":{"html":"<details class=\"programme\">\n<summary>\nProgramme Officiel\n</summary>\n<table class=\"table table-bordered table-hover\">\n<thead class=\"table-warning\">\n<tr class=\"header\">\n<th>\nContenus\n</th>\n<th>\nCapacités attendues\n</th>\n<th>\nCommentaires\n</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>\nStructures de données, interface et implémentation.\n</td>\n<td>\n<p>\nSpécifier une structure de données par son interface.\n</p>\n<p>\nDistinguer interface et implémentation.\n</p>\n<p>\nÉcrire plusieurs implémentations d'une même structure de données.\n</p>\n</td>\n<td>\nL'abstraction des structures de données est introduite après plusieurs\nimplémentations d'une structure simple comme la file (avec un tableau ou\navec deux piles).\n</td>\n</tr>\n<tr class=\"even\">\n<td>\nListes, piles, files : structures linéaires.\n</td>\n<td>\n<p>\nDistinguer des structures par le jeu des méthodes qui les caractérisent.\n</p>\n<p>\nChoisir une structure de données adaptée à la situation à modéliser.\n</p>\n</td>\n<td>\nOn distingue les modes FIFO(\\`first\\_ <em>in first out</em>) et LIFO\n(<em>last in first</em> <em>out</em>) des piles et des files.\n</td>\n</tr>\n</tbody>\n</table>\n<a class=\"lien-programme\" href=\"../programme/\">Lien vers le programme\ncomplet</a>\n</details>\n<div class=\"intro\">\n<p><wc-wikimage class= \"half right\" title=\"QUEUE_VS_STACK.svg\" caption=\"Différences entre les piles et files\"></wc-wikimage></p>\n<blockquote>\n<p>Dans ce chapitre nous allons décrire des structures de données\nlinéaires appelées <strong>listes</strong>, dont nous verrons deux formes\nrestreintes <em>très efficaces</em>: les <strong>piles</strong> et les <strong>files</strong>. Il faut\nbien comprendre que lorsqu'on parle de structure de données, on parle\nd'une <em>représentation abstraite</em> qui n'est pas en lien direct avec son\nimplémentation qui peut-être réalisé de diverses manières suivant le\nlangage de programmation, voire au sein d'un même langage de\nprogrammation.</p>\n</blockquote>\n</div>\n<!-- TODO implémentation en python avec des classes queue from collections ou sinon fonction(voir IPT Eyrolles) ou Prpeabac -->\n<h2 id=\"les-piles-lifo\" style=\"position:relative;\"><a href=\"#les-piles-lifo\" aria-label=\"les piles lifo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Les piles: <em>LIFO</em></h2>\n<p>Les <strong>pile</strong>s(<em>stacks</em> en anglais) correspondent exactement à la notion\nde pile dans la vie courante:</p>\n<ul>\n<li>Une pile de cartes,</li>\n<li>Une pile d'assiettes...</li>\n</ul>\n<p><wc-wikimage class=\"half center\" title=\"Data_stack.svg\" caption=\"La pile est une structure de données LIFO: dernier arrivé premier sorti.\"></wc-wikimage></p>\n<p>Pour ajouter un élément on l'empile, il se retrouve donc au-dessus, et\npour retirer un élément on ne peut retirer <strong>que l'élément se trouvant\nau sommet de la pile</strong>.</p>\n<p>En anglais on dit <em>last in, first out</em> ou <em>LIFO</em> pour dire: dernier\narrivé premier sorti.</p>\n<div class=\"examples\">\n<p>Ce type de structure de données est par exemple utilisé dans:</p>\n<ul>\n<li>les éditeurs avec la fonction <em>Annuler</em> (CTRL+Z)</li>\n<li>les navigateurs pour reculer d'une page.</li>\n<li>les compilateurs et interpréteurs pour évaluer des séries de\nfonctions (voir <span><a href=\"/2021-2022/tg/nsi/4-langages-et-programmation/3-recursivite\">fonctions\nrécursives</a></span>)</li>\n<li>Sans l'évaluation des expressions mathématiques avec parenthèses\n<code class=\"language-text\">((ax + b) * c)</code></li>\n</ul>\n</div>\n<h3 id=\"interface\" style=\"position:relative;\"><a href=\"#interface\" aria-label=\"interface permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Interface</h3>\n<p>Une pile est définie par l'interface comprenant les opérations\nsuivantes:</p>\n<ul>\n<li><strong>Consulter</strong> le dernier élément de la pile: <code class=\"language-text\">sommet()</code></li>\n<li>Savoir si la pile <strong>est vide</strong>: <code class=\"language-text\">est_vide()</code></li>\n<li><strong>Empiler</strong> un élément pour le mettre au sommet de la pile:\n<code class=\"language-text\">empiler(élément)</code>.</li>\n<li><strong>Dépiler</strong> un élément pour le retirer du sommet de la pile:\n<code class=\"language-text\">dépiler()</code>.</li>\n</ul>\n<div class=\"prop\">\n<p>Les méthodes <code class=\"language-text\">empiler</code> et <code class=\"language-text\">dépiler</code> doivent s'effectuer en temps\nconstant (Complexité <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></span>)</p>\n</div>\n<h3 id=\"implémentation-en-python\" style=\"position:relative;\"><a href=\"#impl%C3%A9mentation-en-python\" aria-label=\"implémentation en python permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Implémentation en Python</h3>\n<p>L'objet <code class=\"language-text\">list</code> en Python présente deux méthodes qui lui permettent\nd'implémenter la pile:</p>\n<ul>\n<li><code class=\"language-text\">list.append(el)</code>: ajoute l'élément en fin de liste.</li>\n<li><code class=\"language-text\">list.pop()</code>: supprime le dernier élément de la liste et le renvoie.</li>\n</ul>\n<p>De plus ces deux méthodes s'effectuent en temps constant (voir ce\n<span><a href=\"/2021-2022/tg/nsi/1-structures-de-donnees/1-interface-et-implementation/#cas-des-listes\">tableau</a></span>\npour plus de détails.)</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">pile <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\npile<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\npile<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>pile<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># affiche [3, 4, 5, 6, 7]</span>\npile<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\"># renvoie 7</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>pile<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># affiche [3, 4, 5, 6]</span>\npile<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\"># renvoie 6</span>\npile<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\"># renvoie 5</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>pile<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># affiche [3, 4]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>[<span><a href=\"https://docs.python.org/3/tutorial/datastructures.html#using-lists-as-stacks\">Documentation de\nPython</a></span>]{.cite-source}</p>\n<details class=\"appli\">\n<summary>\n \n</summary>\n<p>Créer une classe <code class=\"language-text\">Pile</code> qui implémente le type abstrait pile en stockant\nles données de la pile dans un attribut privé <code class=\"language-text\">_data</code> de type <code class=\"language-text\">list</code>.\nVoir cet <span><a href=\"./exo/#exo1\">exercice</a></span> pour plus de détails.</p>\n</details>\n<h2 id=\"les-files-fifo\" style=\"position:relative;\"><a href=\"#les-files-fifo\" aria-label=\"les files fifo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Les files: <em>FIFO</em></h2>\n<p>Les files(<em>queues</em> en anglais) correspondent également à la notion de\nfile dans la vie courante:</p>\n<ul>\n<li>Une file d'attente à la caisse,</li>\n<li>à un feu rouge...</li>\n</ul>\n<p><wc-wikimage title=\"Data_Queue.svg\" caption=\"La file est une structure de données FIFO: premier arrivé premier sorti.\"></wc-wikimage></p>\n<p>Lorsqu'on ajoute un élément, celui-ci se retrouve à la fin de la file,\net on <strong>retire les éléments dans l'ordre dans lequel ils sont arrivés</strong>.</p>\n<p>En anglais on dit <em>first in, first out</em> ou <em>FIFO</em> pour dire: <strong>premier\narrivé premier sorti</strong>.</p>\n<div class=\"examples\">\n<p>Ce type de structure de données est par exemple utilisé dans:</p>\n<ul>\n<li>Un gestionnaire d'impression pour ordonner l'ordre des impressions.</li>\n<li>Un processeur pour planifier l'ordre des opérations.</li>\n<li>Un serveur web pour ordonner les réponses en fonction de l'ordre des\ndemandes.</li>\n</ul>\n</div>\n<h3 id=\"interface-1\" style=\"position:relative;\"><a href=\"#interface-1\" aria-label=\"interface 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Interface</h3>\n<p>Une file est une liste sur laquelle on autorise seulement 4 opérations:</p>\n<ul>\n<li><strong>Consulter</strong> le premier élément de la file: la tête: <code class=\"language-text\">tête()</code>.</li>\n<li>Tester si la file <strong>est vide</strong>: <code class=\"language-text\">est_vide()</code>.</li>\n<li><strong>Enfiler</strong> un nouvel élément: le mettre en dernier dans la queue:\n<code class=\"language-text\">enfiler(élément)</code>.</li>\n<li><strong>Défiler</strong> un élément, supprimer et renvoyer le premier élément:\n<code class=\"language-text\">défiler()</code>.</li>\n</ul>\n<div class=\"prop\">\n<p>Les méthodes <code class=\"language-text\">enfiler</code> et <code class=\"language-text\">défiler</code> doivent s'effectuer en temps\nconstant (Complexité <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></span>)</p>\n</div>\n<h3 id=\"implémentation-en-python-1\" style=\"position:relative;\"><a href=\"#impl%C3%A9mentation-en-python-1\" aria-label=\"implémentation en python 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Implémentation en Python</h3>\n<p>L'objet <code class=\"language-text\">list</code> en Python présente deux méthodes qui lui permettent\nd'implémenter la file:</p>\n<ul>\n<li><code class=\"language-text\">list.append(el)</code>: ajoute l'élément en fin de liste.</li>\n<li><code class=\"language-text\">list.pop(0)</code>: supprime le premier élément de la liste et le\nrenvoie.</li>\n</ul>\n<p>Toutefois, les listes ne sont pas très efficaces pour réaliser ce type\nde traitement. Alors que les ajouts et suppressions en fin de liste sont\nrapides, les opérations d'insertions ou de retraits en début de liste\nsont lentes (car tous les autres éléments doivent être décalés d'une\nposition <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></span>).</p>\n<p>Pour implémenter une file avec des opérations en temps constant <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></span>,\non peut utiliser la classe\n<span><a href=\"https://docs.python.org/fr/3/library/collections.html#collections.deque\"><code class=\"language-text\">collections.deque</code></a></span>.\nLes <code class=\"language-text\">deques</code> sont une généralisation des piles et des files appelée\n<strong>liste chainée double</strong> (en anglais <em>double-ended queue</em>).</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> deque\nqueue <span class=\"token operator\">=</span> deque<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># On considère une file allant de gauche à droite</span>\n<span class=\"token comment\"># on enfile à gauche</span>\nqueue<span class=\"token punctuation\">.</span>appendleft<span class=\"token punctuation\">(</span><span class=\"token string\">\"Jobi\"</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># enfile 'Jobi'</span>\nqueue<span class=\"token punctuation\">.</span>appendleft<span class=\"token punctuation\">(</span><span class=\"token string\">\"Joba\"</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># enfile 'Joba'</span>\n\n<span class=\"token comment\"># L'élément en tête est à droite au dernier indice</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>            <span class=\"token comment\"># affiche \"Jobi\"</span>\n\n<span class=\"token comment\"># on défile à droite</span>\nqueue<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                 <span class=\"token comment\"># défile 'Jobi' et le renvoie</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>            <span class=\"token comment\"># affiche \"Joba\" qui est en tête de queue maintenant</span>\nqueue<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                 <span class=\"token comment\"># défile 'Joba' et le renvoie</span>\n\n<span class=\"token comment\"># on vérifie que la queue est bien vide</span>\n<span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span>             <span class=\"token comment\"># renvoie True</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>[<span><a href=\"https://docs.python.org/3/tutorial/datastructures.html#using-lists-as-queues\">Documentation de\nPython</a></span>]{.cite-source}</p>\n<details class=\"appli\">\n<summary>\n \n</summary>\n<p>Créer une classe <code class=\"language-text\">File</code> qui implémente le type abstrait file en stockant\nles données de la file dans un attribut privé <code class=\"language-text\">_data</code> de type\n<code class=\"language-text\">collections.deque</code>. Voir cet <span><a href=\"./exo/#exo2\">exercice</a></span> pour\nplus de détails.</p>\n</details>\n<h2 id=\"comment-réaliser-une-boucle\" style=\"position:relative;\"><a href=\"#comment-r%C3%A9aliser-une-boucle\" aria-label=\"comment réaliser une boucle permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Comment réaliser une boucle?</h2>\n<p>L'interface des piles et files étant volontairement très réduite, il est\nimpossible d'accéder aux éléments présents au milieu sans les sortir.</p>\n<p>Donc pour itérer sur les éléments, on les retire jusqu'à ce que la\nstructure soit vide.</p>\n<h3 id=\"avec-une-pile\" style=\"position:relative;\"><a href=\"#avec-une-pile\" aria-label=\"avec une pile permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Avec une pile</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">while not pile.est_vide():\n    e = pile.dépiler()</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>L'ordre de sortie est l'inverse de l'ordre d'entrée.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># instanciation</span>\npile <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># empile au sommet Jobi Joba</span>\npile<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">'Jobi'</span><span class=\"token punctuation\">)</span>\npile<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">'Joba'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># dépile tout</span>\n<span class=\"token keyword\">while</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>pile<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n    e <span class=\"token operator\">=</span> pile<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">' | '</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>Sortie</strong> <code class=\"language-text\">Joba | Jobi |</code></p>\n<h3 id=\"avec-une-file\" style=\"position:relative;\"><a href=\"#avec-une-file\" aria-label=\"avec une file permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Avec une file</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">while not file.est_vide():\n    e = file.défiler()</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>L'ordre de sortie est le même que l'ordre d'entrée.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> deque\n<span class=\"token comment\"># instanciation</span>\n<span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> deque<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># enfile à gauche  Jobi Joba</span>\n<span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>appendleft<span class=\"token punctuation\">(</span><span class=\"token string\">'Jobi'</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>appendleft<span class=\"token punctuation\">(</span><span class=\"token string\">'Joba'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># défile tout</span>\n<span class=\"token keyword\">while</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n    e <span class=\"token operator\">=</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">' | '</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>Sortie</strong> <code class=\"language-text\">Jobi | Joba |</code></p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#les-piles-lifo\">Les piles: <em>LIFO</em></a></p>\n<ul>\n<li><a href=\"#interface\">Interface</a></li>\n<li><a href=\"#impl%C3%A9mentation-en-python\">Implémentation en Python</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#les-files-fifo\">Les files: <em>FIFO</em></a></p>\n<ul>\n<li><a href=\"#interface-1\">Interface</a></li>\n<li><a href=\"#impl%C3%A9mentation-en-python-1\">Implémentation en Python</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#comment-r%C3%A9aliser-une-boucle\">Comment réaliser une boucle?</a></p>\n<ul>\n<li><a href=\"#avec-une-pile\">Avec une pile</a></li>\n<li><a href=\"#avec-une-file\">Avec une file</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"tags":["cours","terminale","lycée","numérique et sciences informatiques","nsi"]},"fields":{"classe":"tg","chapter":"Structures linéaires: piles, files","matter":"nsi","nChapter":"3","part":"Structures de données","nPart":"1"}}},"pageContext":{"slug":"tg/nsi/1-structures-de-donnees/3-structures-lineaires-piles-files","chapter":"Structures linéaires: piles, files"}},"staticQueryHashes":["604483588"]}