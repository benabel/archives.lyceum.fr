{"componentChunkName":"component---src-templates-exo-md-js","path":"/tg/nsi/1-structures-de-donnees/3-structures-lineaires-piles-files/exo","result":{"data":{"markdownRemark":{"html":"<h2 id=\"implémentation-de-la-classe-pile\" style=\"position:relative;\"><a href=\"#impl%C3%A9mentation-de-la-classe-pile\" aria-label=\"implémentation de la classe pile permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Implémentation de la classe <code class=\"language-text\">Pile</code></h2>\n<p>Créer une classe <code class=\"language-text\">Pile</code> qui implémente le type abstrait pile en stockant\nles données de la pile dans un attribut privé <code class=\"language-text\">_data</code> de type <code class=\"language-text\">list</code>.</p>\n<ul>\n<li>L'initialisation s'effectue sans argument et affecte une liste vide\nà l'attribut <code class=\"language-text\">_data</code>.</li>\n<li>La méthode <code class=\"language-text\">empiler(élément)</code> ajoute l'élément à la fin de\nl'attribut <code class=\"language-text\">_data</code>.</li>\n<li>La méthode <code class=\"language-text\">dépiler()</code> retire l'élément à la fin de l'attribut\n<code class=\"language-text\">_data</code> et le renvoie.</li>\n<li>La méthode <code class=\"language-text\">est_vide()</code> renvoie <code class=\"language-text\">True</code> si la pile est vide et\n<code class=\"language-text\">False</code> sinon.</li>\n<li>La méthode <code class=\"language-text\">sommet()</code> renvoie l'élément présent au sommet de la\npile, et <code class=\"language-text\">None</code> si la pile est vide.</li>\n</ul>\n<p>Voici une série de tests à passer.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">pile <span class=\"token operator\">=</span> Pile<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">assert</span> pile<span class=\"token punctuation\">.</span>est_vide<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token boolean\">True</span>\n\npile<span class=\"token punctuation\">.</span>empiler<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">assert</span> pile<span class=\"token punctuation\">.</span>est_vide<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token boolean\">False</span>\n<span class=\"token keyword\">assert</span> pile<span class=\"token punctuation\">.</span>sommet<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span>\n\npile<span class=\"token punctuation\">.</span>empiler<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">assert</span> pile<span class=\"token punctuation\">.</span>est_vide<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token boolean\">False</span>\n<span class=\"token keyword\">assert</span> pile<span class=\"token punctuation\">.</span>sommet<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span>\n<span class=\"token keyword\">assert</span> pile<span class=\"token punctuation\">.</span>est_vide<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token boolean\">False</span>\n\npile<span class=\"token punctuation\">.</span>empiler<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">assert</span> pile<span class=\"token punctuation\">.</span>sommet<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">3</span>\n<span class=\"token keyword\">assert</span> pile<span class=\"token punctuation\">.</span>dépiler<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">3</span>\n\n<span class=\"token keyword\">while</span> <span class=\"token keyword\">not</span> pile<span class=\"token punctuation\">.</span>est_vide<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    pile<span class=\"token punctuation\">.</span>dépiler<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">assert</span> pile<span class=\"token punctuation\">.</span>est_vide<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token boolean\">True</span>\n<span class=\"token keyword\">assert</span> pile<span class=\"token punctuation\">.</span>sommet<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>Pour aller plus loin</strong>, modifier la classe <code class=\"language-text\">Pile</code> afin que <code class=\"language-text\">sommet()</code>\nne soit plus une méthode, mais un attribut <code class=\"language-text\">sommet</code>. La série de tests\nprécédents devra être modifié en supprimant les parenthèses des appels\ndes méthodes <code class=\"language-text\">pile.sommet()</code> en <code class=\"language-text\">pile.sommet</code>.</p>\n<h2 id=\"implémentation-de-la-classe-file\" style=\"position:relative;\"><a href=\"#impl%C3%A9mentation-de-la-classe-file\" aria-label=\"implémentation de la classe file permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Implémentation de la classe <code class=\"language-text\">File</code></h2>\n<p>Créer une classe <code class=\"language-text\">File</code> qui implémente le type abstrait file en stockant\nles données de la file dans un attribut privé <code class=\"language-text\">_data</code> de type\n<code class=\"language-text\">collections.deque</code> présentée dans le cours et dont vous pouvez\nconsulter la documentation grâce à la fonction <code class=\"language-text\">help()</code>.</p>\n<ul>\n<li>L'initialisation s'effectue sans argument et affecte une liste\nchaînée double vide à l'attribut <code class=\"language-text\">_data</code>.</li>\n<li>La méthode <code class=\"language-text\">enfiler(élément)</code> ajoute l'élément à la tête de\nl'attribut <code class=\"language-text\">_data</code>.</li>\n<li>La méthode <code class=\"language-text\">défiler()</code> retire l'élément de la queue de l'attribut\n<code class=\"language-text\">_data</code> et le renvoie.</li>\n<li>La méthode <code class=\"language-text\">est_vide()</code> renvoie <code class=\"language-text\">True</code> si la file est vide et\n<code class=\"language-text\">False</code> sinon.</li>\n<li>La méthode <code class=\"language-text\">tête()</code> renvoie l'élément présent à la tête de la file,\net <code class=\"language-text\">None</code> si la file est vide.</li>\n</ul>\n<p>Voici une série de tests à passer.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> File<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">assert</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>est_vide<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token boolean\">True</span>\n\n<span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>enfiler<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">assert</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>est_vide<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token boolean\">False</span>\n<span class=\"token keyword\">assert</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>tête<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span>\n\n<span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>enfiler<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">assert</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>est_vide<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token boolean\">False</span>\n<span class=\"token keyword\">assert</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>tête<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">assert</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>est_vide<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token boolean\">False</span>\n\n<span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>enfiler<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">assert</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>tête<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">assert</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>est_vide<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token boolean\">False</span>\n\n<span class=\"token keyword\">assert</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>défiler<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">assert</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>défiler<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span>\n<span class=\"token keyword\">assert</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>défiler<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">3</span>\n\n<span class=\"token keyword\">assert</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>est_vide<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token boolean\">True</span>\n<span class=\"token keyword\">assert</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>tête<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>Pour aller plus loin</strong>, modifier la classe <code class=\"language-text\">File</code> afin que <code class=\"language-text\">tête()</code> ne\nsoit plus une méthode, mais un attribut <code class=\"language-text\">tête</code>. La série de tests\nprécédents devra être modifié en supprimant les parenthèses des appels\ndes méthodes <code class=\"language-text\">file.tête()</code> en <code class=\"language-text\">file.tête</code>.</p>\n<h2 id=\"exercice-type-bac\" style=\"position:relative;\"><a href=\"#exercice-type-bac\" aria-label=\"exercice type bac permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exercice type BAC</h2>\n<blockquote>\n<p>Cet exercice porte sur la notion de pile, de file et sur la\nprogrammation de base en Python.</p>\n</blockquote>\n<blockquote>\n<p>Il est extrait du BAC 2021 Amérique du Nord sujet 1 Exercice 5.</p>\n</blockquote>\n<p>Les interfaces des structures de données abstraites <code class=\"language-text\">Pile</code> et <code class=\"language-text\">File</code>\nsont proposées ci-dessous. On utilisera uniquement les fonctions\nci-dessous :</p>\n<hr>\n<p><strong>Structure de données abstraite: Pile</strong></p>\n<p>Utilise: Élément, Booléen</p>\n<p>Opérations:</p>\n<ul>\n<li>\n<p><code class=\"language-text\">creer_pile_vide:∅ → Pile</code></p>\n<p><code class=\"language-text\">creer_pile_vide()</code> renvoie une pile vide</p>\n</li>\n<li>\n<p><code class=\"language-text\">est_vide:Pile → Booléen</code></p>\n<p><code class=\"language-text\">est_vide(pile)</code> renvoie <code class=\"language-text\">True</code> si <code class=\"language-text\">pile</code> est vide, <code class=\"language-text\">False</code> sinon</p>\n</li>\n<li>\n<p><code class=\"language-text\">empiler: Pile,Élément → ∅</code></p>\n<p><code class=\"language-text\">empiler(pile,element)</code> ajoute <code class=\"language-text\">element</code> à la pile pile</p>\n</li>\n<li>\n<p><code class=\"language-text\">depiler: Pile → Élément</code></p>\n<p><code class=\"language-text\">depiler(pile)</code> renvoie l'élément au sommet de la pile en le\nretirant de la <code class=\"language-text\">pile</code></p>\n</li>\n</ul>\n<hr>\n<p><strong>Structure de données abstraite: File</strong></p>\n<p>Utilise: Élément, Booléen</p>\n<p>Opérations:</p>\n<ul>\n<li>\n<p><code class=\"language-text\">creer_file_vide: ∅ → File</code></p>\n<p><code class=\"language-text\">creer_file_vide()</code> renvoie une file vide</p>\n</li>\n<li>\n<p><code class=\"language-text\">est_vide:File → Booléen</code></p>\n<p><code class=\"language-text\">est_vide(file)</code> renvoie <code class=\"language-text\">True</code> si file est vide, <code class=\"language-text\">False</code> sinon</p>\n</li>\n<li>\n<p><code class=\"language-text\">enfiler: File, Élément → ∅</code></p>\n<p><code class=\"language-text\">enfiler(file,element)</code> ajoute element dans la file <code class=\"language-text\">file</code></p>\n</li>\n<li>\n<p><code class=\"language-text\">defiler: File → Élément</code></p>\n<p><code class=\"language-text\">defiler(file)</code> renvoie l'élément au sommet de la file <code class=\"language-text\">file</code> en le\nretirant de la file <code class=\"language-text\">file</code>.</p>\n</li>\n</ul>\n<hr>\n<ol>\n<li>\n<p>On considère la file <code class=\"language-text\">F</code> suivante :</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">             --------------------------------------   \nenfilement → \"rouge\" \"vert\" \"jaune\" \"rouge\" \"jaune\" → défilement.\n             --------------------------------------</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>Quel sera le contenu de la pile <code class=\"language-text\">P</code> et de la file <code class=\"language-text\">F</code> après\nl'exécution du programme Python suivant?</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">P <span class=\"token operator\">=</span> creer_pile_vide<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">while</span> <span class=\"token keyword\">not</span><span class=\"token punctuation\">(</span>est_vide<span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    empiler<span class=\"token punctuation\">(</span>P<span class=\"token punctuation\">,</span> defiler<span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>\n<p>Créer une fonction <code class=\"language-text\">taille_file</code> qui prend en paramètre une file <code class=\"language-text\">F</code>\net qui renvoie le nombre d'éléments qu'elle contient. Après appel de\ncette fonction la file <code class=\"language-text\">F</code> doit avoir retrouvé son état d'origine.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">taille_file</span><span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"File -> Int\"\"\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n</li>\n<li>\n<p>Écrire une fonction <code class=\"language-text\">former_pile</code> qui prend en paramètre une file\n<code class=\"language-text\">F</code> et qui renvoie une pile <code class=\"language-text\">P</code> contenant les mêmes éléments que la\nfile.</p>\n<p>Le premier élément sorti de la file devra se trouver au sommet de la\npile; le deuxième élément sorti de la file devra se trouver juste\nen-dessous du sommet, etc.</p>\n<p>Exemple: si</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">    --------------------------------------\nF = \"rouge\" \"vert\" \"jaune\" \"rouge\" \"jaune\"\n    --------------------------------------</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>alors l'appel <code class=\"language-text\">former_pile(F)</code> va renvoyer la pile <code class=\"language-text\">P</code> ci-dessous :</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">     | \"jaune\" | -> sommet\n     | \"rouge\" |\nP =  | \"jaune\" |\n     | \"vert\"  |\n     | \"rouge\" |\n     -----------</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>\n<p>Écrire une fonction <code class=\"language-text\">nb_elements</code> qui prend en paramètres une file\n<code class=\"language-text\">F</code> et un élément <code class=\"language-text\">elt</code> et qui renvoie le nombre de fois où <code class=\"language-text\">elt</code>\nest présent dans la file <code class=\"language-text\">F</code>. Après appel de cette fonction la file\n<code class=\"language-text\">F</code> doit avoir retrouvé son état d'origine.</p>\n</li>\n<li>\n<p>Écrire une fonction <code class=\"language-text\">verifier_contenu</code> qui prend en paramètres une\nfile <code class=\"language-text\">F</code> et trois entiers: <code class=\"language-text\">nb_rouge</code>, <code class=\"language-text\">nb_vert</code> et <code class=\"language-text\">nb_jaune</code>.\nCette fonction renvoie le booléen <code class=\"language-text\">True</code> si \"rouge\" apparaît au plus\n<code class=\"language-text\">nb_rouge</code>fois dans la file <code class=\"language-text\">F</code>, \"vert\" apparaît au plus\n<code class=\"language-text\">nb_vert</code>fois dans la file <code class=\"language-text\">F</code> et \"jaune\" apparaît au plus\n<code class=\"language-text\">nb_jaune</code> fois dans la file <code class=\"language-text\">F</code>. Elle renvoie <code class=\"language-text\">False</code> sinon. On\npourra utiliser les fonctions précédentes.</p>\n</li>\n</ol>","fields":{"classe":"tg","chapter":"Structures linéaires: piles, files","matter":"nsi","nChapter":"3","part":"Structures de données","nPart":"1","type":"exo"}}},"pageContext":{"slug":"tg/nsi/1-structures-de-donnees/3-structures-lineaires-piles-files/exo"}},"staticQueryHashes":["604483588"]}