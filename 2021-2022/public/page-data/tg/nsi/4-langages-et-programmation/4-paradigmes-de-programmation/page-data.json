{"componentChunkName":"component---src-templates-cours-md-js","path":"/tg/nsi/4-langages-et-programmation/4-paradigmes-de-programmation","result":{"data":{"markdownRemark":{"html":"<p><strong>Ce chapitre ne pourra pas faire l'objet d'une évaluation lors de\nl'épreuve terminale écrite et pratique de l'enseignement de\nspécialité.</strong> [<span><a href=\"https://www.education.gouv.fr/bo/21/Hebdo30/MENE2121274N.htm\">BO\nMENE2121274N</a></span>]{.cite-source}</p>\n<details class=\"programme\">\n<summary>\nProgramme Officiel\n</summary>\n<table class=\"table table-bordered table-hover\">\n<thead class=\"table-warning\">\n<tr class=\"header\">\n<th>\nContenus\n</th>\n<th>\nCapacités attendues\n</th>\n<th>\nCommentaires\n</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>\nParadigmes de programmation.\n</td>\n<td>\nDistinguer sur des exemples les paradigmes impératif, fonctionnel et\nobjet.\n</td>\n<td>\nChoisir le paradigme de programmation selon le champ d'application d'un\nprogramme. Avec un même langage de programmation, on peut utiliser des\nparadigmes différents. Dans un même programme, on peut utiliser des\nparadigmes différents.\n</td>\n</tr>\n</tbody>\n</table>\n<a class=\"lien-programme\" href=\"../programme/\">Lien vers le programme\ncomplet</a>\n</details>\n<blockquote>\n<p>La création du premier programme informatique par Ada Lovelace sur la\nmachine de Babbage en 1842 a permis de formaliser les\n<span><a href=\"/2021-2022/1g/nsi/7-langages-et-programmation/1-les-ingredients-dun-algorithme\">ingrédients des\nalgorithmes</a></span>\ntels que nous les connaissons: affectations, boucles, conditions\nCependant, maintenant que l'informatique est présente dans très\nnombreux domaines, il s'est avéré nécessaire d'adapter la\nprogrammation aux problèmes à traiter. Ces approches appelées\n<em>paradigmes de programmation</em> fournissent au développeur une vue\ndifférente de la façon dont s'éxecute le programme, la\n<span><a href=\"/2021-2022/tg/nsi/1-structures-de-donnees/2-programmation-objet\">programmation orientée\nobjet</a></span>\nen est un exemple bien connu.</p>\n</blockquote>\n<h2 id=\"les-trois-grands-types-de-programmation\" style=\"position:relative;\"><a href=\"#les-trois-grands-types-de-programmation\" aria-label=\"les trois grands types de programmation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Les trois grands types de programmation</h2>\n<p>Il existe trois grands types de programmation :</p>\n<ul>\n<li>La programmation <strong>impérative</strong>: le paradigme originel est le plus\ncourant.</li>\n<li>La programmation <strong>orientée objet</strong>(POO) consistant en la définition\net l'assemblage de briques logicielles appelées objets.</li>\n<li>La programmation <em>déclarative</em> consistant à déclarer les données du\nproblème, puis à demander au programme de le résoudre. La\nprogrammation <strong>fonctionnelle</strong> en est un exemple représentatif dans\nlequel le résultat souhaité est déclaré comme la valeur d'une série\nd'applications de fonctions.</li>\n</ul>\n<p>Même si certains langages forcent à utiliser un paradigme de\nprogrammation (ex: Smalltalk: POO, Haskell: fonctionnnelle), de nombreux\nlangages modernes comme Python (ou Javascript) sont multiparadigmes et\npermettent la programmation impérative structurée, fonctionnelle et\norientée objet; laissant ainsi le choix au programmeur du paradigme à\nutiliser en fonction du problème posé.</p>\n<h2 id=\"exemples-dapproches-en-python\" style=\"position:relative;\"><a href=\"#exemples-dapproches-en-python\" aria-label=\"exemples dapproches en python permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exemples d'approches en Python</h2>\n<p>Pour illustrer les différences entre ces paradigmes, nous allons\nutiliser un exemple très simple issu de\n<span><a href=\"https://opensource.com/article/19/10/python-programming-paradigms\">opensource.com</a></span>.</p>\n<p>On a une liste de caractères que nous souhaitons concaténer en une\nchaine de caractères.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">ENTREE: entrée = ['p','y','t','h','o','n']\nSORTIE: sortie = 'python'</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<h3 id=\"programmation-impérative--le-comment\" style=\"position:relative;\"><a href=\"#programmation-imp%C3%A9rative--le-comment\" aria-label=\"programmation impérative  le comment permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Programmation impérative : <em>le comment</em></h3>\n<p>La programmation impérative est un paradigme de programmation qui décrit\nles opérations en séquences d'instructions exécutées par l'ordinateur\npour modifier l'état du programme.</p>\n<p>La programmation impérative se concentre sur la description du\nfonctionnement d'un programme : <strong>le comment</strong>.</p>\n<p>La plupart des langages de haut niveau comporte cinq types\nd'instructions principales :</p>\n<ul>\n<li>la séquence d'instructions</li>\n<li>l'assignation ou affectation</li>\n<li>l'instruction conditionnelle(<code class=\"language-text\">if</code>, <code class=\"language-text\">else</code>)</li>\n<li>la boucle(<code class=\"language-text\">for</code>, <code class=\"language-text\">while</code>)</li>\n<li>les branchements(<code class=\"language-text\">GOTO</code> p.ex)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">entrée <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'y'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'t'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'h'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'n'</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># on initialise une chaine vide pour la sortie</span>\nsortie <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n<span class=\"token comment\"># On concatène à l'aide d'une boucle</span>\n<span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> entrée<span class=\"token punctuation\">:</span>\n     sortie <span class=\"token operator\">=</span> sortie <span class=\"token operator\">+</span> c\n \n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sortie<span class=\"token punctuation\">)</span>\npython</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Ce type de programmation est le plus ancien et utilisé, il est facile à\ncomprendre, souvent efficace car proche des instructions réalisés par\nles processeurs. Par contre, il est assez difficile à tester car l'état\ndu programme ne cesse de changer et il est difficile de tester une\npetite partie du programme au milieu de son exécution par exemple car\nelle ne nécessite que toutes les instructions précédentes aient déjà été\nappliquées correctement.</p>\n<h3 id=\"programmation-fonctionnelle--le-quoi\" style=\"position:relative;\"><a href=\"#programmation-fonctionnelle--le-quoi\" aria-label=\"programmation fonctionnelle  le quoi permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Programmation fonctionnelle : <em>le quoi</em></h3>\n<p>En programmation fonctionnelle <strong>on décrit les résultats que l'on veut\nobtenir à partir des données</strong> plutôt que la séquence d'instructions qui\npermettent d'obtenir les résultats <em>(c'est un paradigme déclaratif)</em>.</p>\n<p>L'approche fonctionnelle considère le calcul en tant qu'évaluation de\n<strong>fonctions</strong> mathématiques. Vous donnez vos données en entrée aux\nfonctions, qui vous renvoient les valeurs calculées en sortie.</p>\n<p>L'utilisation massive de fonctions a amené à la création d'une syntaxe\nraccourcie pour la définition de fonctions anonymes, les fonctions\n<code class=\"language-text\">lambda</code>s :</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">lambda</span> param1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">,</span> paramN<span class=\"token punctuation\">:</span> valeur_retournée</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Au lieu de:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">ma_fonction</span><span class=\"token punctuation\">(</span>param1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">,</span> paramN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">return</span> valeur_retournée</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>En programmation fonctionnelle, <strong>il n'y a pas d'état</strong>, l'<em>opération\nd'affectation est interdite</em>, ce qui permet de s'affranchir des effets\nsecondaires (ou effets de bord).</p>\n<p>Ceci rend les programmes parfaitement prédictibles, faciles à tester et\nà paralléliser, par contre il est souvent compliqué de se débarrasser\ncomplétement de l'état du programme.</p>\n<p>Comme vu dans le chapitre précédent, en programmation fonctionnelle, on\nremplace souvent les boucles par des <span><a href=\"../4-recursivite\">fonctions\nrécursives</a></span>. Une approche fonctionnelle par la\nrécursion de notre problème pourrait être :</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">entrée <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'y'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'t'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'h'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'n'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">list_to_string</span><span class=\"token punctuation\">(</span>ma_liste<span class=\"token punctuation\">,</span> ma_chaine<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Fonction récursive pour concaténer les éléments d'une liste\"\"\"</span>\n    <span class=\"token keyword\">if</span> ma_liste<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># on enlève le premier élement de la liste</span>\n        <span class=\"token comment\"># qu'on ajoute à la chaine de caractères</span>\n        ma_chaine <span class=\"token operator\">+=</span> ma_liste<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># application récursive</span>\n        <span class=\"token keyword\">return</span> list_to_string<span class=\"token punctuation\">(</span>ma_liste<span class=\"token punctuation\">,</span> ma_chaine<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># cas de base</span>\n        <span class=\"token keyword\">return</span> ma_chaine\n    \n    \nlist_to_string<span class=\"token punctuation\">(</span>entrée<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<details class=\"plus\">\n<summary>\nfilter, map, reduce\n</summary>\n<p>Parmi les fonctions les plus représentatives de la programmation\nfonctionnelle, on trouve: <code class=\"language-text\">filter</code>, <code class=\"language-text\">map</code> et <code class=\"language-text\">reduce</code> (voir\n<span><a href=\"http://sametmax.com/map-filter-et-reduce/\">ici</a></span> pour plus\nde détails).</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># on importe le module functools qui comporte </span>\n<span class=\"token comment\"># les utilitaires de programmation fonctionnelle</span>\n<span class=\"token keyword\">import</span> functools\nentrée <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'y'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'t'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'h'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'n'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># on concatène avec la méthode reduce</span>\nsortie <span class=\"token operator\">=</span> functools<span class=\"token punctuation\">.</span><span class=\"token builtin\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> s<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">:</span> s <span class=\"token operator\">+</span> c<span class=\"token punctuation\">,</span> entrée<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sortie<span class=\"token punctuation\">)</span>\npython</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>On utilise ici <code class=\"language-text\">reduce</code> une <span><a href=\"https://fr.wikipedia.org/wiki/Fonction_d%27ordre_sup%C3%A9rieur\">fonction d'ordre\nsupérieur</a></span>\ntrès utilisée en programmation fonctionnelle. Cette fonction applique\nune fonction de deux arguments de manière cumulative aux éléments en\nséquence, de gauche à droite, pour réduire la séquence à une seule\nvaleur. Par exemple:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">sample_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">import</span> functools\nsomme <span class=\"token operator\">=</span> functools<span class=\"token punctuation\">.</span><span class=\"token builtin\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">,</span> sample_list<span class=\"token punctuation\">)</span>\nsomme\n<span class=\"token number\">15</span>\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">15</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Pour plus de méthodes fonctionnelles, consulter la documentation du\nmodule\n<span><a href=\"https://docs.python.org/3/library/functools.html\"><code class=\"language-text\">functools</code></a></span>\nqui est utilisé pour des fonctions de haut niveau : des fonctions qui\nagissent sur ou revoient d'autres fonctions.</p>\n<p>Une implémentation et des exemples d'utilisation des fonctions <code class=\"language-text\">filter</code>,\n<code class=\"language-text\">map</code>, <code class=\"language-text\">reduce</code> est proposée en <span><a href=\"./exo\">exercice</a></span>.</p>\n</details>\n<h3 id=\"programmation-objet-poo\" style=\"position:relative;\"><a href=\"#programmation-objet-poo\" aria-label=\"programmation objet poo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Programmation objet: <em>POO</em></h3>\n<p>La POO consiste en la définition et l'interaction de <strong>briques\nlogicielles appelées objets</strong>; un objet représente un concept, une idée\nou toute entité du monde physique, comme une voiture, une personne ou\nencore une page d'un livre.</p>\n<p>Un objet possède:</p>\n<ul>\n<li>des données: ses <strong>attributs</strong> et</li>\n<li>des fonctions: ses <strong>méthodes</strong></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ListeLettres</span><span class=\"token punctuation\">:</span>\n    <span class=\"token string\">\"Classe permettant de lier une chaîne de caractères à une liste de caractères\"</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> lettres<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"Intialisation de l'objet\n\n        Paramètres\n        ----------\n        lettres: list\n            liste des caractères vide par défaut\n        \"\"\"</span>    \n        <span class=\"token comment\"># initialisation des attributs de l'objet</span>\n        self<span class=\"token punctuation\">.</span>lettres <span class=\"token operator\">=</span> lettres\n        <span class=\"token comment\"># Conversion en chaine de caractères</span>\n        self<span class=\"token punctuation\">.</span>string <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>lettres<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># définition d'une méthode</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_string</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>string\n \nentrée <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'y'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'t'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'h'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'n'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># instanciation de l'objet avec les données de la liste</span>\nobjet_py <span class=\"token operator\">=</span> ListeLettres<span class=\"token punctuation\">(</span>entrée<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># récupération de l'attribut string de l'objet</span>\nobjet_py<span class=\"token punctuation\">.</span>string <span class=\"token comment\"># renvoie 'python'</span>\n\n<span class=\"token comment\"># récupération de l'attribut string grâce à la méthode get_string (préféré)</span>\nobjet_py<span class=\"token punctuation\">.</span>get_string<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># renvoie 'python'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Les différents principes de la conception orientée objet aident à la\nréutilisation du code, au masquage des données, etc., mais c'est une\nbête complexe, et comprendre toute la logique des objets et de leurs\ninteractions est délicat et souvent difficile à tester en raison de ces\ninterdépendances.</p>\n<p>Nous aborderons plus en détail la <span><a href=\"/2021-2022/tg/nsi/1-structures-de-donnees/2-programmation-objet\">programmation orientée\nobjet</a></span> au\nprochain chapitre.</p>\n<h2 id=\"comment-choisir-le-paradigme-à-utiliser\" style=\"position:relative;\"><a href=\"#comment-choisir-le-paradigme-%C3%A0-utiliser\" aria-label=\"comment choisir le paradigme à utiliser permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Comment choisir le paradigme à utiliser?</h2>\n<blockquote>\n<p>Pour simplifier, si votre problème implique une série de manipulations\nséquentielles simples, suivre le paradigme de <strong>programmation\nimpérative</strong> de la vieille école serait le moins cher en termes de\ntemps et d'efforts et vous donnerait potentiellement les meilleures\nperformances.</p>\n</blockquote>\n<blockquote>\n<p>Dans le cas de problèmes nécessitant des transformations mathématiques\ndes valeurs, le filtrage des informations, le mappage( transformer une\nliste en une autre) et les réductions( transformer une liste en une\nvaleur), la <strong>programmation fonctionnelle</strong> pourrait être adaptée.</p>\n</blockquote>\n<blockquote>\n<p>Si le problème est structuré comme un tas d'objets interdépendants\navec certains attributs qui peuvent changer avec le temps, en fonction\nde certaines conditions, la <strong>programmation orientée objet</strong> sera\ncertainement la plus naturelle.</p>\n</blockquote>\n<blockquote>\n<p>Bien sûr, il n'y a pas de règle simple, car le choix du paradigme de\nprogrammation dépend également fortement du type de données à traiter,\ndes connaissances des programmeurs et de diverses autres choses comme\nl'évolutivité.</p>\n</blockquote>\n<p><span><a href=\"https://opensource.com/article/19/10/python-programming-paradigms\">Perceiving Python programming\nparadigms</a></span>{.cite-source}</p>\n<div class=\"ref\">\n<ul>\n<li><span><a href=\"https://fr.wikipedia.org/wiki/Paradigme_(programmation)\">Article Wikipedia sur les paradigmes de\nprogrammation</a></span></li>\n<li><span><a href=\"https://opensource.com/article/19/10/python-programming-paradigms\">Perceiving Python programming\nparadigms</a></span></li>\n</ul>\n</div>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#les-trois-grands-types-de-programmation\">Les trois grands types de programmation</a></p>\n</li>\n<li>\n<p><a href=\"#exemples-dapproches-en-python\">Exemples d'approches en Python</a></p>\n<ul>\n<li><a href=\"#programmation-imp%C3%A9rative--le-comment\">Programmation impérative : <em>le comment</em></a></li>\n<li><a href=\"#programmation-fonctionnelle--le-quoi\">Programmation fonctionnelle : <em>le quoi</em></a></li>\n<li><a href=\"#programmation-objet-poo\">Programmation objet: <em>POO</em></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#comment-choisir-le-paradigme-%C3%A0-utiliser\">Comment choisir le paradigme à utiliser?</a></p>\n</li>\n</ul>","frontmatter":{"tags":["cours","terminale","lycée","numérique et sciences informatiques","nsi"]},"fields":{"classe":"tg","chapter":"Paradigmes de programmation*","matter":"nsi","nChapter":"4","part":"Langages et programmation","nPart":"4"}}},"pageContext":{"slug":"tg/nsi/4-langages-et-programmation/4-paradigmes-de-programmation","chapter":"Paradigmes de programmation*"}},"staticQueryHashes":["604483588"]}