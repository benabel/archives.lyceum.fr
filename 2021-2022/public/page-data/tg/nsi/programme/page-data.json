{"componentChunkName":"component---src-templates-programme-md-js","path":"/tg/nsi/programme","result":{"data":{"markdownRemark":{"html":"<!-- Conversion initiale effectuée grâce à https://pdf2md.morethan.io/ -->\n<blockquote>\n<p>Ce document est une retranscription non officielle du programme de\n<em>numérique et sciences informatiques</em> de terminale générale applicable\nà la rentrée 2020. La version officielle est consultable sur\n<span><a href=\"https://cache.media.education.gouv.fr/file/SPE8_MENJ_25_7_2019/93/3/spe247_annexe_1158933.pdf\">eduscol</a></span>.</p>\n</blockquote>\n<h2 id=\"préambule\" style=\"position:relative;\"><a href=\"#pr%C3%A9ambule\" aria-label=\"préambule permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Préambule</h2>\n<p>L'enseignement de spécialité de numérique et sciences informatiques du\ncycle terminal de la voie générale vise l'appropriation des fondements\nde l'informatique pour préparer les élèves à une poursuite d'études en\nles formant à la pratique d'une démarche scientifique et en développant\nleur appétence pour des activités de recherche.</p>\n<p>L'objectif de cet enseignement général est l'appropriation des concepts\net des méthodes qui fondent l'informatique, dans ses dimensions\nscientifiques et techniques. Il s'appuie sur l'universalité de quatre\nconcepts fondamentaux et la variété de leurs interactions :</p>\n<ul>\n<li>les <strong>données</strong>, qui représentent sous une forme numérique unifiée\ndes informations très diverses: textes, images, sons, mesures\nphysiques, sommes d'argent, etc. ;</li>\n<li>les <strong>algorithmes</strong>, qui spécifient de façon abstraite et précise\ndes traitements à effectuer sur les données à partir d'opérations\nélémentaires ;</li>\n<li>les <strong>langages</strong>, qui permettent de traduire les algorithmes\nabstraits en programmes textuels ou graphiques de façon à ce qu'ils\nsoient exécutables par les machines ;</li>\n<li>les <strong>machines</strong>, et leurs systèmes d'exploitation, qui permettent\nd'exécuter des programmes en enchaînant un grand nombre\nd'instructions simples, assurent la persistance des données par leur\nstockage et gèrent les communications. Y sont inclus les <strong>objets\nconnectés</strong> et les <strong>réseaux</strong>.</li>\n</ul>\n<p>À ces concepts s'ajoute un élément transversal : les <strong>interfaces</strong> qui\npermettent la communication, la collecte des données et la commande des\nsystèmes.</p>\n<p>Cet enseignement prolonge les enseignements d'informatique dispensés à\nl'école primaire, au collège en mathématiques et en technologie et, en\nclasse de seconde, l'enseignement commun Sciences numériques et\ntechnologie. Il s'appuie aussi sur l'algorithmique pratiquée en\nmathématiques en classe de seconde. Il approfondit les notions étudiées\net les compétences travaillées en classe de première dans l'enseignement\nde spécialité. Il autorise tous les choix de couplage avec les autres\nspécialités.</p>\n<p>L'enseignement de spécialité en classe terminale concerne les élèves\nayant confirmé ce choix parmi les trois spécialités suivies en classe de\npremière. À ce titre, dans le cadre des six heures hebdomadaires et dans\nune logique d'exigence disciplinaire et de préparation à l'enseignement\nsupérieur, les élèves sont amenés à approfondir leurs connaissances et à\ndévelopper un solide niveau de compétences.</p>\n<p>L'enseignement de spécialité de numérique et sciences informatiques\npermet de développer les compétences suivantes, constitutives de la\npensée informatique :</p>\n<ul>\n<li>analyser et modéliser un problème en termes de flux et de traitement\nd'informations ;</li>\n<li>décomposer un problème en sous-problèmes, reconnaître des situations\ndéjà analysées et réutiliser des solutions ;</li>\n<li>concevoir des solutions algorithmiques ;</li>\n<li>traduire un algorithme dans un langage de programmation, en\nspécifier les interfaces et les interactions, comprendre et\nréutiliser des codes sources existants, développer des processus de\nmise au point et de validation de programmes ;</li>\n<li>mobiliser les concepts et les technologies utiles pour assurer les\nfonctions d'acquisition, de mémorisation, de traitement et de\ndiffusion des informations ;</li>\n<li>développer des capacités d'abstraction et de généralisation.</li>\n</ul>\n<p>Cet enseignement se déploie en mettant en activité les élèves, <strong>sous\ndes formes variées</strong> qui permettent de développer des compétences\ntransversales :</p>\n<ul>\n<li>faire preuve d'autonomie, d'initiative et de créativité ;</li>\n<li>présenter un problème ou sa solution, développer une argumentation\ndans le cadre d'un débat ;</li>\n<li>coopérer au sein d'une équipe dans le cadre d'un projet ;</li>\n<li>rechercher de l'information, partager des ressources ;</li>\n<li>faire un usage responsable et critique de l'informatique.</li>\n</ul>\n<p>La progression peut suivre un rythme annuel construit autour de périodes\nspécifiques favorisant une alternance entre divers types d'activités.</p>\n<p>L'enseignement de numérique et sciences informatiques permet\nl'acquisition des compétences numériques qui font l'objet d'une\ncertification en fin de cycle terminal. Comme tous les enseignements de\nspécialité, il contribue au développement des compétences orales à\ntravers notamment la pratique de l'argumentation. Celle-ci conduit à\npréciser sa pensée et à expliciter son raisonnement de manière à\nconvaincre. Elle permet à chacun de faire évoluer sa pensée, jusqu'à la\nremettre en cause si nécessaire, pour accéder progressivement à la\nvérité par la preuve. Elle prend un relief particulier pour ceux qui\nchoisiront de préparer l'épreuve orale terminale du baccalauréat en\nl'adossant à cet enseignement de spécialité.</p>\n<h3 id=\"démarche-de-projet\" style=\"position:relative;\"><a href=\"#d%C3%A9marche-de-projet\" aria-label=\"démarche de projet permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Démarche de projet</h3>\n<p>Un enseignement d'informatique ne saurait se réduire à une présentation\nde concepts ou de méthodes sans permettre aux élèves de se les\napproprier en développant des projets.</p>\n<p>Un quart au moins de l'horaire total de la spécialité est réservé à la\nconception et à l'élaboration de projets conduits par les élèves.</p>\n<p>Les projets réalisés par les élèves, sous la conduite du professeur,\nconstituent un apprentissage fondamental tant pour l'appropriation des\nconcepts informatiques que pour l'acquisition de compétences. En classe\nde première comme en classe terminale, ils peuvent porter sur des\nproblématiques issues d'autres disciplines et ont essentiellement pour\nbut d'imaginer des solutions répondant à un problème ; dans la mesure du\npossible, il convient de laisser le choix du thème du projet aux élèves.\nIl peut s'agir d'un approfondissement théorique des concepts étudiés en\ncommun, d'une application à d'autres disciplines telle qu'une simulation\nd'expérience, d'exploitation de modules liés à l'intelligence\nartificielle et en particulier à l'apprentissage automatique, d'un\ntravail sur des données socioéconomiques, du développement d'un logiciel\nde lexicographie, d'un projet autour d'un objet connecté ou d'un robot,\nde la conception d'une bibliothèque implémentant une structure de\ndonnées complexe, d'un problème de traitement d'image ou de son, d'une\napplication mobile, par exemple de réalité virtuelle ou augmentée, du\ndéveloppement d'un site Web associé à l'utilisation d'une base de\ndonnées, de la réalisation d'un interpréteur d'un mini-langage, de la\nrecherche d'itinéraire sur une carte (algorithme A*), d'un programme de\njeu de stratégie, etc.</p>\n<p>La conduite d'un projet inclut des points d'étape pour faire un bilan\navec le professeur, valider des éléments, contrôler l'avancement du\nprojet ou en adapter les objectifs, voire le redéfinir partiellement,\nafin de maintenir la motivation des élèves.</p>\n<p>Les professeurs veillent à ce que les projets restent d'une ambition\nraisonnable afin de leur permettre d'aboutir.</p>\n<h3 id=\"modalités-de-mise-en-œuvre\" style=\"position:relative;\"><a href=\"#modalit%C3%A9s-de-mise-en-%C5%93uvre\" aria-label=\"modalités de mise en œuvre permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Modalités de mise en œuvre</h3>\n<p>Les activités pratiques et la réalisation de projets supposent que\nchaque élève ait un accès individuel à un équipement relié à Internet.</p>\n<p>Un langage de programmation est nécessaire pour l'écriture des\nprogrammes : un langage simple d'usage, interprété, concis, libre et\ngratuit, multiplateforme, largement répandu, riche de bibliothèques\nadaptées et bénéficiant d'une vaste communauté d'auteurs dans le monde\néducatif est à privilégier. Au moment de la conception de ce programme,\nle langage choisi est Python version 3 (ou supérieure).</p>\n<p>L'expertise dans tel ou tel langage de programmation n'est cependant pas\nun objectif de formation.</p>\n<p>Le professeur s'attachera à contextualiser le plus souvent possible les\nactivités pratiques en s'appuyant sur des thèmes d'actualité et des\nproblématiques du monde numérique et d'ingénierie numérique dans\nlesquels évoluent les élèves.</p>\n<p>La culture du numérique et les sciences informatiques s'acquièrent par\nla pratique. Il convient de placer au maximum l'élève en situation\nd'activité. L'emploi de démarche de résolution de problèmes est ainsi à\nprivilégier pour mobiliser les différents contenus scientifiques du\nprogramme.</p>\n<h2 id=\"éléments-de-programme\" style=\"position:relative;\"><a href=\"#%C3%A9l%C3%A9ments-de-programme\" aria-label=\"éléments de programme permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Éléments de programme</h2>\n<p>Le programme, organisé en six rubriques, ne constitue pas un plan de\ncours. Il appartient aux professeurs de choisir leur progression. Les\nmêmes notions peuvent être développées et éclairées dans différentes\nrubriques et leurs interactions mises en évidence.</p>\n<h3 id=\"histoire-de-linformatique\" style=\"position:relative;\"><a href=\"#histoire-de-linformatique\" aria-label=\"histoire de linformatique permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Histoire de l'informatique</h3>\n<p>Cette rubrique transversale se décline dans chacune des cinq autres.</p>\n<p>Comme tous les concepts scientifiques et techniques, ceux de\nl'informatique ont une histoire et ont été forgés par des personnes. Les\nalgorithmes sont présents dès l'Antiquité, les machines à calculer\napparaissent progressivement au XVIIe siècle, les sciences de\nl'information sont fondées au XIXe siècle, mais c'est en 1936\nqu'apparaît le concept de machine universelle, capable d'exécuter tous\nles algorithmes, et que les notions de machine, algorithme, langage et\ninformation sont pensées comme un tout cohérent. Les premiers\nordinateurs ont été construits en 1948 et leur puissance a ensuite\névolué exponentiellement. Parallèlement, les ordinateurs se sont\ndiversifiés dans leurs tailles, leurs formes et leurs emplois :\ntéléphones, tablettes, montres connectées, ordinateurs personnels,\nserveurs, fermes de calcul, méga-ordinateurs. Le réseau Internet,\ndéveloppé depuis 1969, relie aujourd'hui ordinateurs et objets\nconnectés.</p>\n<table class=\"table table-bordered table-hover\">\n<thead class=\"table-warning\">\n<tr class=\"header\">\n<th>\nContenus\n</th>\n<th>\nCapacités attendues\n</th>\n<th>\nCommentaires\n</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>\nÉvénements clés de l'histoire de l'informatique\n</td>\n<td>\nSituer dans le temps les principaux événements de l'histoire de\nl'informatique et leurs protagonistes.\n</td>\n<td>\n<p>\nIdentifier l'évolution des rôles relatifs des logiciels et des\nmatériels.\n</p>\n<p>\nCes repères viennent compléter ceux qui ont été introduits en première.\n</p>\n<p>\nCes repères historiques sont construits au fur et à mesure de la\nprésentation des concepts et techniques.\n</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"structures-de-données\" style=\"position:relative;\"><a href=\"#structures-de-donn%C3%A9es\" aria-label=\"structures de données permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Structures de données</h3>\n<p>L'écriture sur des exemples simples de plusieurs implémentations d'une\nmême structure de données permet de faire émerger les notions\nd'interface et d'implémentation, ou encore de structure de données\nabstraite.</p>\n<p>Le paradigme de la programmation objet peut être utilisé pour réaliser\ndes implémentations effectives des structures de données, même si ce\nn'est pas la seule façon de procéder.</p>\n<p>Le lien est établi avec la notion de modularité qui figure dans la\nrubrique « langages et programmation » en mettant en évidence l'intérêt\nd'utiliser des bibliothèques ou des API (Application Programming\nInterface).</p>\n<table class=\"table table-bordered table-hover\">\n<thead class=\"table-warning\">\n<tr class=\"header\">\n<th>\nContenus\n</th>\n<th>\nCapacités attendues\n</th>\n<th>\nCommentaires\n</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>\nStructures de données, interface et implémentation.\n</td>\n<td>\n<p>\nSpécifier une structure de données par son interface.\n</p>\n<p>\nDistinguer interface et implémentation.\n</p>\n<p>\nÉcrire plusieurs implémentations d'une même structure de données.\n</p>\n</td>\n<td>\nL'abstraction des structures de données est introduite après plusieurs\nimplémentations d'une structure simple comme la file (avec un tableau ou\navec deux piles).\n</td>\n</tr>\n<tr class=\"even\">\n<td>\nVocabulaire de la programmation objet : classes, attributs, méthodes,\nobjets.\n</td>\n<td>\n<p>\nÉcrire la définition d'une classe.\n</p>\n<p>\nAccéder aux attributs et méthodes d'une classe.\n</p>\n</td>\n<td>\nOn n'aborde pas ici tous les aspects de la programmation objet comme le\npolymorphisme et l'héritage.\n</td>\n</tr>\n<tr class=\"odd\">\n<td>\n<p>\nListes, piles, files : structures linéaires.\n</p>\n<p>\nDictionnaires, index et clé.\n</p>\n</td>\n<td>\n<p>\nDistinguer des structures par le jeu des méthodes qui les caractérisent.\n</p>\n<p>\nChoisir une structure de données adaptée à la situation à modéliser.\n</p>\n<p>\nDistinguer la recherche d'une valeur dans une liste et dans un\ndictionnaire.\n</p>\n</td>\n<td>\nOn distingue les modes FIFO(<em>first</em> <em>in first out</em>) et\nLIFO (<em>last in first</em> <em>out</em>) des piles et des files.\n</td>\n</tr>\n<tr class=\"even\">\n<td>\n<p>\nArbres : structures hiérarchiques.\n</p>\n<p>\nArbres binaires : nœuds, racines, feuilles, sous-arbres gauches,\nsous-arbres droits.\n</p>\n</td>\n<td>\n<p>\nIdentifier des situations nécessitant une structure de données\narborescente.\n</p>\n<p>\nÉvaluer quelques mesures des arbres binaires (taille, encadrement de la\nhauteur, etc.).\n</p>\n</td>\n<td>\nOn fait le lien avec la rubrique « algorithmique ».\n</td>\n</tr>\n<tr class=\"odd\">\n<td>\n<p>\nGraphes : structures relationnelles.\n</p>\n<p>\nSommets, arcs, arêtes, graphes orientés ou non orientés.\n</p>\n</td>\n<td>\n<p>\nModéliser des situations sous forme de graphes.\n</p>\n<p>\nÉcrire les implémentations correspondantes d'un graphe : matrice\nd'adjacence, liste de successeurs/de prédécesseurs.\n</p>\n<p>\nPasser d'une représentation à une autre.\n</p>\n</td>\n<td>\n<p>\nOn s'appuie sur des exemples comme le réseau routier, le réseau\nélectrique, Internet, les réseaux sociaux.\n</p>\n<p>\nLe choix de la représentation dépend du traitement qu'on veut mettre en\nplace : on fait le lien avec la rubrique « algorithmique ».\n</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"bases-de-données\" style=\"position:relative;\"><a href=\"#bases-de-donn%C3%A9es\" aria-label=\"bases de données permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bases de données</h3>\n<p>Le développement des traitements informatiques nécessite la manipulation\nde données de plus en plus nombreuses. Leur organisation et leur\nstockage constituent un enjeu essentiel de performance.</p>\n<p>Le recours aux bases de données relationnelles est aujourd'hui une\nsolution très répandue. Ces bases de données permettent d'organiser, de\nstocker, de mettre à jour et d'interroger des données structurées\nvolumineuses utilisées simultanément par différents programmes ou\ndifférents utilisateurs. Cela est impossible avec les représentations\ntabulaires étudiées en classe de première.</p>\n<p>Des systèmes de gestion de bases de données (SGBD) de très grande taille\n(de l'ordre du pétaoctet) sont au centre de nombreux dispositifs de\ncollecte, de stockage et de production d'informations.</p>\n<p>L'accès aux données d'une base de données relationnelle s'effectue grâce\nà des requêtes d'interrogation et de mise à jour qui peuvent par exemple\nêtre rédigées dans le langage SQL (<em>Structured Query Language</em>). Les\ntraitements peuvent conjuguer le recours au langage SQL et à un langage\nde programmation.</p>\n<p>Il convient de sensibiliser les élèves à un usage critique et\nresponsable des données.</p>\n<table class=\"table table-bordered table-hover\">\n<thead class=\"table-warning\">\n<tr class=\"header\">\n<th>\nContenus\n</th>\n<th>\nCapacités attendues\n</th>\n<th>\nCommentaires\n</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>\nModèle relationnel : relation, attribut, domaine, clef primaire, clef\nétrangère, schéma relationnel.\n</td>\n<td>\nIdentifier les concepts définissant le modèle relationnel.\n</td>\n<td>\nCes concepts permettent d'exprimer les contraintes d'intégrité (domaine,\nrelation et référence).\n</td>\n</tr>\n<tr class=\"even\">\n<td>\nBase de données relationnelle.\n</td>\n<td>\n<p>\nSavoir distinguer la structure d'une base de données de son contenu.\n</p>\n<p>\nRepérer des anomalies dans le schéma d'une base de données.\n</p>\n</td>\n<td>\n<p>\nLa structure est un ensemble de schémas relationnels qui respecte les\ncontraintes du modèle relationnel.\n</p>\n<p>\nLes anomalies peuvent être des redondances de données ou des anomalies\nd'insertion, de suppression, de mise à jour.\n</p>\n<p>\nOn privilégie la manipulation de données nombreuses et réalistes.\n</p>\n</td>\n</tr>\n<tr class=\"odd\">\n<td>\nSystème de gestion de bases de données relationnelles.\n</td>\n<td>\nIdentifier les services rendus par un système de gestion de bases de\ndonnées relationnelles : persistance des données, gestion des accès\nconcurrents, efficacité de traitement des requêtes, sécurisation des\naccès.\n</td>\n<td>\nIl s'agit de comprendre le rôle et les enjeux des différents services\nsans en détailler le fonctionnement.\n</td>\n</tr>\n<tr class=\"even\">\n<td>\nLangage SQL : requêtes d'interrogation et de mise à jour d'une base de\ndonnées.\n</td>\n<td>\n<p>\nIdentifier les composants d'une requête.\n</p>\n<p>\nConstruire des requêtes d'interrogation à l'aide des clauses du langage\nSQL : <code>SELECT</code>, <code>FROM</code>, <code>WHERE</code>,\n<code>JOIN</code>.\n</p>\n<p>\nConstruire des requêtes d'insertion et de mise à jour à l'aide de :\n<code>UPDATE</code>, <code>INSERT</code>, <code>DELETE</code>.\n</p>\n</td>\n<td>\nOn peut utiliser <code>DISTINCT</code>, <code>ORDER BY</code> ou les\nfonctions d'agrégation sans utiliser les clauses <code>GROUP BY</code>\net <code>HAVING</code>.\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"architectures-matérielles-systèmes-dexploitation-et-réseaux\" style=\"position:relative;\"><a href=\"#architectures-mat%C3%A9rielles-syst%C3%A8mes-dexploitation-et-r%C3%A9seaux\" aria-label=\"architectures matérielles systèmes dexploitation et réseaux permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Architectures matérielles, systèmes d'exploitation et réseaux</h3>\n<p>La réduction de taille des éléments des circuits électroniques a conduit\nà l'avènement de systèmes sur puce (SoCs pour Systems on Chips en\nanglais) qui regroupent dans un seul circuit nombre de fonctions\nautrefois effectuées par des circuits séparés assemblés sur une carte\nélectronique. Un tel système sur puce est conçu et mis au point de façon\nlogicielle, ses briques électroniques sont accessibles par des API,\ncomme pour les bibliothèques logicielles.</p>\n<p>Toute machine est dotée d'un système d'exploitation qui a pour fonction\nde charger les programmes depuis la mémoire de masse et de lancer leur\nexécution en leur créant des processus, de gérer l'ensemble des\nressources, de traiter les interruptions ainsi que les entrées-sorties\net enfin d'assurer la sécurité globale du système.</p>\n<p>Dans un réseau, les routeurs jouent un rôle essentiel dans la\ntransmission des paquets sur Internet : les paquets sont routés\nindividuellement par des algorithmes. Les pertes logiques peuvent être\ncompensées par des protocoles reposant sur des accusés de réception ou\ndes demandes de renvoi, comme TCP.</p>\n<p>La protection des données sensibles échangées est au cœur d'Internet.\nLes notions de chiffrement et de déchiffrement de paquets pour les\ncommunications sécurisées sont explicitées.</p>\n<table class=\"table table-bordered table-hover\">\n<thead class=\"table-warning\">\n<tr class=\"header\">\n<th>\nContenus\n</th>\n<th>\nCapacités attendues\n</th>\n<th>\nCommentaires\n</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>\nComposants intégrés d'un système sur puce.\n</td>\n<td>\nIdentifier les principaux composants sur un schéma de circuit et les\navantages de leur intégration en termes de vitesse et de consommation.\n</td>\n<td>\nLe circuit d'un téléphone peut être pris comme un exemple :\nmicroprocesseurs, mémoires locales, interfaces radio et filaires,\ngestion d'énergie, contrôleurs vidéo, accélérateur graphique, réseaux\nsur puce, etc.\n</td>\n</tr>\n<tr class=\"even\">\n<td>\nGestion des processus et des ressources par un système d'exploitation.\n</td>\n<td>\n<p>\nDécrire la création d'un processus, l'ordonnancement de plusieurs\nprocessus par le système.\n</p>\n<p>\nMettre en évidence le risque de l'interblocage (deadlock).\n</p>\n</td>\n<td>\nÀ l'aide d'outils standard, il s'agit d'observer les processus actifs ou\nen attente sur une machine. Une présentation débranchée de\nl'interblocage peut être proposée.\n</td>\n</tr>\n<tr class=\"odd\">\n<td>\nProtocoles de routage.\n</td>\n<td>\nIdentifier, suivant le protocole de routage utilisé, la route empruntée\npar un paquet.\n</td>\n<td>\n<p>\nEn mode débranché, les tables de routage étant données, on se réfère au\nnombre de sauts (protocole RIP) ou au coût des routes (protocole OSPF).\n</p>\n<p>\nLe lien avec les algorithmes de recherche de chemin sur un graphe est\nmis en évidence.\n</p>\n</td>\n</tr>\n<tr class=\"even\">\n<td>\nSécurisation des communications.\n</td>\n<td>\n<p>\nDécrire les principes de chiffrement symétrique (clef partagée) et\nasymétrique (avec clef privée/clef publique).\n</p>\n<p>\nDécrire l'échange d'une clef symétrique en utilisant un protocole\nasymétrique pour sécuriser une communication HTTPS.\n</p>\n</td>\n<td>\n<p>\nLes protocoles symétriques et asymétriques peuvent être illustrés en\nmode débranché, éventuellement avec description d'un chiffrement\nparticulier.\n</p>\n<p>\nLa négociation de la méthode chiffrement du protocole SSL (Secure\nSockets Layer) n'est pas abordée.\n</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"langages-et-programmation\" style=\"position:relative;\"><a href=\"#langages-et-programmation\" aria-label=\"langages et programmation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Langages et programmation</h3>\n<p>Le travail entrepris en classe de première sur les méthodes de\nprogrammation est prolongé. L'accent est mis sur une programmation\nassurant une meilleure sûreté, c'est-à-dire minimisant le nombre\nd'erreurs. Parallèlement, on montre l'universalité et les limites de la\nnotion de calculabilité.</p>\n<p>La récursivité est une méthode fondamentale de programmation. Son\nintroduction permet également de diversifier les algorithmes étudiés. En\nclasse terminale, les élèves s'initient à différents paradigmes de\nprogrammation pour ne pas se limiter à une démarche impérative.</p>\n<table class=\"table table-bordered table-hover\">\n<thead class=\"table-warning\">\n<tr class=\"header\">\n<th>\nContenus\n</th>\n<th>\nCapacités attendues\n</th>\n<th>\nCommentaires\n</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>\n<p>\nNotion de programme en tant que donnée.\n</p>\n<p>\nCalculabilité, décidabilité.\n</p>\n</td>\n<td>\n<p>\nComprendre que tout programme est aussi une donnée.\n</p>\n<p>\nComprendre que la calculabilité ne dépend pas du langage de\nprogrammation utilisé.\n</p>\n<p>\nMontrer, sans formalisme théorique, que le problème de l'arrêt est\nindécidable.\n</p>\n</td>\n<td>\nL'utilisation d'un interpréteur ou d'un compilateur, le téléchargement\nde logiciel, le fonctionnement des systèmes d'exploitation permettent de\ncomprendre un programme comme donnée d'un autre programme.\n</td>\n</tr>\n<tr class=\"even\">\n<td>\nRécursivité.\n</td>\n<td>\n<p>\nÉcrire un programme récursif.\n</p>\n<p>\nAnalyser le fonctionnement d'un programme récursif.\n</p>\n</td>\n<td>\nDes exemples relevant de domaines variés sont à privilégier.\n</td>\n</tr>\n<tr class=\"odd\">\n<td>\nModularité.\n</td>\n<td>\n<p>\nUtiliser des API (Application Programming Interface) ou des\nbibliothèques.\n</p>\n<p>\nExploiter leur documentation. Créer des modules simples et les\ndocumenter.\n</p>\n</td>\n<td>\n</td>\n</tr>\n<tr class=\"even\">\n<td>\nParadigmes de programmation.\n</td>\n<td>\nDistinguer sur des exemples les paradigmes impératif, fonctionnel et\nobjet.\n</td>\n<td>\nChoisir le paradigme de programmation selon le champ d'application d'un\nprogramme. Avec un même langage de programmation, on peut utiliser des\nparadigmes différents. Dans un même programme, on peut utiliser des\nparadigmes différents.\n</td>\n</tr>\n<tr class=\"odd\">\n<td>\n<p>\nMise au point des programmes.\n</p>\n<p>\nGestion des bugs.\n</p>\n</td>\n<td>\nDans la pratique de la programmation, savoir répondre aux causes\ntypiques de bugs : problèmes liés au typage, effets de bord non désirés,\ndébordements dans les tableaux, instruction conditionnelle non\nexhaustive, choix des inégalités, comparaisons et calculs entre\nflottants, mauvais nommage des variables, etc.\n</td>\n<td>\n<p>\nOn prolonge le travail entrepris en classe de première sur l'utilisation\nde la spécification, des assertions, de la documentation des programmes\net de la construction de jeux de tests.\n</p>\n<p>\nLes élèves apprennent progressivement à anticiper leurs erreurs.\n</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"algorithmique\" style=\"position:relative;\"><a href=\"#algorithmique\" aria-label=\"algorithmique permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Algorithmique</h3>\n<p>Le travail de compréhension et de conception d'algorithmes se poursuit\nen terminale notamment via l'introduction des structures d'arbres et de\ngraphes montrant tout l'intérêt d'une approche récursive dans la\nrésolution algorithmique de problèmes.</p>\n<p>On continue l'étude de la notion de coût d'exécution, en temps ou en\nmémoire et on montre l'intérêt du passage d'un coût quadratique en n^2 à\n<em>n</em> log 2 n ou de n à log 2 n. Le logarithme en base 2 est ici manipulé\ncomme simple outil de comptage (taille en bits d'un nombre entier).</p>\n<table class=\"table table-bordered table-hover\">\n<thead class=\"table-warning\">\n<tr class=\"header\">\n<th>\nContenus\n</th>\n<th>\nCapacités attendues\n</th>\n<th>\nCommentaires\n</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>\nAlgorithmes sur les arbres binaires et sur les arbres binaires de\nrecherche.\n</td>\n<td>\n<p>\nCalculer la taille et la hauteur d'un arbre.\n</p>\n<p>\nParcourir un arbre de différentes façons (ordres infixe, préfixe ou\nsuffixe ; ordre en largeur d'abord).\n</p>\n<p>\nRechercher une clé dans un arbre de recherche, insérer une clé.\n</p>\n</td>\n<td>\n<p>\nUne structure de données récursive adaptée est utilisée.\n</p>\n<p>\nL'exemple des arbres permet d'illustrer la programmation par classe.\n</p>\n<p>\nLa recherche dans un arbre de recherche équilibré est de coût\nlogarithmique.\n</p>\n</td>\n</tr>\n<tr class=\"even\">\n<td>\nAlgorithmes sur les graphes.\n</td>\n<td>\n<p>\nParcourir un graphe en profondeur d'abord, en largeur d'abord.\n</p>\n<p>\nRepérer la présence d'un cycle dans un graphe.\n</p>\n<p>\nChercher un chemin dans un graphe.\n</p>\n</td>\n<td>\n<p>\nLe parcours d'un labyrinthe et le routage dans Internet sont des\nexemples d'algorithme sur les graphes.\n</p>\n<p>\nL'exemple des graphes permet d'illustrer l'utilisation des classes en\nprogrammation.\n</p>\n</td>\n</tr>\n<tr class=\"odd\">\n<td>\nMéthode « diviser pour régner ».\n</td>\n<td>\nÉcrire un algorithme utilisant la méthode « diviser pour régner ».\n</td>\n<td>\n<p>\nLa rotation d'une image bitmap d'un quart de tour avec un coût en\nmémoire constant est un bon exemple.\n</p>\n<p>\nL'exemple du tri fusion permet également d'exploiter la récursivité et\nd'exhiber un algorithme de coût en n log 2 n dans les pires des cas.\n</p>\n</td>\n</tr>\n<tr class=\"even\">\n<td>\nProgrammation dynamique.\n</td>\n<td>\nUtiliser la programmation dynamique pour écrire un algorithme.\n</td>\n<td>\n<p>\nLes exemples de l'alignement de séquences ou du rendu de monnaie peuvent\nêtre présentés.\n</p>\n<p>\nLa discussion sur le coût en mémoire peut être développée.\n</p>\n</td>\n</tr>\n<tr class=\"odd\">\n<td>\nRecherche textuelle.\n</td>\n<td>\nÉtudier l'algorithme de Boyer- Moore pour la recherche d'un motif dans\nun texte.\n</td>\n<td>\n<p>\nL'intérêt du prétraitement du motif est mis en avant.\n</p>\n<p>\nL'étude du coût, difficile, ne peut être exigée.\n</p>\n</td>\n</tr>\n</tbody>\n</table>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#pr%C3%A9ambule\">Préambule</a></p>\n<ul>\n<li><a href=\"#d%C3%A9marche-de-projet\">Démarche de projet</a></li>\n<li><a href=\"#modalit%C3%A9s-de-mise-en-%C5%93uvre\">Modalités de mise en œuvre</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%C3%A9l%C3%A9ments-de-programme\">Éléments de programme</a></p>\n<ul>\n<li><a href=\"#histoire-de-linformatique\">Histoire de l'informatique</a></li>\n<li><a href=\"#structures-de-donn%C3%A9es\">Structures de données</a></li>\n<li><a href=\"#bases-de-donn%C3%A9es\">Bases de données</a></li>\n<li><a href=\"#architectures-mat%C3%A9rielles-syst%C3%A8mes-dexploitation-et-r%C3%A9seaux\">Architectures matérielles, systèmes d'exploitation et réseaux</a></li>\n<li><a href=\"#langages-et-programmation\">Langages et programmation</a></li>\n<li><a href=\"#algorithmique\">Algorithmique</a></li>\n</ul>\n</li>\n</ul>","fields":{"classe":"tg","matter":"nsi","slug":"tg/nsi/programme"}}},"pageContext":{"slug":"tg/nsi/programme"}},"staticQueryHashes":["604483588"]}