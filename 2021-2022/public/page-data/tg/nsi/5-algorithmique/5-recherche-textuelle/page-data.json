{"componentChunkName":"component---src-templates-cours-md-js","path":"/tg/nsi/5-algorithmique/5-recherche-textuelle","result":{"data":{"markdownRemark":{"html":"<p><strong>Ce chapitre ne pourra pas faire l'objet d'une évaluation lors de\nl'épreuve terminale écrite et pratique de l'enseignement de\nspécialité.</strong> [<span><a href=\"https://www.education.gouv.fr/bo/21/Hebdo30/MENE2121274N.htm\">BO\nMENE2121274N</a></span>]{.cite-source}</p>\n<details class=\"programme\">\n<summary>\nProgramme Officiel\n</summary>\n<table class=\"table table-bordered table-hover\">\n<thead class=\"table-warning\">\n<tr class=\"header\">\n<th>\nContenus\n</th>\n<th>\nCapacités attendues\n</th>\n<th>\nCommentaires\n</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>\nRecherche textuelle.\n</td>\n<td>\nÉtudier l'algorithme de Boyer- Moore pour la recherche d'un motif dans\nun texte.\n</td>\n<td>\n<p>\nL'intérêt du prétraitement du motif est mis en avant.\n</p>\n<p>\nL'étude du coût, difficile, ne peut être exigée.\n</p>\n</td>\n</tr>\n</tbody>\n</table>\n<a class=\"lien-programme\" href=\"../programme/\">Lien vers le programme\ncomplet</a>\n</details>\n<blockquote>\n<p>La recherche d'une sous-chaine a des applications importantes en\ninformatiques, par exemple dans les moteurs de recherche. Nous\ncommencerons par une application naïve puis nous verrons qu'il est\nbien plus efficace de faire la recherche en sens inverse en partant du\ndernier caractère du mot pour ne pas tester toutes les positions.</p>\n</blockquote>\n<h2 id=\"algorithme-naïf\" style=\"position:relative;\"><a href=\"#algorithme-na%C3%AFf\" aria-label=\"algorithme naïf permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Algorithme naïf</h2>\n<p>Nous allons appliquer une méthode itérative brute pour rechercher une\nsous-chaine dans une chaine de caractères.</p>\n<p>Nous allons avancer dans le texte caractère par caractère, puis si le\ncaractère considéré correspond au premier caractère du mot, nous\ncomparerons les caractères suivants à ceux du mot. si la recherche\ns'avère fructueuse on renvoie <code class=\"language-text\">True</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">recherche_mot</span><span class=\"token punctuation\">(</span>texte<span class=\"token punctuation\">,</span> mot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Recherche un mot dans un texte\n\n    Arguments\n    ---------\n    texte: str\n        le texte dans lequel on effectue la recherche\n    mot: str\n        le mot recherché\n\n    Returns\n    -------\n    bool\n        renvoie True si le mot est trouvé\n    \"\"\"</span>\n    N <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>texte<span class=\"token punctuation\">)</span>\n    n <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>mot<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>N<span class=\"token operator\">-</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        trouvé <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n        <span class=\"token keyword\">while</span> recherche <span class=\"token keyword\">and</span> k <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> mot<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> texte<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span>k<span class=\"token punctuation\">]</span>\n                recherche <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n            k <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">if</span> recherche<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>L'exécution est relativement lente, la fonction doit tester <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi><mo>−</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">N-n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span></span>\npositions dans <code class=\"language-text\">texte</code> et pour chacune effectuer jusqu'à <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi><mo>−</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">N-n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span></span>\ncomparaisons, soit jusqu'à <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>N</mi><mo>−</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>×</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">(N-n)\\times n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span></span>.</p>\n<p>La complexité de cet algorithme est dans le pire des cas\n<span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mrow><mo fence=\"true\">(</mo><mo stretchy=\"false\">(</mo><mi>N</mi><mo>−</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>×</mo><mi>n</mi><mo fence=\"true\">)</mo></mrow></mrow><annotation encoding=\"application/x-tex\">O\\left( (N-n) \\times n \\right )</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span></span></span></span></span>, c'est une complexité quadratique\n<span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mrow><mo fence=\"true\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo fence=\"true\">)</mo></mrow></mrow><annotation encoding=\"application/x-tex\">O\\left( N^2 \\right )</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2em;vertical-align:-0.35em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span></span></span></span></span> car souvent <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi><mo>></mo><mo>></mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">N >> n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">>></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span></span>.</p>\n<p>Nous allons voir qu'il est beaucoup plus efficace de faire la recherche\nà l'envers à partir de la fin du mot.</p>\n<h2 id=\"lalgorithme-de-boyer-moore--version-simplifiée-de-horspool\" style=\"position:relative;\"><a href=\"#lalgorithme-de-boyer-moore--version-simplifi%C3%A9e-de-horspool\" aria-label=\"lalgorithme de boyer moore  version simplifiée de horspool permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>L'algorithme de Boyer-Moore : version simplifiée de Horspool</h2>\n<dl>\n<dt>\nNous allons étudier une version simplifiée du meilleur algorithme connu\n</dt>\n<dd>\n<div>\n<p>l'algorithme de Boyer-Moore qui a été proposé par Nigel Horspool.</p>\n</div>\n</dd>\n</dl>\n<p>Cet algorithme repose sur deux idées :</p>\n<ol>\n<li>On compare le mot de droite à gauche à partir de sa dernière lettre.</li>\n<li>On n'avance pas dans le texte caractère par caractère, mais on\nutilise un décalage dépendant de la dernière comparaison effectuée.</li>\n</ol>\n<h3 id=\"déroulement-de-lalgorithme\" style=\"position:relative;\"><a href=\"#d%C3%A9roulement-de-lalgorithme\" aria-label=\"déroulement de lalgorithme permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Déroulement de l'algorithme</h3>\n<p>Nous considérons ici la recherche du motif <code class=\"language-text\">mot = 'dab'</code> dans le texte\n<code class=\"language-text\">texte = 'abracadabra'</code>.</p>\n<p>On commence la recherche à l'index 2 :</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">abracadabra\ndab</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>Il n'y a pas de correspondance à la fin du mot : <code class=\"language-text\">'r' != 'b'</code>, donc on\navance, mais de combien de caractères avance-t-on. Pour le décider, on\nutilise le fait que le caractère <code class=\"language-text\">'r'</code> n'apparait pas dans le mot\ncherché, donc on peut avancer de <code class=\"language-text\">n = len(mot) = 3</code> caractères sans\ncrainte de rater le mot.</p>\n<p>On recherche donc à l'indice 2 + 3 = 5 :</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">abracadabra\n   dab</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>Il n'y a pas de correspondance à la fin du mot : <code class=\"language-text\">'a' != 'b'</code>, donc on\navance, cependant, cette fois, comme le caractère <code class=\"language-text\">'a'</code> apparait pas\ndans le mot cherché en avant-dernière position, on ne peut avancer que\nde une case pour faire une comparaison en alignant les <code class=\"language-text\">'a'</code>.</p>\n<p>On recherche donc à l'indice 5 + 1 = 6 :</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">abracadabra\n    dab</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>Il n'y a pas de correspondance à la fin du mot : <code class=\"language-text\">'d' != 'b'</code>, donc on\navance, cependant, cette fois, comme le caractère <code class=\"language-text\">'d'</code> apparait dans le\nmot cherché en avant-avant-dernière position(<em>première position, mais on\ndoit lire à l'envers !</em>), on avance de deux cases pour faire une\ncomparaison en alignant les <code class=\"language-text\">'d'</code>.</p>\n<p>On recherche donc à l'indice 6 + 2 = 8 :</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">abracadabra\n      dab</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>Maintenant lorsqu'on effectue les comparaisons à l'envers : les <code class=\"language-text\">'b'</code>,\npuis les <code class=\"language-text\">'a'</code>, puis les <code class=\"language-text\">'d'</code> correspondent. On a trouvé le mot on\nrenvoie <code class=\"language-text\">VRAI</code>.</p>\n<h3 id=\"implémentation-en-python\" style=\"position:relative;\"><a href=\"#impl%C3%A9mentation-en-python\" aria-label=\"implémentation en python permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Implémentation en Python</h3>\n<p>Pour implémenter efficacement cet algorithme, on va passer par un\npré-traitement du nom pour facilement accéder au décalage à effectuer.\nOn utilise un dictionnaire pour cela.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">pre_traitement</span><span class=\"token punctuation\">(</span>mot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Renvoie un dictionnaire avec pour clé la lettre et pour valeur le décalage\n\n    Arguments\n    ---------\n    mot: str\n    \n    Returns\n    -------\n    dict\n    \"\"\"</span>\n    n <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>mot<span class=\"token punctuation\">)</span>\n    décalages <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token comment\"># Il n'est pas nécéssaire d'inclure la dernière lettre</span>\n    <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> letter <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>mot<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        décalages<span class=\"token punctuation\">[</span>letter<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> i <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n    <span class=\"token keyword\">return</span> décalages\n\n<span class=\"token comment\"># tests</span>\n<span class=\"token keyword\">assert</span> pre_traitement<span class=\"token punctuation\">(</span><span class=\"token string\">\"dab\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">assert</span> pre_traitement<span class=\"token punctuation\">(</span><span class=\"token string\">\"maman\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'m'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Maintenant la fonction de recherche :</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">recherche_mot_boyer</span><span class=\"token punctuation\">(</span>texte<span class=\"token punctuation\">,</span> mot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Recherche un mot dans un texte avec l'algo de boyer-moore\n\n    Arguments\n    ---------\n    texte: str\n        le texte dans lequel on effectue la recherche\n    mot: str\n        le mot recherché\n\n    Returns\n    -------\n    bool\n        renvoie True si le mot est trouvé\n    \"\"\"</span>\n    N <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>texte<span class=\"token punctuation\">)</span>\n    n <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>mot<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># création de notre dictionnaire de décalages</span>\n    décalages <span class=\"token operator\">=</span> pre_traitement<span class=\"token punctuation\">(</span>mot<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># on commence à la fin du mot</span>\n    i <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">while</span> i <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">:</span>\n        lettre <span class=\"token operator\">=</span> texte<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> lettre <span class=\"token operator\">==</span> mot<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># On vérifie que le mot est là avec un slice sur texte</span>\n            <span class=\"token comment\"># On pourrait faire un while</span>\n            <span class=\"token keyword\">if</span> texte<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> mot<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n        <span class=\"token comment\"># on décale</span>\n        <span class=\"token keyword\">if</span> lettre <span class=\"token keyword\">in</span> décalages<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            i <span class=\"token operator\">+=</span> décalages<span class=\"token punctuation\">[</span>lettre<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            i <span class=\"token operator\">+=</span> n\n        \n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n<span class=\"token comment\"># Quelques tests</span>\n<span class=\"token keyword\">assert</span> recherche_mot_boyer<span class=\"token punctuation\">(</span><span class=\"token string\">'abracadabra'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'dab'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">assert</span> recherche_mot_boyer<span class=\"token punctuation\">(</span><span class=\"token string\">'abracadabra'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'abra'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">assert</span> recherche_mot_boyer<span class=\"token punctuation\">(</span><span class=\"token string\">'abracadabra'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'obra'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token boolean\">False</span>\n<span class=\"token keyword\">assert</span> recherche_mot_boyer<span class=\"token punctuation\">(</span><span class=\"token string\">'abracadabra'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bara'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token boolean\">False</span>\n<span class=\"token keyword\">assert</span> recherche_mot_boyer<span class=\"token punctuation\">(</span><span class=\"token string\">'maman est là'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'maman'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">assert</span> recherche_mot_boyer<span class=\"token punctuation\">(</span><span class=\"token string\">'bonjour maman'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'maman'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">assert</span> recherche_mot_boyer<span class=\"token punctuation\">(</span><span class=\"token string\">'bonjour maman'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'papa'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token boolean\">False</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<details class=\"appli\">\n<summary>\n \n</summary>\n<p>Copier et tester ce code dans votre environnement, puis :</p>\n<ol>\n<li>Ajouter des tests avec des cas limites.</li>\n<li>Remplacer <code class=\"language-text\">if texte[i-n+1:i+1] == mot:return True</code> par une boucle\n<code class=\"language-text\">while</code>, qui lit les caractères de droite à gauche et retourne\n<code class=\"language-text\">True</code> si tous les caractères de <code class=\"language-text\">texte</code> et de <code class=\"language-text\">mot</code> correspondent à\nla position <code class=\"language-text\">i</code> considéré.</li>\n</ol>\n</details>\n<div class=\"ref\">\n<ul>\n<li><span><a href=\"https://editions.lavoisier.fr/etudes-superieures/informatique-mp-pc-pt-psi/preaux/tec-et-doc/le-tout-en-un/livre/9782743022976\">Informatique\nMP-PC-PT-PSI</a></span></li>\n<li><span><a href=\"https://eduscol.education.fr/cid144156/nsi-bac-2021.html\">Ressources pour la NSI sur\neduscol</a></span></li>\n</ul>\n</div>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#algorithme-na%C3%AFf\">Algorithme naïf</a></p>\n</li>\n<li>\n<p><a href=\"#lalgorithme-de-boyer-moore--version-simplifi%C3%A9e-de-horspool\">L'algorithme de Boyer-Moore : version simplifiée de Horspool</a></p>\n<ul>\n<li><a href=\"#d%C3%A9roulement-de-lalgorithme\">Déroulement de l'algorithme</a></li>\n<li><a href=\"#impl%C3%A9mentation-en-python\">Implémentation en Python</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"tags":["cours","terminale","lycée","numérique et sciences informatiques","nsi"]},"fields":{"classe":"tg","chapter":"Recherche textuelle*","matter":"nsi","nChapter":"5","part":"Algorithmique","nPart":"5"}}},"pageContext":{"slug":"tg/nsi/5-algorithmique/5-recherche-textuelle","chapter":"Recherche textuelle*"}},"staticQueryHashes":["604483588"]}