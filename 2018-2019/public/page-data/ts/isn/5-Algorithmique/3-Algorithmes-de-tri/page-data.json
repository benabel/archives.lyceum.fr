{"componentChunkName":"component---src-templates-cours-md-js","path":"/ts/isn/5-Algorithmique/3-Algorithmes-de-tri","webpackCompilationHash":"41b6f3e30b482131442a","result":{"data":{"site":{"siteMetadata":{"title":"lyceum.fr"}},"markdownRemark":{"html":"<p>Maintenant que nous disposons de tableaux pour stocker de grandes quantités de données, il faut qu'on apprenne à les classer. Il existe de nombreux algorithmes de tri plus ou moins efficaces, qui sont pour la plupart répertoriées dans <em>The Art of Computer Programming, Volume 3, Sorting and Searching.</em> de Knuth, Donald. E. [1998]. Le livre de chevet de tout programmeur.</p>\n<h2 id=\"problématique\"><a href=\"#probl%C3%A9matique\" aria-label=\"problématique permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Problématique</h2>\n<blockquote>\n<p>Comment ranger des données afin de faciliter leur accès futur ? C'est par exemple l'ordre alphabétique du dictionnaire, où les mots sont rangés dans un ordre logique qui permet de ne pas devoir parcourir tout l'ouvrage pour retrouver une définition. Ce peut être aussi l'ordre intuitif dans lequel un joueur de cartes va ranger son jeu afin de limiter le temps de recherche pendant le déroulement de la partie. Cette problématique permet d'introduire la notion de tri (avec plusieurs sens distincts : séparer, ordonner, choisir), puis d'étudier différents algorithmes de tri. Le tri permet essentiellement d'accélérer les recherches, grâce à l'algorithme de recherche dichotomique.</p>\n</blockquote>\n<p><a href=\"http://cache.media.eduscol.education.fr/file/ISN_Tle_S/29/6/lyceeGT_ressource_ISN_20_06_Tle_S_14_Vous_avez_dit_trier_1_algorithmes_218296.pdf\">Source eduscol</a></p>\n<h3 id=\"situation-daccroche\"><a href=\"#situation-daccroche\" aria-label=\"situation daccroche permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Situation d'accroche</h3>\n<p>Un joueur de cartes reçoit 9 cartes lors de la donne en début de partie ; il les trie ensuite pour faciliter la lecture de son jeu.</p>\n<ul>\n<li>Comment procède-t-il exactement pour réaliser cette opération ?</li>\n<li>Y a-t-il plusieurs façons de procéder :</li>\n</ul>\n<p>Vous rendre sur cette page sur laquelle vous est proposé un jeu de cartes à trier:</p>\n<p><a href=\"https://github.com/benjaminabel/order-cards-game\">https://github.com/benjaminabel/order-cards-game</a>.</p>\n<p>Réalisez les consignes suivantes dans l'ordre.</p>\n<ol>\n<li><strong>Consigne n° 1:</strong> « triez les cartes » en notant le nombre d'opérations nécessaires au tri, recommencer l'opération pour voir si le nombre de tours d'algorithmes varie, et de quoi peut dépendre ce nombre. Ensuite seulement,</li>\n<li><strong>Consigne n° 2:</strong> « décrivez par écrit la façon précise dont vous vous y êtes pris pour effectuer le tri ».</li>\n<li><strong>En plus,</strong> imaginez d'autres méthodes qui pourraient être plus efficaces pour effectuer le tri.</li>\n</ol>\n<h3 id=\"implémentations-en-python\"><a href=\"#impl%C3%A9mentations-en-python\" aria-label=\"implémentations en python permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Implémentations en python</h3>\n<p>Nous allons maintenant voir comment implémenter deux algorithmes de tri pas forcément très efficaces, mais relativement simples en python:</p>\n<ul>\n<li>le tri par sélection</li>\n<li>le tri par insertion</li>\n</ul>\n<h3 id=\"créer-une-liste-de-données-aléatoire\"><a href=\"#cr%C3%A9er-une-liste-de-donn%C3%A9es-al%C3%A9atoire\" aria-label=\"créer une liste de données aléatoire permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Créer une liste de données aléatoire</h3>\n<p>Commencer par créer des données de façon aléatoire grâce au module <code class=\"language-text\">random</code> afin de pouvoir les classer.</p>\n<hr>\n<div class=\"card text-white bg-gradient-dark\">\n<div class=\"card-header\"><small class=\"text-muted\">Entrée</small></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Importer le module random pour créer des nombres au hasard</span>\n<span class=\"token keyword\">import</span> random\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">genere_liste_aleatoire</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Génére une liste aléatoire de N éléments compris entre 0 et n\"\"\"</span>\n    <span class=\"token comment\"># Créer une liste vide pour accueillir les nombres</span>\n    data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token comment\"># ajoute les éléments aléatoires dans la liste</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        data<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span>randrange<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> data\n\n<span class=\"token comment\"># Création d'une liste de 50 valeurs comprises entre 0 et 100</span>\nliste_aléatoire <span class=\"token operator\">=</span> genere_liste_aleatoire<span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>liste_aléatoire<span class=\"token punctuation\">)</span></code></pre></div>\n</div>\n</div>\n<div class=\"card text-white bg-gradient-light stream-output\">\n<div class=\"card-header\"><small class=\"text-muted\">Sortie</small></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[42, 1, 19, 89, 75, 1, 43, 77, 65, 80, 81, 32, 93, 54, 87, 5, 15, 96, 98, 23, 39, 39, 58, 7, 73, 1, 96, 68, 41, 47, 13, 36, 97, 68, 68, 10, 1, 34, 76, 65, 8, 80, 57, 96, 26, 54, 65, 4, 69, 52]</code></pre></div>\n</div>\n</div>\n<hr>\n<h2 id=\"le-tri-par-sélection\"><a href=\"#le-tri-par-s%C3%A9lection\" aria-label=\"le tri par sélection permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Le tri par sélection</h2>\n<h3 id=\"principe\"><a href=\"#principe\" aria-label=\"principe permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Principe</h3>\n<blockquote>\n<p>Sur un tableau de n éléments (numérotés de 0 à n), le principe du tri par sélection est le suivant :</p>\n</blockquote>\n<ul>\n<li>rechercher le plus petit élément du tableau, et l'échanger avec l'élément d'indice 0 ;</li>\n<li>rechercher le second plus petit élément du tableau, et l'échanger avec l'élément d'indice 1 ;</li>\n<li>continuer de cette façon jusqu'à ce que le tableau soit entièrement trié.</li>\n</ul>\n<p><a href=\"http://fr.wikipedia.org/wiki/Tri_par_s%C3%A9lection\">Source Wikipedia</a></p>\n<h3 id=\"illustration-graphique\"><a href=\"#illustration-graphique\" aria-label=\"illustration graphique permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Illustration graphique</h3>\n<p><a title=\"Joestape89 at the English language Wikipedia [GFDL (http://www.gnu.org/copyleft/fdl.html) or CC-BY-SA-3.0 (http://creativecommons.org/licenses/by-sa/3.0/)], via Wikimedia Commons\" href=\"http://commons.wikimedia.org/wiki/File%3ASelection-Sort-Animation.gif\"><img class=\"center\" width=\"64\" alt=\"Selection-Sort-Animation\" src=\"//upload.wikimedia.org/wikipedia/commons/9/94/Selection-Sort-Animation.gif\"></a></p>\n<h3 id=\"illustration-en-vidéo\"><a href=\"#illustration-en-vid%C3%A9o\" aria-label=\"illustration en vidéo permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Illustration en vidéo</h3>\n<p><a href=\"https://www.youtube.com/watch?v=Ns4TPTC8whw\" title=\"Cliquer pour voir la vidéo sur youtube.com\"><img src=\"https://img.youtube.com/vi/Ns4TPTC8whw/0.jpg\" alt=\"Thumbnail of Youtube video Ns4TPTC8whw\" title=\"Cliquer pour voir la vid&#xE9;o sur youtube.com\" width=\"768\" class=\"center\"></a></p>\n<p><em class=\"cite-source\">Select-sort with Gypsy folk dance. Created at Sapientia University, Tirgu Mures (Marosvásárhely), Romania. Directed by Kátai Zoltán and Tóth László. In cooperation with \"Maros Művészegyüttes\", Tirgu Mures (Marosvásárhely), Romania.</em></p>\n<h3 id=\"implémentation-en-python\"><a href=\"#impl%C3%A9mentation-en-python\" aria-label=\"implémentation en python permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Implémentation en python</h3>\n<p>Voici un exemple de code implémentant cet algorithme de tri présentant l'état de la liste à chaque tour avancée dans le tableau. Vous pouvez voir que le tableau est bien classé en <strong>plaçant systématiquement l'élément minimum du tableau restant à trier à la fin des éléments triés</strong>.</p>\n<hr>\n<div class=\"card text-white bg-gradient-dark\">\n<div class=\"card-header\"><small class=\"text-muted\">Entrée</small></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Création d'une liste de 10 valeurs comprises entre 0 et 100 à trier</span>\ndata <span class=\"token operator\">=</span> genere_liste_aleatoire<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Liste initiale: \"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Calculer la taille du tableau</span>\nN <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Parcourir le tableau entier</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-'</span> <span class=\"token operator\">*</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i= \"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># Stocker la valeur initiale de la case d'indice i, et son indice</span>\n    minimum <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    i_min <span class=\"token operator\">=</span> i\n    <span class=\"token comment\">#  Parcourir le reste du tableau pour rechercher l'élément le plus petit restant</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> data<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> minimum<span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># Stocker la valeur du minimum et son indice</span>\n            minimum <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n            i_min <span class=\"token operator\">=</span> j\n    <span class=\"token comment\"># Intervertir la valeur initiale de la case d'indice i et le minimum trouvé</span>\n    tmp <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> minimum\n    data<span class=\"token punctuation\">[</span>i_min<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp\n    <span class=\"token comment\"># Affiche les états intermédiaires de la liste</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Etat de la liste:\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Éléments triés: \"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Reste à trier: \"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Liste triée: \"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span></code></pre></div>\n</div>\n</div>\n<div class=\"card text-white bg-gradient-light stream-output\">\n<div class=\"card-header\"><small class=\"text-muted\">Sortie</small></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Liste initiale:  [92, 77, 24, 67, 51, 34, 93, 27, 49, 3]\n--------------------------------------------------------------------------------\ni=  0\nEtat de la liste: [3, 77, 24, 67, 51, 34, 93, 27, 49, 92]\nÉléments triés:  [3] Reste à trier:  [77, 24, 67, 51, 34, 93, 27, 49, 92]\n--------------------------------------------------------------------------------\ni=  1\nEtat de la liste: [3, 24, 77, 67, 51, 34, 93, 27, 49, 92]\nÉléments triés:  [3, 24] Reste à trier:  [77, 67, 51, 34, 93, 27, 49, 92]\n--------------------------------------------------------------------------------\ni=  2\nEtat de la liste: [3, 24, 27, 67, 51, 34, 93, 77, 49, 92]\nÉléments triés:  [3, 24, 27] Reste à trier:  [67, 51, 34, 93, 77, 49, 92]\n--------------------------------------------------------------------------------\ni=  3\nEtat de la liste: [3, 24, 27, 34, 51, 67, 93, 77, 49, 92]\nÉléments triés:  [3, 24, 27, 34] Reste à trier:  [51, 67, 93, 77, 49, 92]\n--------------------------------------------------------------------------------\ni=  4\nEtat de la liste: [3, 24, 27, 34, 49, 67, 93, 77, 51, 92]\nÉléments triés:  [3, 24, 27, 34, 49] Reste à trier:  [67, 93, 77, 51, 92]\n--------------------------------------------------------------------------------\ni=  5\nEtat de la liste: [3, 24, 27, 34, 49, 51, 93, 77, 67, 92]\nÉléments triés:  [3, 24, 27, 34, 49, 51] Reste à trier:  [93, 77, 67, 92]\n--------------------------------------------------------------------------------\ni=  6\nEtat de la liste: [3, 24, 27, 34, 49, 51, 67, 77, 93, 92]\nÉléments triés:  [3, 24, 27, 34, 49, 51, 67] Reste à trier:  [77, 93, 92]\n--------------------------------------------------------------------------------\ni=  7\nEtat de la liste: [3, 24, 27, 34, 49, 51, 67, 77, 93, 92]\nÉléments triés:  [3, 24, 27, 34, 49, 51, 67, 77] Reste à trier:  [93, 92]\n--------------------------------------------------------------------------------\ni=  8\nEtat de la liste: [3, 24, 27, 34, 49, 51, 67, 77, 92, 93]\nÉléments triés:  [3, 24, 27, 34, 49, 51, 67, 77, 92] Reste à trier:  [93]\n--------------------------------------------------------------------------------\ni=  9\nEtat de la liste: [3, 24, 27, 34, 49, 51, 67, 77, 92, 93]\nÉléments triés:  [3, 24, 27, 34, 49, 51, 67, 77, 92, 93] Reste à trier:  []\nListe triée:  [3, 24, 27, 34, 49, 51, 67, 77, 92, 93]</code></pre></div>\n</div>\n</div>\n<hr>\n<h2 id=\"le-tri-par-insertion\"><a href=\"#le-tri-par-insertion\" aria-label=\"le tri par insertion permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Le tri par insertion</h2>\n<h3 id=\"principe-1\"><a href=\"#principe-1\" aria-label=\"principe 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Principe</h3>\n<blockquote>\n<p>Dans l'algorithme, on parcourt le tableau à trier du début à la fin. Au moment où on considère le i-ème élément, les éléments qui le précèdent sont déjà triés. Pour faire l'analogie avec l'exemple du jeu de cartes, lorsqu'on est à la i-ème étape du parcours, le i-ème élément est la carte saisie, les éléments précédents sont la main triée et les éléments suivants correspondent aux cartes encore mélangées sur la table.</p>\n</blockquote>\n<blockquote>\n<p>L'objectif d'une étape est d'insérer le i-ème élément à sa place parmi ceux qui précèdent. Il faut pour cela trouver où l'élément doit être inséré en le comparant aux autres, puis décaler les éléments afin de pouvoir effectuer l'insertion. En pratique, ces deux actions sont fréquemment effectuées en une passe, qui consiste à faire « remonter » l'élément au fur et à mesure jusqu'à rencontrer un élément plus petit.</p>\n</blockquote>\n<p><a href=\"http://fr.wikipedia.org/wiki/Tri_par_insertion\">Source Wikipedia</a></p>\n<h3 id=\"illustration-graphique-1\"><a href=\"#illustration-graphique-1\" aria-label=\"illustration graphique 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Illustration graphique</h3>\n<p><a href=\"http://commons.wikimedia.org/wiki/File:Insertion-sort-example-300px.gif#mediaviewer/File:Insertion-sort-example-300px.gif\"><img class=\"center\" alt=\"Insertion-sort-example-300px.gif\" src=\"http://upload.wikimedia.org/wikipedia/commons/0/0f/Insertion-sort-example-300px.gif\"></a><br>&quot;<a href=\"http://commons.wikimedia.org/wiki/File:Insertion-sort-example-300px.gif#mediaviewer/File:Insertion-sort-example-300px.gif\">Insertion-sort-example-300px</a>&quot; by <a href=\"//commons.wikimedia.org/w/index.php?title=User:Swfung8&amp;action=edit&amp;redlink=1\" class=\"new\" title=\"User:Swfung8 (page does not exist)\">Swfung8</a> - <span class=\"int-own-work\">Own work</span>. Licensed under <a title=\"Creative Commons Attribution-Share Alike 3.0\" href=\"http://creativecommons.org/licenses/by-sa/3.0\">CC BY-SA 3.0</a> via <a href=\"//commons.wikimedia.org/wiki/\">Wikimedia Commons</a>.</p>\n<h3 id=\"illustration-en-vidéo-1\"><a href=\"#illustration-en-vid%C3%A9o-1\" aria-label=\"illustration en vidéo 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Illustration en vidéo</h3>\n<p><a href=\"https://www.youtube.com/watch?v=ROalU379l3U\" title=\"Cliquer pour voir la vidéo sur youtube.com\"><img src=\"https://img.youtube.com/vi/ROalU379l3U/0.jpg\" alt=\"Thumbnail of Youtube video ROalU379l3U\" title=\"Cliquer pour voir la vid&#xE9;o sur youtube.com\" width=\"768\" class=\"center\"></a></p>\n<p><em class=\"cite-source\">Insert-sort with Romanian folk dance. Created at Sapientia University, Tirgu Mures (Marosvásárhely), Romania. Directed by Kátai Zoltán and Tóth László. In cooperation with \"Maros Művészegyüttes\", Tirgu Mures (Marosvásárhely), Romania.</em></p>\n<h3 id=\"implémentation-en-python-1\"><a href=\"#impl%C3%A9mentation-en-python-1\" aria-label=\"implémentation en python 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Implémentation en python</h3>\n<p>Voici un exemple d'implémentation ou le tableau est parcouru de la gauche vers la droite, observer bien ou est placée la valeur à insérer à chaque tour de la boucle.</p>\n<hr>\n<div class=\"card text-white bg-gradient-dark\">\n<div class=\"card-header\"><small class=\"text-muted\">Entrée</small></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Création d'une liste de 10 valeurs comprises entre 0 et 100 à trier</span>\ndata <span class=\"token operator\">=</span> genere_liste_aleatoire<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Liste initiale: \"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Parcourir l'ensemble de la liste à partir de la deuxième case</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-'</span> <span class=\"token operator\">*</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i= \"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># Stocker la valeur à \"insérer\"</span>\n    val <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Valeur à insérer:\"</span><span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># Parcourir le tableau déjà trié de dimension i-1 vers la gauche</span>\n    <span class=\"token comment\"># jusqu'à rencontrer une valeur inférieure à notre valeur à insérer</span>\n    j <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">while</span> data<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> val <span class=\"token keyword\">and</span> j <span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Intervertir  les valeurs aux indices j et j+1</span>\n        data<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n        data<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val\n        <span class=\"token comment\"># Diminuer j de 1 pour la prochaine comparaison</span>\n        j <span class=\"token operator\">=</span> j <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"On remonte la valeur &lt;-\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Etat intérmédiaire de la liste: \"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Afficher le résultat</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\nListe triée:'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></code></pre></div>\n</div>\n</div>\n<div class=\"card text-white bg-gradient-light stream-output\">\n<div class=\"card-header\"><small class=\"text-muted\">Sortie</small></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Liste initiale:  [75, 53, 97, 76, 13, 10, 98, 10, 46, 65]\n--------------------------------------------------------------------------------\ni=  1\nValeur à insérer: 53\nOn remonte la valeur &lt;- [53, 75, 97, 76, 13, 10, 98, 10, 46, 65]\nEtat intérmédiaire de la liste:  [53, 75, 97, 76, 13, 10, 98, 10, 46, 65]\n--------------------------------------------------------------------------------\ni=  2\nValeur à insérer: 97\nEtat intérmédiaire de la liste:  [53, 75, 97, 76, 13, 10, 98, 10, 46, 65]\n--------------------------------------------------------------------------------\ni=  3\nValeur à insérer: 76\nOn remonte la valeur &lt;- [53, 75, 76, 97, 13, 10, 98, 10, 46, 65]\nEtat intérmédiaire de la liste:  [53, 75, 76, 97, 13, 10, 98, 10, 46, 65]\n--------------------------------------------------------------------------------\ni=  4\nValeur à insérer: 13\nOn remonte la valeur &lt;- [53, 75, 76, 13, 97, 10, 98, 10, 46, 65]\nOn remonte la valeur &lt;- [53, 75, 13, 76, 97, 10, 98, 10, 46, 65]\nOn remonte la valeur &lt;- [53, 13, 75, 76, 97, 10, 98, 10, 46, 65]\nOn remonte la valeur &lt;- [13, 53, 75, 76, 97, 10, 98, 10, 46, 65]\nEtat intérmédiaire de la liste:  [13, 53, 75, 76, 97, 10, 98, 10, 46, 65]\n--------------------------------------------------------------------------------\ni=  5\nValeur à insérer: 10\nOn remonte la valeur &lt;- [13, 53, 75, 76, 10, 97, 98, 10, 46, 65]\nOn remonte la valeur &lt;- [13, 53, 75, 10, 76, 97, 98, 10, 46, 65]\nOn remonte la valeur &lt;- [13, 53, 10, 75, 76, 97, 98, 10, 46, 65]\nOn remonte la valeur &lt;- [13, 10, 53, 75, 76, 97, 98, 10, 46, 65]\nOn remonte la valeur &lt;- [10, 13, 53, 75, 76, 97, 98, 10, 46, 65]\nEtat intérmédiaire de la liste:  [10, 13, 53, 75, 76, 97, 98, 10, 46, 65]\n--------------------------------------------------------------------------------\ni=  6\nValeur à insérer: 98\nEtat intérmédiaire de la liste:  [10, 13, 53, 75, 76, 97, 98, 10, 46, 65]\n--------------------------------------------------------------------------------\ni=  7\nValeur à insérer: 10\nOn remonte la valeur &lt;- [10, 13, 53, 75, 76, 97, 10, 98, 46, 65]\nOn remonte la valeur &lt;- [10, 13, 53, 75, 76, 10, 97, 98, 46, 65]\nOn remonte la valeur &lt;- [10, 13, 53, 75, 10, 76, 97, 98, 46, 65]\nOn remonte la valeur &lt;- [10, 13, 53, 10, 75, 76, 97, 98, 46, 65]\nOn remonte la valeur &lt;- [10, 13, 10, 53, 75, 76, 97, 98, 46, 65]\nOn remonte la valeur &lt;- [10, 10, 13, 53, 75, 76, 97, 98, 46, 65]\nEtat intérmédiaire de la liste:  [10, 10, 13, 53, 75, 76, 97, 98, 46, 65]\n--------------------------------------------------------------------------------\ni=  8\nValeur à insérer: 46\nOn remonte la valeur &lt;- [10, 10, 13, 53, 75, 76, 97, 46, 98, 65]\nOn remonte la valeur &lt;- [10, 10, 13, 53, 75, 76, 46, 97, 98, 65]\nOn remonte la valeur &lt;- [10, 10, 13, 53, 75, 46, 76, 97, 98, 65]\nOn remonte la valeur &lt;- [10, 10, 13, 53, 46, 75, 76, 97, 98, 65]\nOn remonte la valeur &lt;- [10, 10, 13, 46, 53, 75, 76, 97, 98, 65]\nEtat intérmédiaire de la liste:  [10, 10, 13, 46, 53, 75, 76, 97, 98, 65]\n--------------------------------------------------------------------------------\ni=  9\nValeur à insérer: 65\nOn remonte la valeur &lt;- [10, 10, 13, 46, 53, 75, 76, 97, 65, 98]\nOn remonte la valeur &lt;- [10, 10, 13, 46, 53, 75, 76, 65, 97, 98]\nOn remonte la valeur &lt;- [10, 10, 13, 46, 53, 75, 65, 76, 97, 98]\nOn remonte la valeur &lt;- [10, 10, 13, 46, 53, 65, 75, 76, 97, 98]\nEtat intérmédiaire de la liste:  [10, 10, 13, 46, 53, 65, 75, 76, 97, 98]\n\nListe triée:\n[10, 10, 13, 46, 53, 65, 75, 76, 97, 98]</code></pre></div>\n</div>\n</div>\n<hr>\n<h2 id=\"autres-algorithmes\"><a href=\"#autres-algorithmes\" aria-label=\"autres algorithmes permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Autres algorithmes</h2>\n<p>Ces deux algorithmes ne sont que des exemples d'algorithmes de tri, et il en existe bien d'autres plus efficace comme le fameux <em>quicksort</em>, ou le <em>timsort</em> utilisé comme algorithme par défaut en Python.</p>\n<p>La littérature ne manque pas sur ce sujet car il s'agit d'une introduction de choix à de nombreux concepts clés de l'algorithmique:</p>\n<ul>\n<li><strong>la complexité</strong>: l'étude du temps et de la mémoire nécessité par l'algorithme.</li>\n<li><strong>les cas extremes</strong> ou <em>edge cases</em>: que se passe-t-il dans le cas ou la liste est déjà triée, ou au contraire si elle est en ordre inversé.</li>\n<li>** la correction de l'algorithme**: comment prouver par une méthode de récurrence que l'algorithme donne le bon résultat en toute occasion par une approche de démonstration mathématique.</li>\n</ul>\n<p>Vous pouvez consulter cet article du site <a href=\"https://interstices.info/jcms/c_6973/les-algorithmes-de-tri\">interstices.info</a> pour en savoir plus.</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/2018-2019/ts/isn/5-Algorithmique/3-Algorithmes-de-tri/#probl%C3%A9matique\">Problématique</a></p>\n<ul>\n<li><a href=\"/2018-2019/ts/isn/5-Algorithmique/3-Algorithmes-de-tri/#situation-daccroche\">Situation d'accroche</a></li>\n<li><a href=\"/2018-2019/ts/isn/5-Algorithmique/3-Algorithmes-de-tri/#impl%C3%A9mentations-en-python\">Implémentations en python</a></li>\n<li><a href=\"/2018-2019/ts/isn/5-Algorithmique/3-Algorithmes-de-tri/#cr%C3%A9er-une-liste-de-donn%C3%A9es-al%C3%A9atoire\">Créer une liste de données aléatoire</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/2018-2019/ts/isn/5-Algorithmique/3-Algorithmes-de-tri/#le-tri-par-s%C3%A9lection\">Le tri par sélection</a></p>\n<ul>\n<li><a href=\"/2018-2019/ts/isn/5-Algorithmique/3-Algorithmes-de-tri/#principe\">Principe</a></li>\n<li><a href=\"/2018-2019/ts/isn/5-Algorithmique/3-Algorithmes-de-tri/#illustration-graphique\">Illustration graphique</a></li>\n<li><a href=\"/2018-2019/ts/isn/5-Algorithmique/3-Algorithmes-de-tri/#illustration-en-vid%C3%A9o\">Illustration en vidéo</a></li>\n<li><a href=\"/2018-2019/ts/isn/5-Algorithmique/3-Algorithmes-de-tri/#impl%C3%A9mentation-en-python\">Implémentation en python</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/2018-2019/ts/isn/5-Algorithmique/3-Algorithmes-de-tri/#le-tri-par-insertion\">Le tri par insertion</a></p>\n<ul>\n<li><a href=\"/2018-2019/ts/isn/5-Algorithmique/3-Algorithmes-de-tri/#principe-1\">Principe</a></li>\n<li><a href=\"/2018-2019/ts/isn/5-Algorithmique/3-Algorithmes-de-tri/#illustration-graphique-1\">Illustration graphique</a></li>\n<li><a href=\"/2018-2019/ts/isn/5-Algorithmique/3-Algorithmes-de-tri/#illustration-en-vid%C3%A9o-1\">Illustration en vidéo</a></li>\n<li><a href=\"/2018-2019/ts/isn/5-Algorithmique/3-Algorithmes-de-tri/#impl%C3%A9mentation-en-python-1\">Implémentation en python</a></li>\n</ul>\n</li>\n<li><a href=\"/2018-2019/ts/isn/5-Algorithmique/3-Algorithmes-de-tri/#autres-algorithmes\">Autres algorithmes</a></li>\n</ul>","frontmatter":{"tags":["tri par sélection","tri par insertion"]},"fields":{"classe":"ts","chapter":"Algorithmes de tri","matter":"isn","nChapter":"3","part":"Algorithmique","nPart":"5"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"ts/isn/5-Algorithmique/3-Algorithmes-de-tri","chapter":"Algorithmes de tri"}}}