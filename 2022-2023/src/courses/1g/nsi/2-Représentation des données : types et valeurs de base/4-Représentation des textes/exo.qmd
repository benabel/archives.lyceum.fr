## Codages ASCII, Latin-1 et UTF-8

1. Peut-on encoder en ASCII le texte « Ne désire que ce que tu as. »?

   ::: correction

   Non la lettre `é` ne peut être encodée en ASCII, car elle n'est pas utilisée en américain.

   :::

2. Trouver le texte représenté en ASCII binaire par la suite de bits
   `01000011 00100111 01100101 01110011 01110100 00100000 01100110 01100001 01100011 01101001 01101100 01100101`

   ```{python}
   #|tags: [correction]
   #|echo: false
   from lyceum.repr import bin2ascii
   txt = ""
   for l in "01000011 00100111 01100101 01110011 01110100 00100000 01100110 01100001 01100011 01101001 01101100 01100101".split(" "):
       print(l, end="|")
       print(bin2ascii(l), end=" ")
       txt += bin2ascii(l)
   print("\n\n" + txt)

   ```

3. Traduire une phrase en ASCII binaire, puis la passer à son voisin pour qu'il la décode. Si vous
   n'avez pas de voisin utilisez: « Parler ne fait pas cuire le riz. »

   ```{python}
   #|tags: [correction]
   #|echo: false
   from lyceum.repr import ascii2bin
   txt = ""
   for l in "Parler ne fait pas cuire le riz.":
       print(l, end="|")
       print(ascii2bin(l), end=" ")
       txt += ascii2bin(l) + " "
   print("\n\n" + txt)

   ```
   
4. Traduire une phrase en ASCII hexadécimal, puis la passer à son voisin qui la décode. Si vous
   n'avez pas de voisin utilisez: « Lever la voix ne donne pas raison. ».

   ```{python}
   #|tags: [correction]
   #|echo: false
   from lyceum.repr import bin2dec, dec2hex
   txt = ""
   for l in "Lever la voix ne donne pas raison.":
       print(l, end="|")
       code = dec2hex(bin2dec(ascii2bin(l)))
       print(code, end=" ")
       txt += code + " "
   print("\n\n" + txt)

   ```

5. Recommencer en utilisant une phrase avec des accents que vous coderez en hexadécimal avec
   l'encodage `latin-1`(`ISO 8859-1`). Si vous n'avez pas de voisin utilisez: « Les excès tuent
   plus sûrement que les épées. »

   ```{python}
   #|tags: [correction]
   #|echo: false
   from lyceum.repr import bin2dec, dec2hex
   txt = ""
   for l in "Les excès tuent plus sûrement que les épées.":
       print(l, end="|")
       code = l.encode("latin-1").hex()
       print(code, end=" ")
       txt += code + " "
   print("\n\n" + txt)

   ```


6. Rédiger un paragraphe expliquant l’intérêt du codage `UTF-8`, ses avantages et ses
   inconvénients par rapport l'`ASCII` ou au codage `ISO-8859-1`.

   ::: correction 

   L'encodage ASCII permet d'encoder uniquement des textes écrits avec des caractères américains. L'encodage `ISO-8859-1` permet d'encoder les textes en français en utilisant un octet par caractère. L'`UTF-8` quant à lui permet l'encodage de tous les caractères du monde, il utilise un encodage de longueur variable allant de 1 à 4 octets et est compatible avec l'ASCII.

   :::

[Informatique et sciences du numérique Spécialité ISN en terminale S -
Avec des exercices corrigés et des idées de projets par Gilles
Dowek](http://www.editions-eyrolles.com/Livre/9782212135435/){.cite-source}

## Encodage et décodage en Python

### Encodage

Tenter d'encoder la première phrase du texte avec python.

```python
phrase = "Grace Murray Hopper, née le 9 décembre 1906 à New York et morte le 1er janvier"
phrase.encode("utf-8")
```

1. Recommencer avec les encodages ISO-8859-1 et ISO-8859-11. Noter vos observations.
2. Montrer que le caractère € peut être encodé en UTF-8, ISO-8859-15, mais pas ISO-8859-1.

### Décodage

Tenter de décoder quelques caractères de leur forme binaire _(hexadécimale)_ vers leur
représentation réelle.

```python
b'\xc3\xa9'.decode('utf-8')
```

1. Rechercher d'autres codes hexadécimaux de caractères UTF-8 à décoder sur l'article
[Wikipédia](https://en.wikipedia.org/wiki/List_of_Unicode_characters).
2. Rechercher des codes de caractères hexadécimaux `iso-8859-1` à décoder.

## Lecture et écriture de fichiers en Python

### Lecture de fichier

Pour lire un fichier texte depuis Python, la syntaxe est la suivante:

```python
with open('file-utf-8.md') as f:
    read_data = f.read()
    print(read_data)
```

Dans ce cas, on lit le fichier sous forme de texte encodé (par défaut utf-8)

Mais si on a besoin, on peut aussi lire le texte sous forme de bits, en ajoutant un deuxième
argument à la fonction open (ici `"rb"` pour read bytes):

```python
with open('file-utf-8.md', 'rb') as f:
    read_data = f.read()
    print(read_data)
```

### Écriture de fichiers

Dans ce cas le deuxième argument est `"w"` pour _write_ ou `"wb"` pour _write bytes_.

```python
with open('file-from-python-utf-8.md', 'w') as f:
    f.write("À l'origine, ce fichier texte a été écrit depuis python")

# Vérification
with open('file-from-python-utf-8.md') as f:
    read_data = f.read()
    print(read_data)
```

1. En utilisant les fonctions vues, écrire un fichier texte depuis Python que vous encoderez d'abord
  en `utf-8`, puis en `iso-8859-15`.
2. Comparer les codes binaires des deux fichiers.
