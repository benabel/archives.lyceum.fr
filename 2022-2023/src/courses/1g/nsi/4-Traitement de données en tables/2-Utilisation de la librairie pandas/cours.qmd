---
"tags": ["python", "pandas"]
---

::: programme
+----------------------+------------------------------------+-----------------------------------+
| Contenus             | Capacités attendues                | Commentaires                      |
+======================+====================================+===================================+
| Tri d’une table      | Trier une table suivant une        | Une fonction de tri intégrée au   |
|                      | colonne.                           | système ou à une bibliothèque     |
|                      |                                    | peut être utilisée.               |
+----------------------+------------------------------------+-----------------------------------+
| Fusion de tables     | Construire une nouvelle table      | La notion de domaine de valeurs   |
|                      | en combinant les données de        | est mise en évidence.             |
|                      | deux tables.                       |                                   |
+----------------------+------------------------------------+-----------------------------------+
:::

::: intro

L'utilisation des données en table étant très largement répandue, une bibliothèque spécialisée
s'est développée et imposée dans le monde de python [`pandas`](https://pandas.pydata.org/). Cette
libraire va grandement nous faciliter la lecture et l'utilisation des données.

<wc-wikimage title="Pandas_logo.svg"></wc-wikimage>

:::

## Lecture d'un fichier `csv`

La méthode `read_csv` permet la lecture d'un fichier `csv`. On utilise ici la
[Cartographie des stationnements deux roues de Nice](https://www.data.gouv.fr/fr/datasets/cartographie-des-stationnements-deux-roues-de-nice/)
mise à disposition sur le site gouvernemental: <https://data.gouv.fr> avec la description suivante:

> Vous trouverez ici la cartographie des stationnements deux roues. Table des données SIG relatives
> aux GAV-GAM et GAV/GAM nb : GAV = Garage à Vélo + GAM = Garage à Moto Code profil 1 = GAM; Code
> profil 2 = GAV, Code profil 0 = GAV-GAM


```{python}
import pandas as pd

# on importe les données dans un variable appelée df pour dataframe(le nom de la variable vous appartient)
df = pd.read_csv("gav-gam-06-09-2019.csv", sep=";")

# on affiche les 5 premières lignes
df.head(5)
```

## Exploration des données

On peut également facilement afficher le nom des colonnes avec l'attribut `columns`.

```{python}
df.columns
```

On peut facilement parcourir l'ensemble des lignes du tableau avec la méthode `itertuples()`.

```{python}
for ligne in df.itertuples():
    print(ligne)
    
    # On s'arrête à la troisième ligne pour pas encombrer le cours
    # Commenter ces deux lignes pour parcourir l'ensemble du tableau
    if ligne.Index > 2:
        break
```

Chaque ligne renvoyée par la méthode `itertuples()` est un tuple nommé, on peut ainsi aaccéder aux
valeurs individuelles de chaque ligne avec la notation pointée `ligne.nom_de_la_colonne`. Par
exemple pour afficher le nombre d'arcs du stationnement.

```{python}
for ligne in df.itertuples():
    # On s'arrête à la troisième ligne pour pas encombrer le cours
    # Commenter ces deux lignes pour parcourir l'ensmble du tableau
    if ligne.Index > 2:
        break
    print("Nombre d'arcs de stationnement pour vélos:", ligne.NB_ARC_VL)
```

## Sélection logique de données

Supposons que l'on cherche des stationnements destinés aux vélos.

```{python}
for ligne in df.itertuples():
    # On s'arrête à la troisième ligne pour pas encombrer le cours
    # Commenter ces deux lignes pour parcourir l'ensmble du tableau
    if ligne.Index > 2:
        break
    if ligne.NB_ARC_VL > 0:
        print(ligne.Index, ligne.NB_ARC_VL)
```

Effectivement parmi les trois premières lignes seul la ligne d'index 1(la deuxième) présente des
arcs de stationnement pour vélos.

Pour explorer davantage cette table de données, passez aux [exercices](./exo).

## Liens

La librairie `pandas` est extrêmement riche et seul son utilisation sur des cas concrets permet d'en comprendre les rouages.

Pour plus d'informations, vous pouvez consulter:

- la [documentation](https://pandas.pydata.org/pandas-docs/stable/)
- la fiche de [rappels](https://github.com/pandas-dev/pandas/blob/master/doc/cheatsheet/Pandas_Cheat_Sheet.pdf),
- ou encore voir ce qu'arrive à faire les kagglers avec les données en consultant des
  [exemples de notebooks](https://www.kaggle.com/kernels?sortBy=relevance&group=everyone&search=pandas&page=1&pageSize=20)
  sur le site <https://kaggle.com>.
