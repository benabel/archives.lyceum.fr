{"componentChunkName":"component---src-templates-cours-md-js","path":"/1g/nsi/8-algorithmique/3-algorithmes-de-tri/","result":{"data":{"markdownRemark":{"html":"<details class=\"programme\"><summary>Programme Officiel</summary>\n<table class=\"table table-bordered table-hover\">\n<thead class=\"table-warning\">\n<tr class=\"header\">\n<th>Contenus</th>\n<th>Capacités attendues</th>\n<th>Commentaires</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>Tris par insertion, par sélection</td>\n<td><p>Écrire un algorithme de tri.</p>\n<p>Décrire un invariant de boucle qui prouve la correction des tris par insertion, par sélection.</p></td>\n<td><p>La terminaison de ces algorithmes est à justifier.</p>\n<p>On montre que leur coût est quadratique dans le pire cas.</p></td>\n</tr>\n</tbody>\n</table>\n<a class=\"lien-programme\" href=\"../programme/\">Lien vers le programme complet</a></details>\n<div class=\"intro quarto-layout-panel\">\n<div class=\"quarto-layout-row quarto-layout-valign-top\">\n<div class=\"quarto-layout-cell\" style=\"flex-basis: 50.0%;justify-content: center;\">\n<p>Maintenant que nous disposons de tableaux pour stocker de grandes quantités de données, il faut qu’on apprenne à les classer. Il existe de nombreux algorithmes de tri plus ou moins efficaces, qui sont pour la plupart répertoriées dans <em>The Art of Computer Programming, Volume 3, Sorting and Searching.</em> de Knuth, Donald. E. [1998]. Le livre de chevet de tout programmeur.</p>\n</div>\n<div class=\"quarto-layout-cell\" style=\"flex-basis: 50.0%;justify-content: center;\">\n<p><wc-wikimage title=\"Sorting_insertion_sort_anim.gif\" caption=\"Animation de l'algorithme de tri par insertion\"></wc-wikimage></p>\n</div>\n</div>\n</div>\n<h2 id=\"problématique\" class=\"anchored\">Problématique</h2>\n<blockquote class=\"blockquote\">\n<p>Comment ranger des données afin de faciliter leur accès futur ? C’est par exemple l’ordre alphabétique du dictionnaire, où les mots sont rangés dans un ordre logique qui permet de ne pas devoir parcourir tout l’ouvrage pour retrouver une définition. Ce peut être aussi l’ordre intuitif dans lequel un joueur de cartes va ranger son jeu afin de limiter le temps de recherche pendant le déroulement de la partie. Cette problématique permet d’introduire la notion de tri (avec plusieurs sens distincts : séparer, ordonner, choisir), puis d’étudier différents algorithmes de tri. Le tri permet essentiellement d’accélérer les recherches, grâce à l’algorithme de recherche dichotomique.</p>\n</blockquote>\n<p><a href=\"http://cache.media.eduscol.education.fr/file/ISN_Tle_S/29/6/lyceeGT_ressource_ISN_20_06_Tle_S_14_Vous_avez_dit_trier_1_algorithmes_218296.pdf\">Source eduscol</a></p>\n<h3 id=\"situation-daccroche\" class=\"anchored\">Situation d’accroche</h3>\n<p>Un joueur de cartes reçoit 9 cartes lors de la donne en début de partie ; il les trie ensuite pour faciliter la lecture de son jeu.</p>\n<ul>\n<li>Comment procède-t-il exactement pour réaliser cette opération ?</li>\n<li>Y a-t-il plusieurs façons de procéder :</li>\n</ul>\n<p>Vous rendre sur <a href=\"https://apps.lyceum.fr/order-cards-game/\">cette page</a> sur laquelle vous est proposé un jeu de cartes à trier:</p>\n<iframe src=\"https://apps.lyceum.fr/order-cards-game/\" width=\"960\" height=\"480\">\n</iframe>\n<p>Réalisez les consignes suivantes dans l’ordre.</p>\n<ol type=\"1\">\n<li><strong>Consigne n° 1:</strong> « triez les cartes » en notant le nombre d’opérations nécessaires au tri, recommencer l’opération pour voir si le nombre de tours d’algorithmes varie, et de quoi peut dépendre ce nombre. Ensuite seulement,</li>\n<li><strong>Consigne n° 2:</strong> « décrivez par écrit la façon précise dont vous vous y êtes pris pour effectuer le tri ».</li>\n<li><strong>En plus:</strong> imaginez d’autres méthodes qui pourraient être plus efficaces pour effectuer le tri.</li>\n</ol>\n<h3 id=\"les-deux-types-de-tri-quadratiques\" class=\"anchored\">Les deux types de tri «quadratiques»</h3>\n<p>Nous allons cette année voir deux algorithmes de tri pas forcément très efficaces, mais relativement simples.</p>\n<p>Dans ces deux algorithmes, on va créer une sous-triée à gauche qui va grandir au fur et à mesure que l’algorithme «avance» jusqu’à ce que la liste soit entièrement triée.</p>\n<p>Ces deux algorithmes utilisent deux boucles imbriquées:</p>\n<ul>\n<li>La <strong>boucle externe</strong> est représentée par la flèche <em>rouge</em>.</li>\n<li>La <strong>boucle interne</strong> est représentée par la flèche <em>jaune</em>.</li>\n</ul>\n<p>Les animations ci-dessous sont issues du <a href=\"https://www.editions-bordas.fr/cahier-nsi-1re-collection-30.html\">Cahier NSI 1re aux éditions Bordas</a> et peuvent être consultées en plein écran en suivant ce lien:</p>\n<p>https://www.cahier-nsi.fr/#!/interfaces</p>\n<ul>\n<li><strong>Le tri par sélection</strong> consiste à créer une sous-liste triée à gauche en y ajoutant les éléments non triés de droite dans l’ordre croissant.</li>\n</ul>\n<iframe src=\"https://www.cahier-nsi.fr/tri_par_selection/\" width=\"960\" height=\"480\">\n</iframe>\n<p><a href=\"https://www.editions-bordas.fr/cahier-nsi-1re-collection-30.html\" class=\"cite-source\">Cahier NSI 1re aux éditions Bordas</a></p>\n<ul>\n<li><strong>le tri par insertion</strong> consiste à avancer dans la liste et placer la carte considérée à sa place dans la sous-liste triée de gauche.</li>\n</ul>\n<iframe src=\"https://www.cahier-nsi.fr/tri_par_insertion/\" width=\"960\" height=\"480\">\n</iframe>\n<p><a href=\"https://www.editions-bordas.fr/cahier-nsi-1re-collection-30.html\" class=\"cite-source\">Cahier NSI 1re aux éditions Bordas</a></p>\n<details class=\"plus\"><summary>Utilisation de la mémoire</summary>\n<p>On parle de tri en place (in-place en anglais) la liste est triée sans utiliser une autre liste pour stocker les résultats.</p>\n</details>\n<h3 id=\"créer-une-liste-de-données-aléatoire\" class=\"anchored\">Créer une liste de données aléatoire</h3>\n<p>Nous allons maintenant implémenter ces algorithmes en Python.</p>\n<p>On commence par créer une liste aléatoire d’entiers pour tester nos algorithmes de tri.</p>\n<div class=\"cell\" data-execution_count=\"1\">\n<div class=\"highlight\"><pre><span></span><span class=\"c1\"># Importer le module random pour créer des nombres au hasard</span>\n<span class=\"kn\">import</span> <span class=\"nn\">random</span>\n<span></span>\n<span class=\"k\">def</span> <span class=\"nf\">genere_liste_aleatoire</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">\"\"\"Génére une liste aléatoire de N éléments compris entre 0 et n\"\"\"</span>\n<span class=\"c1\">    # Créer une liste vide pour accueillir les nombres</span>\n<span class=\"n\">    data</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"c1\">    # ajoute les éléments aléatoires dans la liste</span>\n<span class=\"k\">    for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">):</span>\n<span class=\"n\">        data</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randrange</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">))</span>\n<span class=\"k\">    return</span> <span class=\"n\">data</span>\n<span></span>\n<span class=\"c1\"># Création d'une liste de 9 valeurs comprises entre 0 et 100</span>\n<span class=\"n\">liste_aléatoire</span> <span class=\"o\">=</span> <span class=\"n\">genere_liste_aleatoire</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">liste_aléatoire</span><span class=\"p\">)</span>\n</pre></div>\n<div class=\"cell-output cell-output-stdout\">\n<div class=\"highlight\"><pre><span></span>[45, 24, 25, 36, 34, 45, 80, 74, 75]\n</pre></div>\n</div>\n</div>\n<h2 id=\"le-tri-par-sélection\" class=\"anchored\">Le tri par sélection</h2>\n<h3 id=\"principe\" class=\"anchored\">Principe</h3>\n<blockquote class=\"blockquote\">\n<p>Sur un tableau de n éléments (numérotés de <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>\nà <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>\n), le principe du tri par sélection est le suivant :</p>\n<ul>\n<li>Rechercher le plus petit élément du tableau, et l’échanger avec l’élément d’indice 0 ;</li>\n<li>rechercher le second plus petit élément du tableau, et l’échanger avec l’élément d’indice 1 ;</li>\n<li>continuer de cette façon jusqu’à ce que le tableau soit entièrement trié. &nbsp; <a href=\"http://fr.wikipedia.org/wiki/Tri_par_s%C3%A9lection\">Source Wikipedia</a></li>\n</ul>\n</blockquote>\n<h3 id=\"illustration-graphique\" class=\"anchored\">Illustration graphique</h3>\n<p><wc-wikimage title=\"Selection-Sort-Animation.gif\" class=\"half\"></wc-wikimage></p>\n<h3 id=\"illustration-en-vidéo\" class=\"anchored\">Illustration en vidéo</h3>\n<p></p><div class=\"yt-embend\"><div><iframe width=\"560\" height=\"315\" src=\"https://invidious.projectsegfau.lt/embed/Ns4TPTC8whw\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe><p><a href=\"https://www.youtube.com/watch?v=Ns4TPTC8whw\">Vidéo</a> servie sans cookie via <a href=\"https://projectsegfau.lt/\">Project Segfault</a></p></div></div><p></p>\n<p><em>Select-sort with Gypsy folk dance. Created at Sapientia University, Tirgu Mures (Marosvásárhely), Romania. Directed by Kátai Zoltán and Tóth László. In cooperation with “Maros Művészegyüttes”, Tirgu Mures (Marosvásárhely), Romania.</em>{.cite-source}</p>\n<h3 id=\"implémentation-en-python\" class=\"anchored\">Implémentation en python</h3>\n<p>Voici un exemple de code implémentant cet algorithme de tri présentant l’état de la liste à chaque tour avancée dans le tableau. Vous pouvez voir que le tableau est bien classé en <strong>plaçant systématiquement l’élément minimum du tableau restant à trier à la fin des éléments triés</strong>.</p>\n<div class=\"cell\" data-execution_count=\"2\">\n<div class=\"highlight\"><pre><span></span><span class=\"c1\"># Création d'une liste de 5 valeurs comprises entre 0 et 100 à trier</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">genere_liste_aleatoire</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Liste initiale: \"</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n<span></span>\n<span class=\"k\">def</span> <span class=\"nf\">tri_par_selection</span><span class=\"p\">(</span><span class=\"n\">tab</span><span class=\"p\">):</span>\n<span class=\"c1\">    # Calculer la taille du tableau</span>\n<span class=\"n\">    N</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">tab</span><span class=\"p\">)</span>\n<span class=\"c1\">    # Parcourir le tableau jusqu'à l'avant dernière valeur</span>\n<span class=\"c1\">    # en effet la dernière valeur sera forcément la plus grande</span>\n<span class=\"k\">    for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">N</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n<span class=\"c1\">        # Stocker la valeur initiale de la case d'indice i, et son indice</span>\n<span class=\"n\">        minimum</span> <span class=\"o\">=</span> <span class=\"n\">tab</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n<span class=\"n\">        i_min</span> <span class=\"o\">=</span> <span class=\"n\">i</span>\n<span class=\"c1\">        #  Parcourir le reste du tableau pour rechercher l'élément le plus petit restant</span>\n<span class=\"k\">        for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">):</span>\n<span class=\"k\">            if</span> <span class=\"n\">tab</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">minimum</span><span class=\"p\">:</span>\n<span class=\"c1\">                # Stocker la valeur du minimum et son indice</span>\n<span class=\"n\">                minimum</span> <span class=\"o\">=</span> <span class=\"n\">tab</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span>\n<span class=\"n\">                i_min</span> <span class=\"o\">=</span> <span class=\"n\">j</span>\n<span class=\"c1\">        # Intervertir la valeur initiale de la case d'indice i et le minimum trouvé</span>\n<span class=\"n\">        tab</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">tab</span><span class=\"p\">[</span><span class=\"n\">i_min</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">minimum</span><span class=\"p\">,</span> <span class=\"n\">tab</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n<span class=\"c1\">        \n        # Affiche les états intermédiaires de la liste</span>\n<span class=\"nb\">        print</span><span class=\"p\">(</span><span class=\"s2\">\"Etat à la fin du tour\"</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"s2\">\":\"</span> <span class=\"p\">,</span> <span class=\"n\">tab</span><span class=\"p\">)</span>\n<span></span>\n<span class=\"n\">tri_par_selection</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Liste finale: \"</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n</pre></div>\n<div class=\"cell-output cell-output-stdout\">\n<div class=\"highlight\"><pre><span></span>Liste initiale:  [36, 48, 74, 96, 41]\nEtat à la fin du tour 0 : [36, 48, 74, 96, 41]\nEtat à la fin du tour 1 : [36, 41, 74, 96, 48]\nEtat à la fin du tour 2 : [36, 41, 48, 96, 74]\nEtat à la fin du tour 3 : [36, 41, 48, 74, 96]\nListe finale:  [36, 41, 48, 74, 96]\n</pre></div>\n</div>\n</div>\n<h3 id=\"aspects-théoriques\" class=\"anchored\">Aspects théoriques</h3>\n<p>Cet algorithme réalise deux boucles imbriquées il a une <em>complexité quadratique</em> dans le pire des cas <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>\n.</p>\n<p>L’<em>invariant de boucle</em> garantit qu’au début de chaque tour <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>\nde boucle externe, les <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>\npremières valeurs du tableau sont les plus petites et sont triées.</p>\n<h2 id=\"le-tri-par-insertion\" class=\"anchored\">Le tri par insertion</h2>\n<h3 id=\"principe-1\" class=\"anchored\">Principe</h3>\n<blockquote class=\"blockquote\">\n<p>Dans l’algorithme, on parcourt le tableau à trier du début à la fin. Au moment où on considère le i-ème élément, les éléments qui le précèdent sont déjà triés. Pour faire l’analogie avec l’exemple du jeu de cartes, lorsqu’on est à la i-ème étape du parcours, le i-ème élément est la carte saisie, les éléments précédents sont la main triée et les éléments suivants correspondent aux cartes encore mélangées sur la table.</p>\n</blockquote>\n<blockquote class=\"blockquote\">\n<p>L’objectif d’une étape est d’insérer le i-ème élément à sa place parmi ceux qui précèdent. En pratique, on fait « remonter » l’élément au fur et à mesure jusqu’à rencontrer un élément plus petit.</p>\n</blockquote>\n<p><a href=\"http://fr.wikipedia.org/wiki/Tri_par_insertion\">Source Wikipedia</a></p>\n<h3 id=\"illustration-graphique-1\" class=\"anchored\">Illustration graphique</h3>\n<p><wc-wikimage title=\"Insertion-sort-example-300px.gif\" caption=\"Animation du tri par insertion\"></wc-wikimage></p>\n<h3 id=\"illustration-en-vidéo-1\" class=\"anchored\">Illustration en vidéo</h3>\n<p></p><div class=\"yt-embend\"><div><iframe width=\"560\" height=\"315\" src=\"https://invidious.projectsegfau.lt/embed/ROalU379l3U\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe><p><a href=\"https://www.youtube.com/watch?v=ROalU379l3U\">Vidéo</a> servie sans cookie via <a href=\"https://projectsegfau.lt/\">Project Segfault</a></p></div></div><p></p>\n<p><em>Insert-sort with Romanian folk dance. Created at Sapientia University, Tirgu Mures (Marosvásárhely), Romania. Directed by Kátai Zoltán and Tóth László. In cooperation with “Maros Művészegyüttes”, Tirgu Mures (Marosvásárhely), Romania.</em>{.cite-source}</p>\n<h3 id=\"implémentation-en-python-1\" class=\"anchored\">Implémentation en python</h3>\n<p>Voici un exemple d’implémentation ou le tableau est parcouru de la gauche vers la droite, observer bien ou est placée la valeur à insérer à chaque tour de la boucle.</p>\n<div class=\"cell\" data-execution_count=\"3\">\n<div class=\"highlight\"><pre><span></span><span class=\"c1\"># Création d'une liste de 5 valeurs comprises entre 0 et 20 à trier</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">genere_liste_aleatoire</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Liste initiale: \"</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n<span></span>\n<span class=\"k\">def</span> <span class=\"nf\">tri_insertion</span><span class=\"p\">(</span><span class=\"n\">tab</span><span class=\"p\">):</span>\n<span class=\"c1\">    # Calculer la taille du tableau</span>\n<span class=\"n\">    N</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">tab</span><span class=\"p\">)</span>\n<span class=\"c1\">    # Parcourir l'ensemble de la liste à partir de la deuxième case</span>\n<span class=\"c1\">    # en effet un tableau de 1 case est forcément trié</span>\n<span class=\"k\">    for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">):</span>\n<span class=\"c1\">        # Stocker la valeur à \"insérer\"</span>\n<span class=\"n\">        val</span> <span class=\"o\">=</span> <span class=\"n\">tab</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n<span class=\"nb\">        print</span><span class=\"p\">(</span><span class=\"s2\">\"Valeur à insérer:\"</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">)</span>\n<span class=\"c1\">        # Parcourir le tableau déjà trié de dimension i-1 vers la gauche</span>\n<span class=\"c1\">        # jusqu'à rencontrer une valeur inférieure à notre valeur à insérer</span>\n<span class=\"n\">        j</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n<span class=\"k\">        while</span> <span class=\"n\">tab</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">val</span> <span class=\"ow\">and</span> <span class=\"n\">j</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n<span class=\"c1\">            # Intervertir  les valeurs aux indices j et j+1</span>\n<span class=\"n\">            tab</span><span class=\"p\">[</span><span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">tab</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">tab</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"n\">tab</span><span class=\"p\">[</span><span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"c1\">            # Diminuer j de 1 pour la prochaine comparaison</span>\n<span class=\"n\">            j</span> <span class=\"o\">=</span> <span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n<span class=\"c1\">        # Affiche les états intermédiaires de la liste</span>\n<span class=\"nb\">        print</span><span class=\"p\">(</span><span class=\"s2\">\"Etat à la fin du tour\"</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"s2\">\":\"</span> <span class=\"p\">,</span> <span class=\"n\">tab</span><span class=\"p\">)</span>\n<span></span>\n<span class=\"n\">tri_insertion</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Liste finale:\"</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n</pre></div>\n<div class=\"cell-output cell-output-stdout\">\n<div class=\"highlight\"><pre><span></span>Liste initiale:  [29, 37, 95, 6, 66]\nValeur à insérer: 37\nEtat à la fin du tour 1 : [29, 37, 95, 6, 66]\nValeur à insérer: 95\nEtat à la fin du tour 2 : [29, 37, 95, 6, 66]\nValeur à insérer: 6\nEtat à la fin du tour 3 : [6, 29, 37, 95, 66]\nValeur à insérer: 66\nEtat à la fin du tour 4 : [6, 29, 37, 66, 95]\nListe finale: [6, 29, 37, 66, 95]\n</pre></div>\n</div>\n</div>\n<h3 id=\"aspects-théoriques-1\" class=\"anchored\">Aspects théoriques</h3>\n<p>Cet algorithme réalise deux boucles imbriquées il a une <em>complexité quadratique</em> dans le pire des cas <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>\n.</p>\n<p>L’<em>invariant de boucle</em> garantit qu’au début de chaque tour <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>\nde boucle externe, les <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">i+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7429em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>\npremières valeurs du tableau sont triées.</p>\n<h2 id=\"autres-algorithmes\" class=\"anchored\">Autres algorithmes</h2>\n<p>Ces deux algorithmes ne sont que des exemples d’algorithmes de tri, et il en existe bien d’autres plus efficace comme le fameux <em>quicksort</em>, ou le <em>timsort</em> utilisé comme algorithme par défaut en Python.</p>\n<p>La littérature ne manque pas sur ce sujet, car il s’agit d’une introduction de choix à de nombreux concepts clés de l’algorithmique:</p>\n<ul>\n<li><strong>la complexité</strong>: l’étude du temps et de la mémoire nécessité par l’algorithme.</li>\n<li><strong>les cas extrêmes</strong> ou <em>edge cases</em>: que se passe-t-il dans le cas ou la liste est déjà triée, ou au contraire si elle est en ordre inversé.</li>\n<li><strong>la correction de l’algorithme</strong>: comment prouver que l’algorithme donne le bon résultat en toute occasion par une <em>méthode de récurrence</em> mathématique.</li>\n</ul>\n<p>Vous pouvez consulter cet article du site <a href=\"https://interstices.info/jcms/c_6973/les-algorithmes-de-tri\">interstices.info</a> pour en savoir plus.</p>","tableOfContents":"","frontmatter":{"tags":["tri par sélection","tri par insertion"],"tocHTML":"<ul><li><a href=\"#problématique\" data-localhref=\"true\">Problématique</a></li><ul><li><a href=\"#situation-daccroche\" data-localhref=\"true\">Situation d’accroche</a></li><li><a href=\"#les-deux-types-de-tri-quadratiques\" data-localhref=\"true\">Les deux types de tri «quadratiques»</a></li><li><a href=\"#créer-une-liste-de-données-aléatoire\" data-localhref=\"true\">Créer une liste de données aléatoire</a></li></ul><li><a href=\"#le-tri-par-sélection\" data-localhref=\"true\">Le tri par sélection</a></li><ul><li><a href=\"#principe\" data-localhref=\"true\">Principe</a></li><li><a href=\"#illustration-graphique\" data-localhref=\"true\">Illustration graphique</a></li><li><a href=\"#illustration-en-vidéo\" data-localhref=\"true\">Illustration en vidéo</a></li><li><a href=\"#implémentation-en-python\" data-localhref=\"true\">Implémentation en python</a></li><li><a href=\"#aspects-théoriques\" data-localhref=\"true\">Aspects théoriques</a></li></ul><li><a href=\"#le-tri-par-insertion\" data-localhref=\"true\">Le tri par insertion</a></li><ul><li><a href=\"#principe-1\" data-localhref=\"true\">Principe</a></li><li><a href=\"#illustration-graphique-1\" data-localhref=\"true\">Illustration graphique</a></li><li><a href=\"#illustration-en-vidéo-1\" data-localhref=\"true\">Illustration en vidéo</a></li><li><a href=\"#implémentation-en-python-1\" data-localhref=\"true\">Implémentation en python</a></li><li><a href=\"#aspects-théoriques-1\" data-localhref=\"true\">Aspects théoriques</a></li></ul><li><a href=\"#autres-algorithmes\" data-localhref=\"true\">Autres algorithmes</a></li></ul>"},"fields":{"classe":"1g","chapter":"Algorithmes de tri","matter":"nsi","nChapter":"3","part":"Algorithmique","nPart":"8"}}},"pageContext":{"slug":"1g/nsi/8-algorithmique/3-algorithmes-de-tri","chapter":"Algorithmes de tri"}},"staticQueryHashes":["604483588"],"slicesMap":{}}