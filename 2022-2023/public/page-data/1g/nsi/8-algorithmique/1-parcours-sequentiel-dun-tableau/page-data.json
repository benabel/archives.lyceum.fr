{"componentChunkName":"component---src-templates-cours-md-js","path":"/1g/nsi/8-algorithmique/1-parcours-sequentiel-dun-tableau/","result":{"data":{"markdownRemark":{"html":"<details class=\"programme\"><summary>Programme Officiel</summary>\n<table class=\"table table-bordered table-hover\">\n<thead class=\"table-warning\">\n<tr class=\"header\">\n<th>Contenus</th>\n<th>Capacités attendues</th>\n<th>Commentaires</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>Parcours séquentiel d’un tableau</td>\n<td>Écrire un algorithme de recherche d’un extremum, de calcul d’une moyenne.</td>\n<td>On montre que le coût est linéaire</td>\n</tr>\n</tbody>\n</table>\n<a class=\"lien-programme\" href=\"../programme/\">Lien vers le programme complet</a></details>\n<div class=\"intro quarto-layout-panel\">\n<div class=\"quarto-layout-row quarto-layout-valign-top\">\n<div class=\"g quarto-layout-cell\" style=\"flex-basis: 50.0%;justify-content: center;\">\n<p>Dans ce chapitre, nous allons étudier des algorithmes de parcours séquentiel d’un tableau pour:</p>\n<ol type=\"1\">\n<li>Rechercher un élément d’un type donné.</li>\n<li>Rechercher le maximum d’un tableau.</li>\n<li>Calculer la moyenne d’un tableau.</li>\n</ol>\n<p>Ces algorithmes «séquentiels» ne sont pas du tout efficace, on les appelle en anglais <em>Brute force algorithms</em>.</p>\n</div>\n<div class=\"quarto-layout-cell\" style=\"flex-basis: 50.0%;justify-content: center;\">\n<p><wc-wikimage title=\"Sudoku_solved_by_bactracking.gif\" caption=\"Exemple de résolution d'un sudoku par force brute. Toutes les solutions sont explorées jusqu'à trouver la bonne.\"></wc-wikimage></p>\n</div>\n</div>\n</div>\n<h2 id=\"méthodes-de-parcours-séquentiel-dun-tableau\" class=\"anchored\">Méthodes de parcours séquentiel d’un tableau</h2>\n<p>Comme vu dans le chapitre P3C2, on peut itérer sur les valeurs ou sur les index.</p>\n<h3 id=\"itération-sur-les-valeurs\" class=\"anchored\">Itération sur les valeurs</h3>\n<p>On fait une itération sur les valeurs du tableau en utilisant le mot-clé <code>in</code>.</p>\n<div class=\"cell\" data-execution_count=\"1\">\n<div class=\"highlight\"><pre><span></span><span class=\"n\">tab</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span>\n<span class=\"k\">for</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"n\">tab</span><span class=\"p\">:</span>\n<span class=\"nb\">    print</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">)</span>\n</pre></div>\n<div class=\"cell-output cell-output-stdout\">\n<div class=\"highlight\"><pre><span></span>12\n-3\n15\n-9\n17\n7\n</pre></div>\n</div>\n</div>\n<h3 id=\"itération-sur-les-index\" class=\"anchored\">Itération sur les index</h3>\n<p>C’est la méthode classique utilisée dans les langages impératifs.</p>\n<div class=\"cell\" data-execution_count=\"2\">\n<div class=\"highlight\"><pre><span></span><span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">tab</span><span class=\"p\">)):</span>\n<span class=\"n\">    val</span> <span class=\"o\">=</span> <span class=\"n\">tab</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n<span class=\"nb\">    print</span><span class=\"p\">(</span><span class=\"s2\">\"indice:\"</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"s2\">\"valeur:\"</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">)</span>\n</pre></div>\n<div class=\"cell-output cell-output-stdout\">\n<div class=\"highlight\"><pre><span></span>indice: 0 valeur: 12\nindice: 1 valeur: -3\nindice: 2 valeur: 15\nindice: 3 valeur: -9\nindice: 4 valeur: 17\nindice: 5 valeur: 7\n</pre></div>\n</div>\n</div>\n<h2 id=\"recherche-dun-extrémum\" class=\"anchored\">Recherche d’un extrémum</h2>\n<p>On initialise la valeur au premier élément du tableau puis on parcourt le tableau pour vérifier s’il existe un élément soit plus petit soit plus grand.</p>\n<h3 id=\"recherche-du-maximum\" class=\"anchored\">Recherche du maximum</h3>\n<div class=\"cell\" data-execution_count=\"3\">\n<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">maximum</span><span class=\"p\">(</span><span class=\"n\">liste</span><span class=\"p\">):</span>\n<span class=\"c1\">    # ne pas utiliser max pour le nom de variable</span>\n<span class=\"c1\">    # car la fonction max existe en Python(on l'écraserait!)</span>\n<span class=\"n\">    maxi</span> <span class=\"o\">=</span> <span class=\"n\">liste</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"k\">    for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">liste</span><span class=\"p\">:</span>\n<span class=\"k\">        if</span> <span class=\"n\">e</span> <span class=\"o\">&gt;</span> <span class=\"n\">maxi</span><span class=\"p\">:</span>\n<span class=\"n\">            maxi</span> <span class=\"o\">=</span> <span class=\"n\">e</span>\n<span class=\"k\">    return</span> <span class=\"n\">maxi</span>\n<span></span>\n<span class=\"c1\"># appel de la fonction sur tab</span>\n<span class=\"n\">maximum</span><span class=\"p\">(</span><span class=\"n\">tab</span><span class=\"p\">)</span>\n</pre></div>\n<div class=\"cell-output cell-output-display\" data-execution_count=\"3\">\n<div class=\"highlight\"><pre><span></span>17\n</pre></div>\n</div>\n</div>\n<h3 id=\"recherche-du-minimum\" class=\"anchored\">Recherche du minimum</h3>\n<div class=\"cell\" data-execution_count=\"4\">\n<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">minimum</span><span class=\"p\">(</span><span class=\"n\">liste</span><span class=\"p\">):</span>\n<span class=\"n\">    mini</span> <span class=\"o\">=</span> <span class=\"n\">liste</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"k\">    for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">liste</span><span class=\"p\">:</span>\n<span class=\"k\">        if</span> <span class=\"n\">e</span> <span class=\"o\">&lt;</span> <span class=\"n\">mini</span><span class=\"p\">:</span>\n<span class=\"n\">            mini</span> <span class=\"o\">=</span> <span class=\"n\">e</span>\n<span class=\"k\">    return</span> <span class=\"n\">mini</span>\n<span></span>\n<span class=\"c1\"># appel de la fonction avec la liste tab en argument</span>\n<span class=\"n\">minimum</span><span class=\"p\">(</span><span class=\"n\">tab</span><span class=\"p\">)</span>\n</pre></div>\n<div class=\"cell-output cell-output-display\" data-execution_count=\"4\">\n<div class=\"highlight\"><pre><span></span>-9\n</pre></div>\n</div>\n</div>\n<h2 id=\"calculer-la-moyenne-dun-tableau\" class=\"anchored\">Calculer la moyenne d’un tableau</h2>\n<p>On initialise une valeur accumulatrice à 0, puis on additionne tous les éléments du tableau. Enfin on divise la somme des éléments par le nombre d’éléments du tableau.</p>\n<div class=\"cell\" data-execution_count=\"5\">\n<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">moyenne</span><span class=\"p\">(</span><span class=\"n\">liste</span><span class=\"p\">):</span>\n<span class=\"n\">    somme</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"k\">    for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">liste</span><span class=\"p\">:</span>\n<span class=\"n\">        somme</span> <span class=\"o\">=</span> <span class=\"n\">somme</span> <span class=\"o\">+</span> <span class=\"n\">e</span>\n<span class=\"c1\">    # On divise la somme de tpus les éléments par leur nombre</span>\n<span class=\"n\">    moyenne</span> <span class=\"o\">=</span> <span class=\"n\">somme</span> <span class=\"o\">/</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">liste</span><span class=\"p\">)</span>\n<span class=\"k\">    return</span> <span class=\"n\">moyenne</span>\n<span></span>\n<span class=\"c1\"># appel de la fonction</span>\n<span class=\"n\">moyenne</span><span class=\"p\">(</span><span class=\"n\">tab</span><span class=\"p\">)</span>\n</pre></div>\n<div class=\"cell-output cell-output-display\" data-execution_count=\"5\">\n<div class=\"highlight\"><pre><span></span>6.5\n</pre></div>\n</div>\n</div>\n<h2 id=\"coût-de-lalgorithme-notion-de-complexité\" class=\"anchored\">Coût de l’algorithme: notion de complexité</h2>\n<p>Pour mesurer l’efficacité <em>temporelle</em> d’un algorithme, on introduit la notion de complexité.</p>\n<dl>\n<dt>\nComplexité\n</dt>\n<dd>\n<div>\n<p>La complexité d’un algorithme est le nombre d’opérations élémentaires(opération arithmétique, comparaison, affectation…) effectuées pour obtenir un résultat.</p>\n</div>\n</dd>\n</dl>\n<div class=\"prop\">\n<p>La complexité d’un algorithme dépend souvent de la taille des données d’entrée notée <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span>\n. Dans notre cas la taille du tableau dans lequel on recherche l’élément.</p>\n</div>\n<p>Pour comparer facilement les algorithmes on se place dans le pire des cas, dans les algorithmes présentés il faut <em>toujours</em> parcourir entièrement la liste pour trouver le maximum, le minimum ou la moyenne: il y a donc <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span>\nitérations.</p>\n<p>On dit que le coût de l’algorithme est <em>linéaire</em> ou encore que c’est un algorithme de complexité <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span>\n.</p>","tableOfContents":"","frontmatter":{"tags":["Python","algorithmique","algorithme de force brute"],"tocHTML":"<ul><li><a href=\"#méthodes-de-parcours-séquentiel-dun-tableau\" data-localhref=\"true\">Méthodes de parcours séquentiel d’un tableau</a></li><ul><li><a href=\"#itération-sur-les-valeurs\" data-localhref=\"true\">Itération sur les valeurs</a></li><li><a href=\"#itération-sur-les-index\" data-localhref=\"true\">Itération sur les index</a></li></ul><li><a href=\"#recherche-dun-extrémum\" data-localhref=\"true\">Recherche d’un extrémum</a></li><ul><li><a href=\"#recherche-du-maximum\" data-localhref=\"true\">Recherche du maximum</a></li><li><a href=\"#recherche-du-minimum\" data-localhref=\"true\">Recherche du minimum</a></li></ul><li><a href=\"#calculer-la-moyenne-dun-tableau\" data-localhref=\"true\">Calculer la moyenne d’un tableau</a></li><li><a href=\"#coût-de-lalgorithme-notion-de-complexité\" data-localhref=\"true\">Coût de l’algorithme: notion de complexité</a></li></ul>"},"fields":{"classe":"1g","chapter":"Parcours séquentiel d’un tableau","matter":"nsi","nChapter":"1","part":"Algorithmique","nPart":"8"}}},"pageContext":{"slug":"1g/nsi/8-algorithmique/1-parcours-sequentiel-dun-tableau","chapter":"Parcours séquentiel d’un tableau"}},"staticQueryHashes":["604483588"],"slicesMap":{}}