{"componentChunkName":"component---src-templates-cours-md-js","path":"/1g/nsi/8-algorithmique/2-algorithmes-de-recherche/","result":{"data":{"markdownRemark":{"html":"<details class=\"programme\"><summary>Programme Officiel</summary>\n<table class=\"table table-bordered table-hover\">\n<thead class=\"table-warning\">\n<tr class=\"header\">\n<th>Contenus</th>\n<th>Capacités attendues</th>\n<th>Commentaires</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>Parcours séquentiel d’un tableau</td>\n<td>Écrire un algorithme de recherche d’une occurence sur des valeurs de type quelconque</td>\n<td>On montre que le coût est linéaire</td>\n</tr>\n<tr class=\"even\">\n<td>Recherche dichotomique dans un tableau trié</td>\n<td>Montrer la terminaison de la recherche dichotomique à l’aide d’un variant de boucle.</td>\n<td><p>Des assertions peuvent être utilisées.</p>\n<p>La preuve de la correction peut être présentée par le professeur.</p></td>\n</tr>\n</tbody>\n</table>\n<a class=\"lien-programme\" href=\"../programme/\">Lien vers le programme complet</a></details>\n<div class=\"intro quarto-layout-panel\">\n<div class=\"quarto-layout-row quarto-layout-valign-top\">\n<div class=\"quarto-layout-cell\" style=\"flex-basis: 50.0%;justify-content: center;\">\n<p>Dans ce chapitre, nous allons étudier un algorithme très efficace de recherche d’élément dans un tableau: la recherche dichotomique. Il illustre une méthode algorithmique très efficace et utile appelée: «Diviser pour régner».</p>\n</div>\n<div class=\"quarto-layout-cell\" style=\"flex-basis: 50.0%;justify-content: center;\">\n<p><wc-wikimage title=\"Binary_Search_Depiction.svg\" caption=\"Dichotomie vient du grec ancien διχοτομία, dikhotomia (« division en deux parties »),\"></wc-wikimage></p>\n</div>\n</div>\n</div>\n<p>Commençons par créer une liste d’éléments pour cela nous allons écrire une fonction pour créer facilement des listes de mots.</p>\n<div class=\"cell\" data-execution_count=\"1\">\n<div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">product</span>\n<span class=\"kn\">from</span> <span class=\"nn\">string</span> <span class=\"kn\">import</span> <span class=\"n\">ascii_uppercase</span> <span class=\"k\">as</span> <span class=\"n\">alphabet</span>\n<span></span>\n<span class=\"k\">def</span> <span class=\"nf\">lister_mots</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">\"\"\"Renvoie une liste ordonnés de mots ayant l lettres\"\"\"</span>\n<span class=\"k\">    return</span> <span class=\"p\">[</span><span class=\"s1\">''</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">lettres</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">lettres</span> <span class=\"ow\">in</span> <span class=\"n\">product</span><span class=\"p\">(</span><span class=\"n\">alphabet</span><span class=\"p\">,</span> <span class=\"n\">repeat</span><span class=\"o\">=</span><span class=\"n\">l</span><span class=\"p\">)]</span>\n<span></span>\n<span class=\"n\">mots5</span> <span class=\"o\">=</span>  <span class=\"n\">lister_mots</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"c1\"># le nombre de noms générés est exponentiel par rapport à sa longueur</span>\n<span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">mots5</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">26</span><span class=\"o\">**</span><span class=\"mi\">5</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">mots5</span><span class=\"p\">),</span> <span class=\"s2\">\"mots\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Voici les sept premiers\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mots5</span><span class=\"p\">[:</span><span class=\"mi\">7</span><span class=\"p\">])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Et les sept derniers\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mots5</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">7</span><span class=\"p\">:])</span>\n</pre></div>\n<div class=\"cell-output cell-output-stdout\">\n<div class=\"highlight\"><pre><span></span>11881376 mots\nVoici les sept premiers\n['AAAAA', 'AAAAB', 'AAAAC', 'AAAAD', 'AAAAE', 'AAAAF', 'AAAAG']\nEt les sept derniers\n['ZZZZT', 'ZZZZU', 'ZZZZV', 'ZZZZW', 'ZZZZX', 'ZZZZY', 'ZZZZZ']\n</pre></div>\n</div>\n</div>\n<h2 id=\"algorithme-de-recherche-dans-un-tableau-non-trié\" class=\"anchored\">Algorithme de recherche dans un tableau non trié</h2>\n<p>Nous allons voir comment chercher une valeur dans un tableau par une méthode de parcours du tableau: <em>la recherche en table</em>.</p>\n<p>Cet algorithme naïf est couteux, mais on <em>ne peut pas faire mieux si les données ne sont pas triées</em>.</p>\n<p>On parcourt l’ensemble du tableau et on s’arrête lorsqu’on trouve l’élément.</p>\n<p>Dans une fonction <strong>le <code>return</code> est définitif</strong>, on peut donc facilement arrêter la boucle dès que la valeur est trouvée. Si on est arrivé au bout de la boucle on est donc certains que l’élément cherché n’est pas présent.</p>\n<div class=\"cell\" data-execution_count=\"2\">\n<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">recherche</span><span class=\"p\">(</span><span class=\"n\">élément</span><span class=\"p\">,</span> <span class=\"n\">liste</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">\"\"\"Fonction de recherche de l'élément dans la liste</span>\n<span></span>\n<span class=\"sd\">    Arguments</span>\n<span class=\"sd\">    ---------</span>\n<span class=\"sd\">    élement: str</span>\n<span class=\"sd\">        l'élément cherché</span>\n<span class=\"sd\">    l: liste</span>\n<span class=\"sd\">        la liste dans laquelle on cherche</span>\n<span class=\"sd\">    Retourne</span>\n<span class=\"sd\">    --------</span>\n<span class=\"sd\">    bool</span>\n<span class=\"sd\">        True si l'élément est trouvé et False sinon</span>\n<span class=\"sd\">    \"\"\"</span>\n<span class=\"k\">    for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">liste</span><span class=\"p\">:</span>\n<span class=\"k\">        if</span> <span class=\"n\">e</span> <span class=\"o\">==</span> <span class=\"n\">élément</span><span class=\"p\">:</span>\n<span class=\"k\">            return</span> <span class=\"kc\">True</span>\n<span class=\"k\">    return</span> <span class=\"kc\">False</span>\n</pre></div>\n</div>\n<p>Appelons la fonction sur un mot présent dans le tableau.</p>\n<div class=\"cell\" data-execution_count=\"4\">\n<div class=\"highlight\"><pre><span></span><span class=\"n\">recherche</span><span class=\"p\">(</span><span class=\"s2\">\"EULER\"</span><span class=\"p\">,</span> <span class=\"n\">mots5</span><span class=\"p\">)</span>\n</pre></div>\n<div class=\"cell-output cell-output-stdout\">\n<div class=\"highlight\"><pre><span></span>EULER trouvé en 2186982 tours de boucle.\n</pre></div>\n</div>\n<div class=\"cell-output cell-output-display\" data-execution_count=\"4\">\n<div class=\"highlight\"><pre><span></span>True\n</pre></div>\n</div>\n</div>\n<p>Regardons maintenant, si le mot n’est pas trouvé.</p>\n<div class=\"cell\" data-execution_count=\"5\">\n<div class=\"highlight\"><pre><span></span><span class=\"n\">recherche</span><span class=\"p\">(</span><span class=\"s2\">\"€UL€R\"</span><span class=\"p\">,</span> <span class=\"n\">mots5</span><span class=\"p\">)</span>\n</pre></div>\n<div class=\"cell-output cell-output-stdout\">\n<div class=\"highlight\"><pre><span></span>€UL€R non trouvé en 11881376 tours de boucle.\n</pre></div>\n</div>\n<div class=\"cell-output cell-output-display\" data-execution_count=\"5\">\n<div class=\"highlight\"><pre><span></span>False\n</pre></div>\n</div>\n</div>\n<h2 id=\"la-recherche-dichotomique\" class=\"anchored\">La recherche dichotomique</h2>\n<p>Nous allons maintenant étudier l’algorithme de recherche par dichotomie. On peut comparer ça à une recherche dans un dictionnaire (<em>qui a eu la bonne idée d’être trié!</em>)</p>\n<h3 id=\"principe\" class=\"anchored\">Principe</h3>\n<blockquote class=\"blockquote\">\n<p>La recherche dichotomique ou recherche par dichotomie, est un algorithme de recherche pour trouver la position d’un élément dans un tableau trié. Le principe est le suivant : comparer l’élément avec la valeur de la case au milieu du tableau ; si les valeurs sont égales, la tâche est accomplie, sinon on recommence dans la moitié du tableau pertinente. <a href=\"https://fr.wikipedia.org/wiki/Recherche_dichotomique\">Source Wikipedia</a></p>\n</blockquote>\n<p><wc-wikimage title=\"Binary-search-work.gif\" caption=\"\"></wc-wikimage></p>\n<h3 id=\"définition-de-la-fonction-de-recherche\" class=\"anchored\">Définition de la fonction de recherche</h3>\n<div class=\"cell\" data-execution_count=\"6\">\n<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">recherche_dichotomique</span><span class=\"p\">(</span><span class=\"n\">élément</span><span class=\"p\">,</span> <span class=\"n\">liste</span><span class=\"p\">):</span>\n<span class=\"n\">    N</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">liste</span><span class=\"p\">)</span>\n<span class=\"c1\">    \n    # on initialise les indices début </span>\n<span class=\"c1\">    # et fin aux extrémités de la liste</span>\n<span class=\"n\">    début</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">    fin</span> <span class=\"o\">=</span> <span class=\"n\">N</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n<span class=\"k\">    \n    while</span> <span class=\"n\">début</span> <span class=\"o\">&lt;=</span> <span class=\"n\">fin</span> <span class=\"ow\">and</span> <span class=\"n\">fin</span> <span class=\"o\">&lt;</span> <span class=\"n\">N</span><span class=\"p\">:</span>\n<span class=\"c1\">        # On se place au milieu de la liste</span>\n<span class=\"n\">        milieu</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">début</span> <span class=\"o\">+</span> <span class=\"n\">fin</span><span class=\"p\">)</span> <span class=\"o\">//</span> <span class=\"mi\">2</span> <span class=\"c1\"># il, s'agit d'une division entière</span>\n<span class=\"c1\">        # trois cas possibles</span>\n<span class=\"k\">        \n        if</span> <span class=\"n\">liste</span><span class=\"p\">[</span><span class=\"n\">milieu</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">élément</span><span class=\"p\">:</span>       \n<span class=\"n\">            début</span> <span class=\"o\">=</span> <span class=\"n\">milieu</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n<span class=\"k\">        elif</span> <span class=\"n\">liste</span><span class=\"p\">[</span><span class=\"n\">milieu</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">élément</span><span class=\"p\">:</span> \n<span class=\"n\">            fin</span> <span class=\"o\">=</span> <span class=\"n\">milieu</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n<span class=\"k\">        else</span><span class=\"p\">:</span>\n<span class=\"k\">            return</span> <span class=\"kc\">True</span>\n<span class=\"k\">    return</span> <span class=\"kc\">False</span>\n</pre></div>\n</div>\n<h3 id=\"appels-de-la-fonction\" class=\"anchored\">Appels de la fonction</h3>\n<p>Recherchons le mot <code>EULER</code> de la liste.</p>\n<div class=\"cell\" data-execution_count=\"8\">\n<div class=\"highlight\"><pre><span></span><span class=\"n\">recherche_dichotomique</span><span class=\"p\">(</span><span class=\"s1\">'EULER'</span><span class=\"p\">,</span> <span class=\"n\">mots5</span><span class=\"p\">)</span>\n</pre></div>\n<div class=\"cell-output cell-output-stdout\">\n<div class=\"highlight\"><pre><span></span>EULER trouvé en 23 tours de boucle.\n</pre></div>\n</div>\n<div class=\"cell-output cell-output-display\" data-execution_count=\"8\">\n<div class=\"highlight\"><pre><span></span>True\n</pre></div>\n</div>\n</div>\n<p>Incroyable on a trouvé en 23 fois au lieu de 2186982 avec la recherche en table.</p>\n<div class=\"cell\" data-execution_count=\"9\">\n<div class=\"highlight\"><pre><span></span><span class=\"n\">recherche_dichotomique</span><span class=\"p\">(</span><span class=\"s1\">'€UL€R'</span><span class=\"p\">,</span> <span class=\"n\">mots5</span><span class=\"p\">)</span>\n</pre></div>\n<div class=\"cell-output cell-output-stdout\">\n<div class=\"highlight\"><pre><span></span>€UL€R non trouvé en 24 tours de boucle.\n</pre></div>\n</div>\n<div class=\"cell-output cell-output-display\" data-execution_count=\"9\">\n<div class=\"highlight\"><pre><span></span>False\n</pre></div>\n</div>\n</div>\n<p>24 tours au lieu de 11881376 dans le pire cas: <em>le mot est absent</em>.</p>\n<p>L’algorithme de recherche dichotomique est incroyablement plus efficace que l’algorithme de recherche en table.</p>\n<p>Il s’agit d’un logarithme ayant une complexité en <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">log_2 (n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>\n, c’est-à-dire le nombre de fois qu’il faut couper la liste en deux pour qu’elle ne contienne qu’un élément.</p>\n<p>Par exemple:</p>\n<ul>\n<li>si n= <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>8</mn></mrow><annotation encoding=\"application/x-tex\">8</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">8</span></span></span></span>\n: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mn>8</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">log_2(8) = 3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">8</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3</span></span></span></span>\n</li>\n<li>si n= <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>256</mn></mrow><annotation encoding=\"application/x-tex\">256</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">256</span></span></span></span>\n: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mn>256</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>8</mn></mrow><annotation encoding=\"application/x-tex\">log_2(256) = 8</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">256</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">8</span></span></span></span>\n</li>\n<li>si n= <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1024</mn></mrow><annotation encoding=\"application/x-tex\">1024</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1024</span></span></span></span>\n: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mn>1024</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>10</mn></mrow><annotation encoding=\"application/x-tex\">log_2 (1024) = 10</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">1024</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">10</span></span></span></span>\n</li>\n<li>si n= <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>11881376</mn></mrow><annotation encoding=\"application/x-tex\">11881376</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">11881376</span></span></span></span>\n: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mn>11881376</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>23</mn><mo separator=\"true\">,</mo><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">log_2 (11881376) = 23,5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">11881376</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span class=\"mord\">23</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">5</span></span></span></span>\n</li>\n</ul>\n<p><strong>Au lieu de 11881376 d’opérations, on en effectue 24 au maximum!</strong></p>\n<h2 id=\"complexité-temporelle\" class=\"anchored\">Complexité temporelle</h2>\n<p>Comme on l’a vu, si on utilise un tableau trié, la recherche dichotomique est beaucoup plus efficace que la recherche en table. Cela se traduit par un temps d’exécution infime en raison de sa <em>complexité logarithmique</em>.</p>\n<div class=\"quarto-layout-panel\">\n<div class=\"quarto-layout-row quarto-layout-valign-top\">\n<div class=\"rtbl quarto-layout-cell\" style=\"flex-basis: 50.0%;justify-content: center;\">\n<p><strong>Recherche en table: Complexité linéaire</strong></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\nO(N)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span></span>\n</p>\n<p><em>Benchmark</em></p>\n<div class=\"cell\" data-execution_count=\"10\">\n<div class=\"highlight\"><pre><span></span><span class=\"o\">%%</span><span class=\"n\">timeit</span> <span class=\"o\">-</span><span class=\"n\">n1</span> <span class=\"o\">-</span><span class=\"n\">r1</span>\n<span class=\"n\">recherche</span><span class=\"p\">(</span><span class=\"s1\">'€UL€R'</span><span class=\"p\">,</span> <span class=\"n\">mots5</span><span class=\"p\">)</span>\n</pre></div>\n<div class=\"cell-output cell-output-stdout\">\n<div class=\"highlight\"><pre><span></span>€UL€R non trouvé en 11881376 tours de boucle.\n318 ms ± 0 ns per loop (mean ± std. dev. of 1 run, 1 loop each)\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"dicho quarto-layout-cell\" style=\"flex-basis: 50.0%;justify-content: center;\">\n<p><strong>Recherche dichotomique: Complexité logarithmique</strong></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>log</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\nO(\\log(N))\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">))</span></span></span></span></span>\n</p>\n<p><em>Benchmark</em></p>\n<div class=\"cell\" data-execution_count=\"11\">\n<div class=\"highlight\"><pre><span></span><span class=\"o\">%%</span><span class=\"n\">timeit</span> <span class=\"o\">-</span><span class=\"n\">n1</span> <span class=\"o\">-</span><span class=\"n\">r1</span>\n<span class=\"n\">recherche_dichotomique</span><span class=\"p\">(</span><span class=\"s1\">'€UL€R'</span><span class=\"p\">,</span> <span class=\"n\">mots5</span><span class=\"p\">)</span>\n</pre></div>\n<div class=\"cell-output cell-output-stdout\">\n<div class=\"highlight\"><pre><span></span>€UL€R non trouvé en 24 tours de boucle.\n29.1 µs ± 0 ns per loop (mean ± std. dev. of 1 run, 1 loop each)\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<!-- \n## Aspects théoriques\n\nNous allons **démontrer la terminaison et la correction de l'algorithme de façon théorique**.\n\nNous avons vu qu'il était possible d'utiliser des jeu de tests pour vérifier qu'un programme fonctionne, cependant il n'est jamais possible de créer des tests pour toutes les situations connues.\n\nC'est pour cela qu'on utilise parfois des outils *plus abstarits* pour démontrer que nos algorithmes \"fonctionnent\" dans tous les cas.\n\n### Terminaison: est-ce que l'algorithme s'arrête?\n\nOn voit qu'à chaque tour de boucle, le nombre d'éléments à tester entre $i$ et $j$ est divisé par 2. \n\nAprès un nombre d'itérations fini, ce nombre d'éléments est inférieur ou égal à 1 et la boucle s'arrête. (Si N est le nombre d'éléments ce nombre d'itérations est $log_2(N)$\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\n# On prend 128 éléments = 2**8\ni = 0\nj = 127\ncompteur = 0\nwhile i < j:\n    j = (i + j) //2\n    compteur += 1\nprint(compteur) # 8 tours\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n7\n```\n:::\n:::\n\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\n# On prend 2048 éléments = 2**11\ni = 1\nj = 2048\ncompteur = 0\nwhile i < j:\n    j = (i + j) //2\n    compteur += 1\nprint(compteur) # 11 tours\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n11\n```\n:::\n:::\n\n\n### En plus: Correction: Est-ce que le résultat est juste?\n\nL'algorithme renvoie-t-il la bonne valeur?\n\n**La démonstration est délicate est non exigible.**\n\n\n[Informatique et sciences du numérique Spécialité ISN en terminale S - Avec des exercices corrigés\net des idées de projets par Gilles\nDowek](http://www.editions-eyrolles.com/Livre/9782212135435/){.cite-source}\n\n> Ensuite, pour démontrer que la réponse donnée par l’algorithme est correcte, on commence par\nmontrer que si la chaîne de caractères $s$ est dans la table, alors son indice appartient toujours\nà l’intervalle $[i, j]$. Cette propriété est un **invariant de la boucle**, c’est-à-dire une\npropriété qui reste vraie à chaque exécution du corps de la boucle.\n\n>  Ici, quand on réduit l’intervalle $[i, j]$ à l’intervalle $[i, k - 1]$ par exemple, c’est parce\nque l’on sait que la chaîne $s$ est avant la chaîne $nom[k]$ dans l’ordre alphabétique et donc que\nl’indice de la chaîne $s$, s’il existe, n’est pas dans l’intervalle $[k, j]$. La propriété reste donc\nvraie jusqu’à la fin de l’exécution de la boucle. Enfin, on montre que quand on sort de la boucle,\nl’intervalle $[i, j]$ est soit le singleton $[i, i]$, soit l’intervalle vide $[i , i-1]$. Dans les deux\ncas, $i$ est compris entre les valeurs minimale et maximale de départ.\n\n>  Pour cela, on montre un autre invariant de la boucle : si l’intervalle $[i, j]$ n’est pas vide,\nalors ses bornes $i$ et $j$ sont comprises entre les valeurs minimale et maximale de départ, et s’il\nest vide, alors sa borne inférieure $i$ est comprise entre les valeurs minimale et maximale de\ndépart.\n\n> - Si l’intervalle $[i, j]$ contient au moins trois points, c’est-à-dire si $i + 2 \\le j$, il\n  n’est pas difficile de montrer que les nombres $k - 1$ et $k + 1$, où $k = (i + j) // 2$, sont\n  tous les deux compris entre $i$ et $j$ au sens large. Le nouvel intervalle $[k, k]$, $[i, k - 1]$\n  ou $[k + 1, j]$ est contenu dans $[i, j]$ et donc ses bornes sont comprises entre les valeurs\n  minimale et maximale de départ.\n> - Si l’intervalle $[i, j]$ contient deux points, c’est-à-dire si $j = i + 1$, alors $k = (i + j) // 2$\n   est égal à $i$. Le nombre $k + 1$ est égal à $j$ : il est compris entre $i$ et $j$ au sens large. En revanche, le nombre $k - 1$ est égal à $i - 1$.\n  Dans ce cas, le nouvel intervalle est $[i, i]$ ou $[ j, j]$ dont les bornes sont comprises entre les valeurs minimale et\n  maximale de départ, ou l’intervalle vide $[i, i - 1]$ dont la borne inférieure $i$ est comprise entre\n  les valeurs minimale et maximale de départ.\n  \n> On sort de la boucle quand l’intervalle $[i, j]$ contient zéro ou un point. Dans un cas \n  comme dans l’autre, l’indice $i$ est compris entre les\n  valeurs minimale et maximale de départ. Si la chaîne de caractères `nom[i]` est identique à $s$, on a\n  trouvé l’indice de la chaîne $s$ dans la liste $nom$ ; si ce n’est pas le cas, la chaîne $s$ n’est pas\n  dans la table.\n  -->","tableOfContents":"","frontmatter":{"tags":["Python","algorithmique","algorithme de recherche"],"tocHTML":"<ul><li><a href=\"#algorithme-de-recherche-dans-un-tableau-non-trié\" data-localhref=\"true\">Algorithme de recherche dans un tableau non trié</a></li><li><a href=\"#la-recherche-dichotomique\" data-localhref=\"true\">La recherche dichotomique</a></li><ul><li><a href=\"#principe\" data-localhref=\"true\">Principe</a></li><li><a href=\"#définition-de-la-fonction-de-recherche\" data-localhref=\"true\">Définition de la fonction de recherche</a></li><li><a href=\"#appels-de-la-fonction\" data-localhref=\"true\">Appels de la fonction</a></li></ul><li><a href=\"#complexité-temporelle\" data-localhref=\"true\">Complexité temporelle</a></li></ul>"},"fields":{"classe":"1g","chapter":"Algorithmes de recherche","matter":"nsi","nChapter":"2","part":"Algorithmique","nPart":"8"}}},"pageContext":{"slug":"1g/nsi/8-algorithmique/2-algorithmes-de-recherche","chapter":"Algorithmes de recherche"}},"staticQueryHashes":["604483588"],"slicesMap":{}}