{"componentChunkName":"component---src-templates-exo-md-js","path":"/1g/nsi/6-architectures-materielles-et-systemes-dexploitation/2-jeu-dinstructions-du-processeur/exo/","result":{"data":{"markdownRemark":{"html":"<p>Rappels des instructions utilisées dans ce cours.</p>\n<table class=\"table table-bordered table-hover\">\n<thead class=\"table-warning\">\n<tr class=\"header\">\n<th>instruction</th>\n<th>codage</th>\n<th>signification</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>LDA</td>\n<td>0</td>\n<td>Charge l’état de la case mémoire donnée en argument dans le registre A.</td>\n</tr>\n<tr class=\"even\">\n<td>LDB</td>\n<td>1</td>\n<td>Charge l’état de la case mémoire donnée en argument dans le registre B.</td>\n</tr>\n<tr class=\"odd\">\n<td>STA</td>\n<td>2</td>\n<td>Stocke l’état du registre A dans la case mémoire donnée en argument.</td>\n</tr>\n<tr class=\"even\">\n<td>STB</td>\n<td>3</td>\n<td>Stocke l’état du registre B dans la case mémoire donnée en argument.</td>\n</tr>\n<tr class=\"odd\">\n<td>ADD</td>\n<td>4</td>\n<td>Additionne le contenu des registres et le stocke dans le registre donné en argument.</td>\n</tr>\n<tr class=\"even\">\n<td>DEC</td>\n<td>5</td>\n<td>Décrémente la valeur contenue dans le registre donné en argument, c’est à dire soustrait 1.</td>\n</tr>\n<tr class=\"odd\">\n<td>JMP</td>\n<td>6</td>\n<td>Fait “sauter”(JUMP) le programme vers une ligne donnée en argument</td>\n</tr>\n<tr class=\"even\">\n<td>JMPZ</td>\n<td>7</td>\n<td>Comme JUMP, mais uniquement si le registre A est 0.</td>\n</tr>\n<tr class=\"odd\">\n<td>END</td>\n<td>8</td>\n<td>Termine le programme</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"addition-simple\" class=\"anchored\">Addition simple</h2>\n<p>Écrire une séquence d’instructions qui multiplie par 5 le nombre contenu dans la case mémoire 10 et stocke le résultat dans la case mémoire 11.</p>\n<p>Traduire les instrcuctions en langage machine binaire avec des mots de 4 bits(3= <code>0011</code> par exemple).</p>\n<h2 id=\"différence\" class=\"anchored\">Différence</h2>\n<p>Écrire un programme qui lit deux valeurs x et y contenues respectivement dans les cases mémoires 11 et 12, calcule la différence <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi><mo>−</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">y - x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>\net stocke le résultat à l’adresse 13. On suppose que ces deux valeurs sont des nombres entiers positifs.</p>\n<p>Compléter ce programme pour qu’il stocke la valeur 0 à l’adresse 15 si x est égal à y, ou la valeur x sinon.</p>\n<h2 id=\"multiplication\" class=\"anchored\">Multiplication</h2>\n<p>Écrire un programme qui multiplie la valeur contenue à la case mémoire 12 par celle contenue dans la case mémoire 13 et stocke le résultat à l’adresse 14. On suppose que ces valeurs sont des nombres entiers positifs.</p>\n<p>Quel problème l’écriture de ce programme pose-t-elle ? Quelle modification du processeur permettrait de contourner ce problème et donc de simplifier le programme ?</p>\n<h2 id=\"tp-ecrire-de-lassembleur-sur-un-simulateur\" class=\"anchored\">TP: Ecrire de l’assembleur sur un simulateur</h2>\n<p>La page suivante propose d’écrire quelques programmes en assembleur.</p>\n<p><a href=\"https://pixees.fr/informatiquelycee/n_site/nsi_prem_sim_cpu.html\" class=\"uri\">https://pixees.fr/informatiquelycee/n_site/nsi_prem_sim_cpu.html</a></p>\n<p>Elle utilise la simulation de Peter Higginson qui simule le langage assembleur AQA.</p>\n<p>http://www.peterhigginson.co.uk/AQA/</p>\n<!-- ### De python à l'assembleur\n<p>Voici un programme Python très simple :</p>\n<pre><code>x = 4\ny = 8\nif x == 10:\n    y = 9\nelse :\n    x=x+1\nz=6\n</code></pre>\n<p>et voici maintenant voici son équivalent en assembleur :</p>\n<pre><code class=\"language-asm\">   MOV R0, #4\n   STR R0,30\n   MOV R0, #8\n   STR R0,75\n   LDR R0,30\n   CMP R0, #10\n   BNE else\n   MOV R0, #9\n   STR R0,75\n   B endif\nelse:\n   LDR R0,30\n   ADD R0, R0, #1\n   STR R0,30\nendif:\n   MOV R0, #6\n   STR R0,23\n   HALT\n</code></pre>\n<p>Après avoir analysé très attentivement le programme en assembleur ci-dessus, vous essaierez\nd'établir une correspondance entre les lignes du programme en Python et les lignes du programme en\nassembleur. À quoi sert la ligne \"B endif\" ? À quoi correspondent les adresses mémoires 23, 75 et\n30 ?</p>\n<p>Source: pixees.fr CC-BY-SA</p>\n<h3>AIDE: L'ensemble d'instructions AQA</h3>\n<p>Voici une traduction de la documentation proposée à partir du bouton <a href=\"http://www.peterhigginson.co.uk/AQA/info.html\">INFO</a></p>\n<p>Les registres sont numérotés de <code>R0</code> à <code>R12</code>.</p>\n<p>Les opérations peuvent être effectuées sur deux types de valeurs (notées <code>&#x3C;opérande2></code> dans la suite):</p>\n<ul>\n<li>une constante notée <code>#nnn</code>. Ex: <code>#12</code>: la valeur décimale 12.</li>\n<li>le contenu du régistre n <code>Rn</code>. Ex: <code>R1</code>: la valeur contenie dans le registre 1.</li>\n</ul>\n<p>On peut ajouter des étiquettes dans le programme (notées <code>&#x3C;label></code>); il suffit de noter le nom de\nl'étiquette de son choix et de le faire suivre de deux points.</p>\n<p>exemple:</p>\n<p><code>asm test: </code></p>\n<p>Toute référence à cette étiquette fera \"sauter\" le programme à la case mémoire de\nl'étiquette et exécutera donc les instructions qui suivent.</p>\n<p>les commentaires commencent par au moins un <code>/</code>.</p>\n<h3>Affectations</h3>\n<ul>\n<li><code>LDR Rd, &#x3C;adresse mémoire></code></li>\n</ul>\n<p>Charge la valeur stockée dans l'emplacement de mémoire spécifié par <code>&#x3C;adresse mémoire></code> dans le\nregistre d.</p>\n<ul>\n<li><code>STR Rd, &#x3C;adresse mémoire></code></li>\n</ul>\n<p>Stocke la valeur qui se trouve dans le registre d dans l'emplacement de mémoire spécifié par\n<code>&#x3C;adresse mémoire></code>.</p>\n<ul>\n<li><code>MOV Rd, &#x3C;opérande2></code></li>\n</ul>\n<p>Copiez la valeur spécifiée par <code>&#x3C;opérande 2></code>dans le registre d.</p>\n<h3>Opérations</h3>\n<ul>\n<li><code>ADD Rd, Rn, &#x3C;opérande2></code></li>\n</ul>\n<p>Ajouter la valeur spécifiée dans <code>&#x3C;opérande 2></code>à la valeur du registre\nn et stocker le résultat dans le registre d.</p>\n<ul>\n<li><code>SUB Rd, Rn, &#x3C;opérande2></code></li>\n</ul>\n<p>Soustrayez la valeur spécifiée par <code>&#x3C;opérande 2></code>de la valeur du\nregistre n et stockez le résultat dans le registre d.</p>\n<h3>Comparaisons</h3>\n<ul>\n<li><code>CMP Rn, &#x3C;opérande2></code></li>\n</ul>\n<p>Comparez la valeur stockée dans le registre n avec la valeur spécifiée\npar <code>&#x3C;opérande 2></code></p>\n<ul>\n<li><code>B &#x3C;condition> &#x3C;label></code></li>\n</ul>\n<p>Connectez conditionnellement l'instruction à la position <code>&#x3C;label></code> dans\nle programme si la dernière comparaison a répondu aux critères spécifiés par la <code>&#x3C;condition></code>. Les\nvaleurs possibles pour <code>&#x3C;condition></code> et leur signification sont les suivantes:</p>\n<ul>\n<li><code>EQ</code>: égal à,</li>\n<li><code>NE</code>: différent de,</li>\n<li><code>GT</code>: supérieur à,</li>\n<li><code>LT</code>: inférieur à.</li>\n</ul>\n<h3>Sauts(JUMP)</h3>\n<ul>\n<li><code>B &#x3C;label></code></li>\n</ul>\n<p>Toujours relier l'instruction à la position <code>&#x3C;label></code> dans le programme.</p>\n<h3>Fin du programme</h3>\n<ul>\n<li><code>HALT</code>: Arrête l'exécution du programme.</li>\n</ul>\n<h3>Non utilisées dans ce TD</h3>\n<ul>\n<li><code>AND Rd, Rn, &#x3C;opérande2></code>:</li>\n</ul>\n<p>Effectue une opération ET logique au niveau du bit entre la valeur du\nregistre n et la valeur spécifiée par <code>&#x3C;opérande 2></code> et stocke le résultat dans le registre d.</p>\n<ul>\n<li><code>ORR Rd, Rn, &#x3C;opérande2></code>:</li>\n</ul>\n<p>Effectue une opération OU logique au niveau des bits entre la\nvaleur du registre n et la valeur spécifiée par <code>&#x3C;opérande 2></code>et stocke le résultat dans le registre\nd.</p>\n<ul>\n<li><code>EOR Rd, Rn, &#x3C;opérande2></code>:</li>\n</ul>\n<p>Effectue une opération logique ou binaire exclusive au sens des bits\nentre la valeur du registre n et la valeur spécifiée par <code>&#x3C;opérande 2></code>et stocke le résultat dans le\nregistre d.</p>\n<ul>\n<li><code>MVN Rd, &#x3C;opérande2></code>:</li>\n</ul>\n<p>Exécutez une opération NOT logique au niveau des bits sur la valeur\nspécifiée par <code>&#x3C;opérande 2></code>et stockez le résultat dans le registre d.</p>\n<ul>\n<li><code>LSL Rd, Rn, &#x3C;opérande2></code>:</li>\n</ul>\n<p>Décalez logiquement vers la gauche la valeur stockée dans le registre\nn du nombre de bits spécifié par <code>&#x3C;opérande 2></code> et stockez le résultat dans le registre d.</p>\n<ul>\n<li><code>LSR Rd, Rn, &#x3C;opérande2></code>:</li>\n</ul>\n<p>Décalez logiquement à droite la valeur stockée dans le registre n du\nnombre de bits spécifié par <code>&#x3C;opérande 2></code> et stockez le résultat dans le registre d. --></p>\n<div class=\"ref\">\n<ul>\n<li>Chapitre 15: L’organisation d’un ordinateur <a href=\"http://www.editions-eyrolles.com/Livre/9782212135435/\">Informatique et sciences du numérique Spécialité ISN en terminale S - Avec des exercices corrigés et des idées de projets par Gilles Dowek</a></li>\n<li>https://pixees.fr/informatiquelycee/n_site/nsi_prem_sim_cpu.html</li>\n<li>http://www.lyceerotroudreux.com/images/NSI/Langage_Assembleur.pdf</li>\n<li>http://www.peterhigginson.co.uk/AQA/info.html</li>\n</ul>\n</div>","frontmatter":{"tocHTML":"<ul><li><a href=\"#addition-simple\" data-localhref=\"true\">Addition simple</a></li><li><a href=\"#différence\" data-localhref=\"true\">Différence</a></li><li><a href=\"#multiplication\" data-localhref=\"true\">Multiplication</a></li><li><a href=\"#tp-ecrire-de-lassembleur-sur-un-simulateur\" data-localhref=\"true\">TP: Ecrire de l’assembleur sur un simulateur</a></li></ul>"},"fields":{"classe":"1g","chapter":"Jeu d’instructions du processeur","matter":"nsi","nChapter":"2","part":"Architectures matérielles et systèmes d’exploitation","nPart":"6","type":"exo"}}},"pageContext":{"slug":"1g/nsi/6-architectures-materielles-et-systemes-dexploitation/2-jeu-dinstructions-du-processeur/exo"}},"staticQueryHashes":["604483588"],"slicesMap":{}}