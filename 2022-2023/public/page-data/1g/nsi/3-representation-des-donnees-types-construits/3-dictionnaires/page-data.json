{"componentChunkName":"component---src-templates-cours-md-js","path":"/1g/nsi/3-representation-des-donnees-types-construits/3-dictionnaires/","result":{"data":{"markdownRemark":{"html":"<details class=\"programme\"><summary>Programme Officiel</summary>\n<table class=\"table table-bordered table-hover\">\n<thead class=\"table-warning\">\n<tr class=\"header\">\n<th>Contenus</th>\n<th>Capacités attendues</th>\n<th>Commentaires</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>Dictionnaires par clés et valeurs</td>\n<td><p>Construire une entrée de dictionnaire</p>\n<p>Itérer sur les éléments d’un dictionnaire.</p></td>\n<td><p>Il est possible de présenter les données EXIF d’une image sous la forme d’un enregistrement.</p>\n<p>En Python, les p-uplets nommés sont implémentés par des dictionnaires.</p>\n<p>Utiliser les méthodes <code>keys()</code>, <code>values()</code> et <code>items()</code></p></td>\n</tr>\n</tbody>\n</table>\n<a class=\"lien-programme\" href=\"../programme/\">Lien vers le programme complet</a></details>\n<div class=\"intro quarto-layout-panel\">\n<div class=\"quarto-layout-row quarto-layout-valign-top\">\n<div class=\"quarto-layout-cell\" style=\"flex-basis: 50.0%;justify-content: center;\">\n<p>Dans un dictionnaire les valeurs de la collection ne sont pas repéré par un index, mais par une <em>clé</em>. Ils ne possèdent donc pas d’ordre a priori, c’est une structure <em>non-ordonnée</em>. Les dernières versions de Python assurent cependant un ordre lors de leur itération.</p>\n</div>\n<div class=\"quarto-layout-cell\" style=\"flex-basis: 50.0%;justify-content: center;\">\n<p><wc-wikimage title=\"Associative_array_as_linked_list.svg\" caption=\"Les dictionnaires en Python sont ce que l'on appelle un tableau associatif.\"></wc-wikimage></p>\n</div>\n</div>\n</div>\n<h2 id=\"syntaxe\" class=\"anchored\">Syntaxe</h2>\n<p>Les dictionnaires sont entourés d’accolades <code>{}</code>. Les clés doivent être des objets <em>imuables</em>, typiquement des <code>str</code>.</p>\n<div class=\"highlight\"><pre><span></span><span class=\"p\">{</span><span class=\"s1\">'clé_1'</span><span class=\"p\">:</span> <span class=\"n\">valeur_1</span><span class=\"p\">,</span> <span class=\"s1\">'clé_n'</span><span class=\"p\">:</span> <span class=\"n\">valeur_n</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"s1\">'clé_n'</span><span class=\"p\">:</span> <span class=\"n\">valeur_n</span><span class=\"p\">}</span>\n</pre></div>\n<div class=\"cell\" data-execution_count=\"1\">\n<div class=\"highlight\"><pre><span></span><span class=\"n\">D</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"s1\">'nom'</span><span class=\"p\">:</span> <span class=\"s1\">'Lagaffe'</span> <span class=\"p\">,</span> <span class=\"s1\">'prenom'</span><span class=\"p\">:</span> <span class=\"s1\">'Gaston'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">22</span> <span class=\"p\">}</span>\n<span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">D</span><span class=\"p\">)</span>\n</pre></div>\n<div class=\"cell-output cell-output-display\" data-execution_count=\"1\">\n<div class=\"highlight\"><pre><span></span>dict\n</pre></div>\n</div>\n</div>\n<p>Pour accéder aux éléments du dictionnaire, il suffit d’appeler la clé correspondante, d’autre part la fonction <code>len()</code> est également disponible.</p>\n<div class=\"cell\" data-execution_count=\"2\">\n<div class=\"highlight\"><pre><span></span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">D</span><span class=\"p\">)</span>\n</pre></div>\n<div class=\"cell-output cell-output-display\" data-execution_count=\"2\">\n<div class=\"highlight\"><pre><span></span>3\n</pre></div>\n</div>\n</div>\n<div class=\"cell\" data-execution_count=\"3\">\n<div class=\"highlight\"><pre><span></span><span class=\"n\">D</span><span class=\"p\">[</span><span class=\"s1\">'nom'</span><span class=\"p\">]</span>\n</pre></div>\n<div class=\"cell-output cell-output-display\" data-execution_count=\"3\">\n<div class=\"highlight\"><pre><span></span>'Lagaffe'\n</pre></div>\n</div>\n</div>\n<div class=\"cell\" data-execution_count=\"4\">\n<div class=\"highlight\"><pre><span></span><span class=\"n\">D</span><span class=\"p\">[</span><span class=\"s1\">'age'</span><span class=\"p\">]</span>\n</pre></div>\n<div class=\"cell-output cell-output-display\" data-execution_count=\"4\">\n<div class=\"highlight\"><pre><span></span>22\n</pre></div>\n</div>\n</div>\n<h2 id=\"ajout-et-suppression-déléments\" class=\"anchored\">Ajout et suppression d’éléments</h2>\n<p>Les dictionnaires étant <em><a href=\"https://fr.wiktionary.org/wiki/mutable\">mutables</a></em>, on peut ajouter des éléments au dictionnaire en **assignant* des clés paire valeur à notre guise.</p>\n<div class=\"cell\" data-execution_count=\"5\">\n<div class=\"highlight\"><pre><span></span><span class=\"n\">D</span><span class=\"p\">[</span><span class=\"s2\">\"expression\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\"M'enfin\"</span>\n<span class=\"n\">D</span>\n</pre></div>\n<div class=\"cell-output cell-output-display\" data-execution_count=\"5\">\n<div class=\"highlight\"><pre><span></span>{'nom': 'Lagaffe', 'prenom': 'Gaston', 'age': 22, 'expression': \"M'enfin\"}\n</pre></div>\n</div>\n</div>\n<p>On peut au contraire supprimer des éléments du dictionnaire avec la méthode <code>pop()</code>.</p>\n<div class=\"cell\" data-execution_count=\"6\">\n<div class=\"highlight\"><pre><span></span><span class=\"n\">D</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">\"age\"</span><span class=\"p\">)</span>\n<span class=\"n\">D</span>\n</pre></div>\n<div class=\"cell-output cell-output-display\" data-execution_count=\"6\">\n<div class=\"highlight\"><pre><span></span>{'nom': 'Lagaffe', 'prenom': 'Gaston', 'expression': \"M'enfin\"}\n</pre></div>\n</div>\n</div>\n<h2 id=\"autres-méthodes-des-dictionnaires\" class=\"anchored\">Autres méthodes des dictionnaires</h2>\n<p>Les méthodes des <code>dict</code>ionnaires sont décrites dans la <a href=\"https://docs.python.org/fr/3/library/stdtypes.html#sequence-types-list-tuple-range\">documentation</a> ou grâce à l’appel <code>help(tuple)</code>, outre les méthodes d’itération il peut être utile de connaitre la méthode <code>get(clé)</code> qui renvoie la valeur associée à l clé ou <code>None</code> si la clé n’existe pas.</p>\n<p>Cela permet d’éviter les exceptions du type <code>KeyError</code> si la clé n’existe pas.</p>\n<div class=\"cell\" data-execution_count=\"7\">\n<div class=\"highlight\"><pre><span></span><span class=\"n\">D</span>\n</pre></div>\n<div class=\"cell-output cell-output-display\" data-execution_count=\"7\">\n<div class=\"highlight\"><pre><span></span>{'nom': 'Lagaffe', 'prenom': 'Gaston', 'expression': \"M'enfin\"}\n</pre></div>\n</div>\n</div>\n<p>Par exemple, la clé <code>age</code> n’existe plus donc la syntaxe d’accés par clé renvoir une erreur.</p>\n<div class=\"cell\" data-execution_count=\"8\">\n<div class=\"highlight\"><pre><span></span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">D</span><span class=\"p\">[</span><span class=\"s2\">\"nom\"</span><span class=\"p\">])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">D</span><span class=\"p\">[</span><span class=\"s2\">\"prenom\"</span><span class=\"p\">])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">D</span><span class=\"p\">[</span><span class=\"s2\">\"age\"</span><span class=\"p\">])</span>\n</pre></div>\n<div class=\"cell-output cell-output-stdout\">\n<div class=\"highlight\"><pre><span></span>Lagaffe\nGaston\n</pre></div>\n</div>\n<div class=\"cell-output cell-output-error\">\n<div class=\"highlight\"><pre><span></span>KeyError: 'age'\n</pre></div>\n</div>\n</div>\n<p>Par contre, la méthode <code>get()</code> ne générera pas la <code>KeyError</code> et renverra <code>None</code> la clé n’existe pas.</p>\n<div class=\"cell\" data-execution_count=\"9\">\n<div class=\"highlight\"><pre><span></span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">D</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"nom\"</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">D</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"prenom\"</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">D</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"age\"</span><span class=\"p\">))</span>\n</pre></div>\n<div class=\"cell-output cell-output-stdout\">\n<div class=\"highlight\"><pre><span></span>Lagaffe\nGaston\nNone\n</pre></div>\n</div>\n</div>\n<details class=\"plus\"><summary>Documentation des dictionnaires</summary>\n<div class=\"cell\" data-execution_count=\"10\">\n<div class=\"highlight\"><pre><span></span><span class=\"n\">help</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">)</span>\n</pre></div>\n<div class=\"cell-output cell-output-stdout\">\n<div class=\"highlight\"><pre><span></span>Help on class dict in module builtins:\n<span></span>\nclass dict(object)\n |  dict() -&gt; new empty dictionary\n |  dict(mapping) -&gt; new dictionary initialized from a mapping object's\n |      (key, value) pairs\n |  dict(iterable) -&gt; new dictionary initialized as if via:\n |      d = {}\n |      for k, v in iterable:\n |          d[k] = v\n |  dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs\n |      in the keyword argument list.  For example:  dict(one=1, two=2)\n |  \n |  Built-in subclasses:\n |      StgDict\n |  \n |  Methods defined here:\n |  \n |  __contains__(self, key, /)\n |      True if the dictionary has the specified key, else False.\n |  \n |  __delitem__(self, key, /)\n |      Delete self[key].\n |  \n |  __eq__(self, value, /)\n |      Return self==value.\n |  \n |  __ge__(self, value, /)\n |      Return self&gt;=value.\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  __getitem__(...)\n |      x.__getitem__(y) &lt;==&gt; x[y]\n |  \n |  __gt__(self, value, /)\n |      Return self&gt;value.\n |  \n |  __init__(self, /, *args, **kwargs)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  __ior__(self, value, /)\n |      Return self|=value.\n |  \n |  __iter__(self, /)\n |      Implement iter(self).\n |  \n |  __le__(self, value, /)\n |      Return self&lt;=value.\n |  \n |  __len__(self, /)\n |      Return len(self).\n |  \n |  __lt__(self, value, /)\n |      Return self&lt;value.\n |  \n |  __ne__(self, value, /)\n |      Return self!=value.\n |  \n |  __or__(self, value, /)\n |      Return self|value.\n |  \n |  __repr__(self, /)\n |      Return repr(self).\n |  \n |  __reversed__(self, /)\n |      Return a reverse iterator over the dict keys.\n |  \n |  __ror__(self, value, /)\n |      Return value|self.\n |  \n |  __setitem__(self, key, value, /)\n |      Set self[key] to value.\n |  \n |  __sizeof__(...)\n |      D.__sizeof__() -&gt; size of D in memory, in bytes\n |  \n |  clear(...)\n |      D.clear() -&gt; None.  Remove all items from D.\n |  \n |  copy(...)\n |      D.copy() -&gt; a shallow copy of D\n |  \n |  get(self, key, default=None, /)\n |      Return the value for key if key is in the dictionary, else default.\n |  \n |  items(...)\n |      D.items() -&gt; a set-like object providing a view on D's items\n |  \n |  keys(...)\n |      D.keys() -&gt; a set-like object providing a view on D's keys\n |  \n |  pop(...)\n |      D.pop(k[,d]) -&gt; v, remove specified key and return the corresponding value.\n |      \n |      If the key is not found, return the default if given; otherwise,\n |      raise a KeyError.\n |  \n |  popitem(self, /)\n |      Remove and return a (key, value) pair as a 2-tuple.\n |      \n |      Pairs are returned in LIFO (last-in, first-out) order.\n |      Raises KeyError if the dict is empty.\n |  \n |  setdefault(self, key, default=None, /)\n |      Insert key with a value of default if key is not in the dictionary.\n |      \n |      Return the value for key if key is in the dictionary, else default.\n |  \n |  update(...)\n |      D.update([E, ]**F) -&gt; None.  Update D from dict/iterable E and F.\n |      If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]\n |      If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v\n |      In either case, this is followed by: for k in F:  D[k] = F[k]\n |  \n |  values(...)\n |      D.values() -&gt; an object providing a view on D's values\n |  \n |  ----------------------------------------------------------------------\n |  Class methods defined here:\n |  \n |  __class_getitem__(...) from builtins.type\n |      See PEP 585\n |  \n |  fromkeys(iterable, value=None, /) from builtins.type\n |      Create a new dictionary with keys from iterable and values set to value.\n |  \n |  ----------------------------------------------------------------------\n |  Static methods defined here:\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes defined here:\n |  \n |  __hash__ = None\n</pre></div>\n</div>\n</div>\n</details>\n<h2 id=\"itération-sur-les-dictionnaires\" class=\"anchored\">Itération sur les dictionnaires</h2>\n<p>Les dictionnaires étant des associations de clés(<em>keys</em>) et de valeurs(<em>values</em>), il existe trois méthodes pour <em>itérer</em> sur les clés, les valeurs ou les deux.</p>\n<h3 id=\"itération-sur-les-clés-keys\" class=\"anchored\">Itération sur les clés: <code>keys()</code></h3>\n<div class=\"cell\" data-execution_count=\"11\">\n<div class=\"highlight\"><pre><span></span><span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">D</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">():</span>\n<span class=\"nb\">    print</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n</pre></div>\n<div class=\"cell-output cell-output-stdout\">\n<div class=\"highlight\"><pre><span></span>nom\nprenom\nexpression\n</pre></div>\n</div>\n</div>\n<p>Ou plus simplement.</p>\n<div class=\"cell\" data-execution_count=\"12\">\n<div class=\"highlight\"><pre><span></span><span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">D</span><span class=\"p\">:</span>\n<span class=\"nb\">    print</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n</pre></div>\n<div class=\"cell-output cell-output-stdout\">\n<div class=\"highlight\"><pre><span></span>nom\nprenom\nexpression\n</pre></div>\n</div>\n</div>\n<h3 id=\"itération-sur-les-valeurs-values\" class=\"anchored\">Itération sur les valeurs: <code>values()</code></h3>\n<div class=\"cell\" data-execution_count=\"13\">\n<div class=\"highlight\"><pre><span></span><span class=\"k\">for</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">D</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">():</span>\n<span class=\"nb\">    print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n</pre></div>\n<div class=\"cell-output cell-output-stdout\">\n<div class=\"highlight\"><pre><span></span>Lagaffe\nGaston\nM'enfin\n</pre></div>\n</div>\n</div>\n<h3 id=\"itération-sur-les-paires-clé-valeurs-items\" class=\"anchored\">Itération sur les paires clé, valeurs: <code>items()</code></h3>\n<div class=\"cell\" data-execution_count=\"14\">\n<div class=\"highlight\"><pre><span></span><span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">D</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n<span class=\"nb\">    print</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"s1\">'=&gt;'</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n</pre></div>\n<div class=\"cell-output cell-output-stdout\">\n<div class=\"highlight\"><pre><span></span>nom =&gt; Lagaffe\nprenom =&gt; Gaston\nexpression =&gt; M'enfin\n</pre></div>\n</div>\n</div>\n<h2 id=\"p-uplets-nommés\" class=\"anchored\">p-uplets nommés</h2>\n<p>Il est possible de créer des p-uplets nommés afin de pouvoir accéder aux éléments de la collection par clé. Contrairement aux dictionnaires, ils sont immutables et donc potentiellement plus performants, ils sont cependant peu utilisés et nécessite d’être importé par le module <code>collections</code> avant d’être utilisé.</p>\n<div class=\"cell\" data-execution_count=\"15\">\n<div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">namedtuple</span>\n<span></span>\n<span class=\"n\">Eleve</span> <span class=\"o\">=</span> <span class=\"n\">namedtuple</span><span class=\"p\">(</span><span class=\"s1\">'Eleve'</span><span class=\"p\">,</span> <span class=\"s1\">'nom, age, classe, spécialité'</span><span class=\"p\">)</span>\n<span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">Eleve</span><span class=\"p\">(</span><span class=\"s2\">\"John\"</span><span class=\"p\">,</span> <span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"s2\">\"1g\"</span><span class=\"p\">,</span> <span class=\"s2\">\"nsi\"</span> <span class=\"p\">)</span>\n<span class=\"n\">e</span>\n</pre></div>\n<div class=\"cell-output cell-output-display\" data-execution_count=\"15\">\n<div class=\"highlight\"><pre><span></span>Eleve(nom='John', age=17, classe='1g', spécialité='nsi')\n</pre></div>\n</div>\n</div>\n<p>L’accès peut se faire en ajoutant un point et le nom de la clé. Il s’agit d’une <em>notation pointée</em> comme dans le cas d’appel de méthodes, cependant il n’y a pas de parenthèses, car il s’agit de valeurs et non de fonctions(On parle d’attributs de l’objet).</p>\n<div class=\"cell\" data-execution_count=\"16\">\n<div class=\"highlight\"><pre><span></span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">age</span>\n</pre></div>\n<div class=\"cell-output cell-output-display\" data-execution_count=\"16\">\n<div class=\"highlight\"><pre><span></span>17\n</pre></div>\n</div>\n</div>\n<div class=\"cell\" data-execution_count=\"17\">\n<div class=\"highlight\"><pre><span></span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">spécialité</span>\n</pre></div>\n<div class=\"cell-output cell-output-display\" data-execution_count=\"17\">\n<div class=\"highlight\"><pre><span></span>'nsi'\n</pre></div>\n</div>\n</div>\n<h2 id=\"structures-imbriquées-avec-les-dictionnaires\" class=\"anchored\">Structures imbriquées avec les dictionnaires</h2>\n<p>Tout comme nous avons vu les tableaux de tableau dans le chapitre précédent, il est possible d’imaginer des structures imbriquées avec des dictionnaires.</p>\n<p>On va s’intéresser plus particulièrement à une liste de dictionnaire qui pourrait être obtenue par lecture d’un fichier de données <code>csv</code>.</p>","tableOfContents":"","frontmatter":{"tags":["python","dictionnaire"],"tocHTML":"<ul><li><a href=\"#syntaxe\" data-localhref=\"true\">Syntaxe</a></li><li><a href=\"#ajout-et-suppression-déléments\" data-localhref=\"true\">Ajout et suppression d’éléments</a></li><li><a href=\"#autres-méthodes-des-dictionnaires\" data-localhref=\"true\">Autres méthodes des dictionnaires</a></li><li><a href=\"#itération-sur-les-dictionnaires\" data-localhref=\"true\">Itération sur les dictionnaires</a></li><ul><li><a href=\"#itération-sur-les-clés-keys\" data-localhref=\"true\">Itération sur les clés: <code>keys()</code></a></li><li><a href=\"#itération-sur-les-valeurs-values\" data-localhref=\"true\">Itération sur les valeurs: <code>values()</code></a></li><li><a href=\"#itération-sur-les-paires-clé-valeurs-items\" data-localhref=\"true\">Itération sur les paires clé, valeurs: <code>items()</code></a></li></ul><li><a href=\"#p-uplets-nommés\" data-localhref=\"true\">p-uplets nommés</a></li><li><a href=\"#structures-imbriquées-avec-les-dictionnaires\" data-localhref=\"true\">Structures imbriquées avec les dictionnaires</a></li></ul>"},"fields":{"classe":"1g","chapter":"Dictionnaires","matter":"nsi","nChapter":"3","part":"Représentation des données : types construits","nPart":"3"}}},"pageContext":{"slug":"1g/nsi/3-representation-des-donnees-types-construits/3-dictionnaires","chapter":"Dictionnaires"}},"staticQueryHashes":["604483588"],"slicesMap":{}}