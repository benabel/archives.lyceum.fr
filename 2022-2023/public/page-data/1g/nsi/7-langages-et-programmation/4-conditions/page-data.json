{"componentChunkName":"component---src-templates-cours-md-js","path":"/1g/nsi/7-langages-et-programmation/4-conditions/","result":{"data":{"markdownRemark":{"html":"<details class=\"programme\"><summary>Programme Officiel</summary>\n<table class=\"table table-bordered table-hover\">\n<thead class=\"table-warning\">\n<tr class=\"header\">\n<th>Contenus</th>\n<th>Capacités attendues</th>\n<th>Commentaires</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>Constructions élémentaires</td>\n<td>Mettre en évidence un corpus de constructions élémentaires. boucles non bornées, appels de fonction.</td>\n<td>Séquences, affectation, conditionnelles, boucles bornées,</td>\n</tr>\n</tbody>\n</table>\n<a class=\"lien-programme\" href=\"../programme/\">Lien vers le programme complet</a></details>\n<div class=\"intro quarto-layout-panel\">\n<div class=\"quarto-layout-row quarto-layout-valign-top\">\n<div class=\"quarto-layout-cell\" style=\"flex-basis: 50.0%;justify-content: center;\">\n<p>Les structures conditionnelles permettent d’écrire des programmes qui peuvent s’exécuter différemment selon que certaines conditions sont vérifiées ou non.</p>\n</div>\n<div class=\"quarto-layout-cell\" style=\"flex-basis: 50.0%;justify-content: center;\">\n<p><wc-wikimage title=\"SunsetTracksCrop.JPG\" caption=\"Les programmes comme les trains peuvent prendre des chemins différents suivant les conditions(destination, heure, travaux...)\"></wc-wikimage></p>\n</div>\n</div>\n</div>\n<h2 id=\"les-blocs-en-python\" class=\"anchored\">Les blocs en python</h2>\n<p>Nous avons vu précédemment que les programmes étaient une suite d’instructions. Il est cependant possible d’utiliser des <strong>blocs</strong> d’instructions qui ne seront pas exécutés dès leur apparition dans le programme à l’opposé des instructions écrites dans le flot principal(à gauche de la ligne).</p>\n<p>En python, les blocs sont délimités grâce à des espaces et introduits grâce à deux points <code>:</code>.</p>\n<div class=\"highlight\"><pre><span></span>entrée dans un bloc:\n    ligne 1 du bloc\n    ligne 2 du bloc\n    ...\n<span></span>\nretour dans l’exécution normale du programme ligne à ligne.\n</pre></div>\n<p>Aujourd’hui, nous allons utiliser des structures de contrôle qui permettent d’exécuter: des <em>blocs</em>, en fonction de conditions. On parle de <strong>structure conditionnelle</strong>.</p>\n<h2 id=\"opérateurs-de-comparaison\" class=\"anchored\">Opérateurs de comparaison</h2>\n<p>Pour tester une condition, on utilise un opérateur de comparaison qui donne un résultat booléen: <code>True</code> ou <code>False</code>.</p>\n<p>Soit x et y des variables de type <code>int</code> ou <code>float</code>, les opérateurs de comparaison sont:</p>\n<ul>\n<li><code>x &lt; y</code>: x est-il inférieur à y ?</li>\n<li><code>x &lt;= y</code>: x est-il inférieur ou égal à y ?</li>\n<li><code>x &gt; y</code>: x est-il supérieur à y ?</li>\n<li><code>x &gt;= y</code>: x est-il supérieur ou égal à y ?</li>\n<li><code>x == y</code>: x est-il égal à y ?</li>\n<li><code>x != y</code>: x est-il différent de y ?</li>\n</ul>\n<div class=\"callout callout-style-default callout-warning callout-captioned\">\n<div class=\"callout-header d-flex align-content-center\">\n<div class=\"callout-icon-container\">\n<i class=\"callout-icon\"></i>\n</div>\n<div class=\"callout-caption-container flex-fill\">\nAvertissement\n</div>\n</div>\n<div class=\"callout-body-container callout-body\">\n<p>Comme vous l’avez remarqué pour tester une égalité on utilise le double signe égal <code>==</code>. Tout simplement, car le signe égal seul <code>=</code> est déjà utilisé pour l’affectation de variables.</p>\n</div>\n</div>\n<div class=\"examples\">\n<div class=\"cell\" data-execution_count=\"1\">\n<div class=\"highlight\"><pre><span></span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"mi\">3</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n</pre></div>\n<div class=\"cell-output cell-output-stdout\">\n<div class=\"highlight\"><pre><span></span>True\n</pre></div>\n</div>\n</div>\n<div class=\"cell\" data-execution_count=\"2\">\n<div class=\"highlight\"><pre><span></span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"mi\">3</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n</pre></div>\n<div class=\"cell-output cell-output-stdout\">\n<div class=\"highlight\"><pre><span></span>True\n</pre></div>\n</div>\n</div>\n<p>Dans l’environnement Jupyter, le <code>print</code> sur la dernière ligne est optionnel, et le résultat de la dernière expression entrée est évalué et affiché.</p>\n<div class=\"cell\" data-execution_count=\"3\">\n<div class=\"highlight\"><pre><span></span><span class=\"mi\">3</span> <span class=\"o\">&gt;</span> <span class=\"mi\">5</span>\n</pre></div>\n<div class=\"cell-output cell-output-display\" data-execution_count=\"3\">\n<div class=\"highlight\"><pre><span></span>False\n</pre></div>\n</div>\n</div>\n<div class=\"cell\" data-execution_count=\"4\">\n<div class=\"highlight\"><pre><span></span><span class=\"mi\">3</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">5</span>\n</pre></div>\n<div class=\"cell-output cell-output-display\" data-execution_count=\"4\">\n<div class=\"highlight\"><pre><span></span>False\n</pre></div>\n</div>\n</div>\n<div class=\"cell\" data-execution_count=\"5\">\n<div class=\"highlight\"><pre><span></span><span class=\"mi\">3</span> <span class=\"o\">==</span> <span class=\"mi\">5</span>\n</pre></div>\n<div class=\"cell-output cell-output-display\" data-execution_count=\"5\">\n<div class=\"highlight\"><pre><span></span>False\n</pre></div>\n</div>\n</div>\n<div class=\"cell\" data-execution_count=\"6\">\n<div class=\"highlight\"><pre><span></span><span class=\"mi\">3</span> <span class=\"o\">!=</span> <span class=\"mi\">5</span>\n</pre></div>\n<div class=\"cell-output cell-output-display\" data-execution_count=\"6\">\n<div class=\"highlight\"><pre><span></span>True\n</pre></div>\n</div>\n</div>\n<p>On peut constater que ces instructions retournent systématiquement un objet de type booléen.</p>\n<div class=\"cell\" data-execution_count=\"7\">\n<div class=\"highlight\"><pre><span></span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"mi\">3</span> <span class=\"o\">&gt;</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n</pre></div>\n<div class=\"cell-output cell-output-display\" data-execution_count=\"7\">\n<div class=\"highlight\"><pre><span></span>bool\n</pre></div>\n</div>\n</div>\n<p>Ou une erreur si on cherche à comparer <em>l’incomparable</em>:</p>\n<div class=\"cell\" data-execution_count=\"8\">\n<div class=\"highlight\"><pre><span></span><span class=\"mi\">3</span> <span class=\"o\">&lt;</span> <span class=\"s2\">\"5\"</span>\n</pre></div>\n<div class=\"cell-output cell-output-error\">\n<div class=\"highlight\"><pre><span></span>TypeError: '&lt;' not supported between instances of 'int' and 'str'\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"prop\">\n<p>Les opérateurs de comparaison ont une priorité inférieure aux opérateurs arithmétiques.</p>\n</div>\n<div class=\"example\">\n<p><code>3 + 4 &lt; 2 * 12</code> renvoie <code>True</code> car les opérations <code>+</code> et <code>*</code> sont exécutées avant la comparaison <code>&lt;</code>.</p>\n<p>Les parenthèses sont donc inutiles (<code>(3 + 4) &lt; (2 * 12)</code>).</p>\n</div>\n<h2 id=\"programme-à-structure-conditionnelle\" class=\"anchored\">Programme à structure conditionnelle</h2>\n<p>Dans ce type de programme, le code sera toujours interprété ligne par ligne, cependant certains blocs de code ne seront exécutés que si une condition donnée est vraie.</p>\n<h3 id=\"linstruction-if\" class=\"anchored\">L’instruction <code>if</code></h3>\n<p>Le bloc d’instruction contenu n’est exécuté que si la condition est vérifiée.</p>\n<p><strong>Syntaxe</strong></p>\n<div class=\"highlight\"><pre><span></span><span class=\"k\">if</span> <span class=\"n\">condition</span><span class=\"p\">:</span>\n<span class=\"n\">    instruction</span> <span class=\"mi\">1</span>\n<span class=\"n\">    instruction</span> <span class=\"mi\">2</span>\n<span class=\"o\">    ...</span>\n</pre></div>\n<div class=\"cell\" data-execution_count=\"9\">\n<div class=\"highlight\"><pre><span></span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n<span class=\"n\">    a</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">a</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n</pre></div>\n<div class=\"cell-output cell-output-stdout\">\n<div class=\"highlight\"><pre><span></span>-3\n</pre></div>\n</div>\n</div>\n<p>Dans le programme précédent l’instruction <code>if a &gt; 0:</code> est toujours exécutée par l’interpréteur, car elle est dans le flux normal du programme(en début de ligne).</p>\n<p>Par contre, l’instruction <code>a = -a</code> n’est exécutée que si la condition <code>a &gt; 0</code> a renvoyé <code>True</code>, il s’agit d’un <strong>bloc</strong> relatif à l’instruction <code>if a &gt; 0:</code> qui le précède. Elle est <strong>indentée</strong> avec quatre espaces. Si j’affecte la valeur négative -5 à <code>a</code>, ce bloc ne sera pas exécuté, et le changement de signe n’aura pas lieu.</p>\n<div class=\"cell\" data-execution_count=\"10\">\n<div class=\"highlight\"><pre><span></span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">5</span>\n<span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n<span class=\"n\">    a</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">a</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n</pre></div>\n<div class=\"cell-output cell-output-stdout\">\n<div class=\"highlight\"><pre><span></span>-5\n</pre></div>\n</div>\n</div>\n<h3 id=\"linstruction-else\" class=\"anchored\">L’instruction <code>else</code></h3>\n<p>Indique le bloc d’instruction à exécuter si la condition n’est pas vérifiée.</p>\n<p><strong>Syntaxe</strong></p>\n<div class=\"highlight\"><pre><span></span><span class=\"k\">if</span> <span class=\"n\">condition</span><span class=\"p\">:</span>\n<span class=\"n\">    bloc</span> <span class=\"n\">d</span><span class=\"s1\">'instructions exécuté si la condition est vraie</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n<span class=\"n\">    bloc</span> <span class=\"n\">d</span><span class=\"s1\">'instructions exécuté si la condition est fausse</span>\n</pre></div>\n<div class=\"cell\" data-execution_count=\"11\">\n<div class=\"highlight\"><pre><span></span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">3</span>\n<span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n<span class=\"n\">    a</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">a</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n<span class=\"n\">    a</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">*</span><span class=\"mi\">100</span>\n<span></span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n</pre></div>\n<div class=\"cell-output cell-output-stdout\">\n<div class=\"highlight\"><pre><span></span>-300\n</pre></div>\n</div>\n</div>\n<p>Comme initialement la variable a n’était pas positive, c’est le bloc d’instructions <code>else</code> qui a été exécuté.</p>\n<h3 id=\"linstruction-elif\" class=\"anchored\">L’instruction <code>elif</code></h3>\n<p>Cette instruction permet de réaliser des tests imbriqués, c’est un raccourci pour les instructions <code>else</code> et <code>if</code>.</p>\n<p><strong>Syntaxe</strong></p>\n<div class=\"highlight\"><pre><span></span><span class=\"k\">if</span> <span class=\"n\">condition</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n<span class=\"n\">    bloc</span> <span class=\"n\">d</span><span class=\"s1\">'instructions exécuté si la condition 1 est vraie</span>\n<span class=\"k\">elif</span> <span class=\"n\">condition</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n<span class=\"n\">    bloc</span> <span class=\"n\">d</span><span class=\"s1\">'instructions exécuté si la condition 1 est fausse et la condition 2 vraie</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n<span class=\"n\">    bloc</span> <span class=\"n\">d</span><span class=\"s1\">'instructions exécuté si les conditions 1 et 2 sont fausses</span>\n</pre></div>\n<div class=\"cell\" data-execution_count=\"12\">\n<div class=\"highlight\"><pre><span></span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"o\">==</span> <span class=\"mi\">7</span><span class=\"p\">:</span>\n<span class=\"nb\">    print</span><span class=\"p\">(</span><span class=\"s2\">\"C'est un chiffre porte bonheur\"</span><span class=\"p\">)</span>\n<span class=\"k\">elif</span> <span class=\"n\">a</span> <span class=\"o\">==</span> <span class=\"mi\">3</span><span class=\"p\">:</span>\n<span class=\"nb\">    print</span><span class=\"p\">(</span><span class=\"s2\">\"Quelques modifications sont nécessaires\"</span><span class=\"p\">)</span>\n<span class=\"n\">    a</span> <span class=\"o\">+=</span> <span class=\"mi\">4</span>\n<span></span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n</pre></div>\n<div class=\"cell-output cell-output-stdout\">\n<div class=\"highlight\"><pre><span></span>Quelques modifications sont nécessaires\n7\n</pre></div>\n</div>\n</div>\n<h2 id=\"opérateurs-booléens\" class=\"anchored\">Opérateurs booléens</h2>\n<p>On peut combiner des conditions avec les opérateurs booléens.</p>\n<p>Les opérateurs booléens français sont <code>ET</code>, <code>OU</code>, <code>NON</code> et leur correspondant en Python sont <code>and</code>, <code>or</code> et <code>not</code>.</p>\n<ul>\n<li><code>and</code> renvoie <code>True</code> si les deux arguments ont pour valeur <code>True</code>.</li>\n<li><code>or</code> renvoie <code>True</code> si au moins un des deux arguments a pour valeur <code>True</code>.</li>\n<li><code>not</code> renvoie l’inverse de son argument <code>False</code> si l’argument est <code>True</code>, et vice-versa.</li>\n</ul>\n<div class=\"examples\">\n<ul>\n<li><code>1 &lt; 2 and 3 &lt; 4</code> renvoie <code>True</code></li>\n<li><code>1 &lt; 2 and 3 &gt; 4</code> renvoie <code>False</code></li>\n<li><code>1 &lt; 2 or 3 &lt; 4</code> renvoie <code>True</code></li>\n<li><code>1 &lt; 2 or 3 &gt; 4</code> renvoie <code>True</code></li>\n<li><code>not 1 &lt; 2</code> renvoie <code>False</code></li>\n</ul>\n</div>\n<div class=\"prop\">\n<p>Les opérateurs de comparaison sont prioritaires sur les opérateurs booléens. Quand on écrit <code>1 &lt; 2 and 3 &lt; 4</code> les opérations sont évaluées avant l’opération <code>and</code>; les parenthèses sont superflues: <code>(1 &lt; 2) and (3 &lt; 4)</code>.</p>\n</div>\n<p>Vous êtes maintenant armés pour aborder des programmes beaucoup plus riches dans lesquels vous allez pouvoir <em>prendre des décisions</em> en fonction des données qui lui arrivent.</p>","tableOfContents":"","frontmatter":{"tags":["opérateurs booléens","structures conditionnelles"],"tocHTML":"<ul><li><a href=\"#les-blocs-en-python\" data-localhref=\"true\">Les blocs en python</a></li><li><a href=\"#opérateurs-de-comparaison\" data-localhref=\"true\">Opérateurs de comparaison</a></li><li><a href=\"#programme-à-structure-conditionnelle\" data-localhref=\"true\">Programme à structure conditionnelle</a></li><ul><li><a href=\"#linstruction-if\" data-localhref=\"true\">L’instruction <code>if</code></a></li><li><a href=\"#linstruction-else\" data-localhref=\"true\">L’instruction <code>else</code></a></li><li><a href=\"#linstruction-elif\" data-localhref=\"true\">L’instruction <code>elif</code></a></li></ul><li><a href=\"#opérateurs-booléens\" data-localhref=\"true\">Opérateurs booléens</a></li></ul>"},"fields":{"classe":"1g","chapter":"Conditions","matter":"nsi","nChapter":"4","part":"Langages et programmation","nPart":"7"}}},"pageContext":{"slug":"1g/nsi/7-langages-et-programmation/4-conditions","chapter":"Conditions"}},"staticQueryHashes":["604483588"],"slicesMap":{}}