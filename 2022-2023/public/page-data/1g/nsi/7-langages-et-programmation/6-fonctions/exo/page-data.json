{"componentChunkName":"component---src-templates-exo-md-js","path":"/1g/nsi/7-langages-et-programmation/6-fonctions/exo/","result":{"data":{"markdownRemark":{"html":"<h2 id=\"définir-et-appeler-des-fonctions\" class=\"anchored\">Définir et appeler des fonctions</h2>\n<p>Écrire les fonctions suivantes, et pour chacune, donner un exemple d’appel avec la sortie attendue.</p>\n<ol type=\"1\">\n<li><p>Une fonction <code>plus_grand(n1, n2)</code> qui <em>renvoie</em> la plus grande valeur de deux valeurs entières données en arguments.</p>\n<div class=\"cell\" data-tags=\"[&quot;correction&quot;]\" data-execution_count=\"1\">\n<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">plus_grand</span><span class=\"p\">(</span><span class=\"n\">n1</span><span class=\"p\">,</span> <span class=\"n\">n2</span><span class=\"p\">):</span>\n<span class=\"k\">    if</span> <span class=\"n\">n1</span> <span class=\"o\">&gt;</span> <span class=\"n\">n2</span><span class=\"p\">:</span>\n<span class=\"k\">        return</span> <span class=\"n\">n1</span>\n<span class=\"c1\">    # le else est facultatif</span>\n<span class=\"k\">    else</span><span class=\"p\">:</span>\n<span class=\"k\">        return</span> <span class=\"n\">n2</span>\n<span></span>\n<span class=\"n\">plus_grand</span><span class=\"p\">(</span><span class=\"mi\">24</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">12</span><span class=\"p\">)</span> <span class=\"c1\"># 24</span>\n</pre></div>\n<div class=\"cell-output cell-output-display\" data-execution_count=\"1\">\n<div class=\"highlight\"><pre><span></span>24\n</pre></div>\n</div>\n</div></li>\n<li><p>Une procédure <code>repete_mot(mot, n)</code> qui <em>affiche</em> un même <code>mot</code> <code>n</code> fois.</p>\n<div class=\"cell\" data-tags=\"[&quot;correction&quot;]\" data-execution_count=\"2\">\n<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">repete_mot</span><span class=\"p\">(</span><span class=\"n\">mot</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n<span class=\"nb\">    print</span><span class=\"p\">(</span><span class=\"n\">mot</span> <span class=\"o\">*</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n<span></span>\n<span class=\"n\">\nrepete_mot</span><span class=\"p\">(</span><span class=\"s2\">\"TO\"</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\"># affiche TOTO , NE RENVOIE RIEN</span>\n</pre></div>\n<div class=\"cell-output cell-output-stdout\">\n<div class=\"highlight\"><pre><span></span>TOTO\n</pre></div>\n</div>\n</div></li>\n<li><p>Écrivez une fonction <code>plus_grand3(n1, n2, n3)</code> qui <em>renvoie</em> le maximum de trois nombres.</p>\n<div class=\"cell\" data-tags=\"[&quot;correction&quot;]\" data-execution_count=\"3\">\n<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">plus_grand3</span><span class=\"p\">(</span><span class=\"n\">n1</span><span class=\"p\">,</span> <span class=\"n\">n2</span><span class=\"p\">,</span> <span class=\"n\">n3</span><span class=\"p\">):</span>\n<span class=\"k\">    if</span> <span class=\"n\">n1</span> <span class=\"o\">&gt;</span> <span class=\"n\">n2</span> <span class=\"ow\">and</span> <span class=\"n\">n1</span> <span class=\"o\">&gt;</span> <span class=\"n\">n3</span><span class=\"p\">:</span>\n<span class=\"k\">        return</span> <span class=\"n\">n1</span>\n<span class=\"k\">    elif</span> <span class=\"n\">n2</span> <span class=\"o\">&gt;</span> <span class=\"n\">n1</span> <span class=\"ow\">and</span> <span class=\"n\">n2</span> <span class=\"o\">&gt;</span> <span class=\"n\">n3</span><span class=\"p\">:</span>\n<span class=\"k\">        return</span> <span class=\"n\">n2</span>\n<span class=\"c1\">    # le else est facultatif</span>\n<span class=\"k\">    else</span><span class=\"p\">:</span>\n<span class=\"k\">        return</span> <span class=\"n\">n3</span>\n<span></span>\n<span class=\"n\">plus_grand3</span><span class=\"p\">(</span><span class=\"mi\">24</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">48</span><span class=\"p\">)</span> <span class=\"c1\"># 48</span>\n</pre></div>\n<div class=\"cell-output cell-output-display\" data-execution_count=\"3\">\n<div class=\"highlight\"><pre><span></span>48\n</pre></div>\n</div>\n</div></li>\n<li><p>Écrivez une fonction <code>carres(n)</code> pour <em>afficher</em> les valeurs des carrés des nombres compris entre 1 et <code>n</code> (les deux inclus).</p>\n<div class=\"cell\" data-tags=\"[&quot;correction&quot;]\" data-execution_count=\"4\">\n<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">carres</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n<span class=\"k\">    for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n<span class=\"nb\">        print</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span></span>\n<span class=\"n\">carres</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"c1\"># affiche 1 4 9 16 25</span>\n</pre></div>\n<div class=\"cell-output cell-output-stdout\">\n<div class=\"highlight\"><pre><span></span>1\n4\n9\n16\n25\n</pre></div>\n</div>\n</div></li>\n<li><p>Écrivez une fonction <code>est_pair(n)</code> pour vérifier si un nombre <code>n</code> donné en argument est pair.</p>\n<p>Cette fonction doit <em>renvoyer</em> un booléen.</p>\n<div class=\"cell\" data-tags=\"[&quot;correction&quot;]\" data-execution_count=\"5\">\n<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">est_pair</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n<span class=\"k\">    if</span> <span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n<span class=\"k\">        return</span> <span class=\"kc\">True</span>\n<span class=\"k\">    else</span><span class=\"p\">:</span>\n<span class=\"k\">        return</span> <span class=\"kc\">False</span>\n<span></span>\n<span class=\"n\">est_pair</span><span class=\"p\">(</span><span class=\"mi\">12345</span><span class=\"p\">)</span> <span class=\"c1\"># renvoie False</span>\n</pre></div>\n<div class=\"cell-output cell-output-display\" data-execution_count=\"5\">\n<div class=\"highlight\"><pre><span></span>False\n</pre></div>\n</div>\n</div></li>\n<li><p>Écrivez une fonction <code>factorielle(n)</code> qui <em>renvoie</em> la factorielle d’un entier naturel <code>n</code>.</p>\n<p>Par définition, la factorielle est le résultat de la multiplication d’un nombre entier par tous les nombres entiers inférieurs à celui-ci.</p>\n<p>exemple: La factorielle de 5, qu’on note 5!, est égale à <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>5</mn><mo>×</mo><mn>4</mn><mo>×</mo><mn>3</mn><mo>×</mo><mn>2</mn><mo>×</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">5\\times4\\times3\\times2\\times1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>\n, soit 120.</p>\n<div class=\"cell\" data-tags=\"[&quot;correction&quot;]\" data-execution_count=\"6\">\n<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">factorielle</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n<span class=\"n\">    res</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"k\">    for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n<span class=\"n\">        res</span> <span class=\"o\">=</span> <span class=\"n\">res</span> <span class=\"o\">*</span> <span class=\"n\">i</span>\n<span class=\"k\">    return</span> <span class=\"n\">res</span>\n<span></span>\n<span class=\"n\">factorielle</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"c1\"># renvoie 120</span>\n</pre></div>\n<div class=\"cell-output cell-output-display\" data-execution_count=\"6\">\n<div class=\"highlight\"><pre><span></span>120\n</pre></div>\n<li><p><strong>Niveau avancé</strong> Écrivez une fonction <code>est_premier(n)</code> qui prend un nombre <code>n</code> en paramètre et vérifie si le nombre est premier ou non. La fonction doit renvoyer un booléen.</p>\n<p>Par définition, un nombre premier est un nombre naturel supérieur à 1 et qui n’a pas de diviseur positif autre que 1 et lui-même.</p></li>\n<li><p><strong>Niveau avancé</strong> Écrivez une fonction <code>triangle_pascal(n)</code> qui affiche les n premières lignes du triangle de Pascal.</p>\n<p>Le triangle de Pascal est une figure arithmétique et géométrique imaginée par Blaise Pascal.</p>\n<p>Exemple de triangle de Pascal:</p>\n<div class=\"quarto-figure quarto-figure-center\">\n<figure class=\"figure\">\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif\" class=\"img-fluid figure-img\"></p>\n<p></p><figcaption class=\"figure-caption\">Triangle de Pascal: Chaque nombre est la somme deux chiffres au-dessus.</figcaption><p></p>\n</figure>\n</div></li>\n\n<h2 id=\"prototyper-des-fonctions\" class=\"anchored\">Prototyper des fonctions</h2>\n<p>Donner le prototype des fonctions</p>\n<ul>\n<li><code>plus_grand(n1, n2)</code>,</li>\n<li><code>repete_mot(mot, n)</code>,</li>\n<li><code>est_pair(n)</code></li>\n</ul>\n<div class=\"cell\" data-tags=\"[&quot;correction&quot;]\" data-execution_count=\"7\">\n<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">plus_grand</span><span class=\"p\">(</span><span class=\"n\">n1</span><span class=\"p\">,</span> <span class=\"n\">n2</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">\"\"\"Renvoie la plus grande valeur de deux valeurs entières</span>\n<span class=\"sd\">    données en arguments</span>\n<span class=\"sd\">    </span>\n<span class=\"sd\">    Paramètres</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    n1: int</span>\n<span class=\"sd\">    n2: int</span>\n<span class=\"sd\">    </span>\n<span class=\"sd\">    Renvoie</span>\n<span class=\"sd\">    -------</span>\n<span class=\"sd\">    int</span>\n<span class=\"sd\">        n1 si n1 &gt; n2 sinon n2</span>\n<span class=\"sd\">    \"\"\"</span>\n<span class=\"k\">    if</span> <span class=\"n\">n1</span> <span class=\"o\">&gt;</span> <span class=\"n\">n2</span><span class=\"p\">:</span>\n<span class=\"k\">        return</span> <span class=\"n\">n1</span>\n<span class=\"c1\">    # le else est facultatif</span>\n<span class=\"k\">    else</span><span class=\"p\">:</span>\n<span class=\"k\">        return</span> <span class=\"n\">n2</span>\n</pre></div></div>\n</div>\n<div class=\"cell\" data-tags=\"[&quot;correction&quot;]\" data-execution_count=\"8\">\n<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">repete_mot</span><span class=\"p\">(</span><span class=\"n\">mot</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">\"\"\"affiche un même mot n fois</span>\n<span class=\"sd\">    </span>\n<span class=\"sd\">    Paramètres</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    mot: str</span>\n<span class=\"sd\">    n: int</span>\n<span class=\"sd\">    </span>\n<span class=\"sd\">    Renvoie</span>\n<span class=\"sd\">    -------</span>\n<span class=\"sd\">    None</span>\n<span class=\"sd\">        pas de valeur renvoyée que des affichages</span>\n<span class=\"sd\">    \"\"\"</span>\n<span class=\"nb\">    print</span><span class=\"p\">(</span><span class=\"n\">mot</span> <span class=\"o\">*</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"cell\" data-tags=\"[&quot;correction&quot;]\" data-execution_count=\"9\">\n<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">est_pair</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">\"\"\"Vérifie si un nombre n donné en argument est pair</span>\n<span class=\"sd\">    </span>\n<span class=\"sd\">    Paramètres</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    n: int</span>\n<span class=\"sd\">    </span>\n<span class=\"sd\">    Renvoie</span>\n<span class=\"sd\">    -------</span>\n<span class=\"sd\">    bool</span>\n<span class=\"sd\">        True si n est pair et False sinon</span>\n<span class=\"sd\">    \"\"\"</span>\n<span class=\"k\">    if</span> <span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n<span class=\"k\">        return</span> <span class=\"kc\">True</span>\n<span class=\"k\">    else</span><span class=\"p\">:</span>\n<span class=\"k\">        return</span> <span class=\"kc\">False</span>\n</pre></div>\n</div>\n<h2 id=\"tests-dassertion\" class=\"anchored\">Tests d’assertion</h2>\n<ol type=\"1\">\n<li><p>Écrire trois tests d’assertion pour les fonctions:</p>\n<ul>\n<li><code>plus_grand(n1, n2)</code>,</li>\n<li><code>est_pair(n)</code></li>\n</ul>\n<div class=\"cell\" data-tags=\"[&quot;correction&quot;]\" data-execution_count=\"10\">\n<div class=\"highlight\"><pre><span></span><span class=\"k\">assert</span> <span class=\"n\">plus_grand</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">10</span>\n<span class=\"k\">assert</span> <span class=\"n\">plus_grand</span><span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">11</span>\n<span class=\"k\">assert</span> <span class=\"n\">plus_grand</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">10</span>\n<span></span>\n<span class=\"k\">assert</span> <span class=\"n\">est_pair</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"kc\">True</span>\n<span class=\"k\">assert</span> <span class=\"n\">est_pair</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"kc\">False</span>\n<span class=\"k\">assert</span> <span class=\"n\">est_pair</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"kc\">True</span>\n</pre></div>\n</div></li>\n<li><p>Expliquer pourquoi on ne peut pas écrire de test d’assertion pour la fonction <code>repete_mot(mot, n)</code>.</p>\n<div class=\"cell\" data-tags=\"[&quot;correction&quot;]\" data-execution_count=\"11\">\n<div class=\"highlight\"><pre><span></span><span class=\"c1\"># assert repete_mot(\"TO\", 2) == \"TOTO\"</span>\n<span class=\"k\">assert</span> <span class=\"n\">repete_mot</span><span class=\"p\">(</span><span class=\"s2\">\"TO\"</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"kc\">None</span>\n</pre></div>\n<div class=\"cell-output cell-output-stdout\">\n<div class=\"highlight\"><pre><span></span>TOTO\n</pre></div>\n</div>\n</div></li>\n</ol>","frontmatter":{"tocHTML":"<ul><li><a href=\"#définir-et-appeler-des-fonctions\" data-localhref=\"true\">Définir et appeler des fonctions</a></li><li><a href=\"#prototyper-des-fonctions\" data-localhref=\"true\">Prototyper des fonctions</a></li><li><a href=\"#tests-dassertion\" data-localhref=\"true\">Tests d’assertion</a></li></ul>"},"fields":{"classe":"1g","chapter":"Fonctions","matter":"nsi","nChapter":"6","part":"Langages et programmation","nPart":"7","type":"exo"}}},"pageContext":{"slug":"1g/nsi/7-langages-et-programmation/6-fonctions/exo"}},"staticQueryHashes":["604483588"],"slicesMap":{}}