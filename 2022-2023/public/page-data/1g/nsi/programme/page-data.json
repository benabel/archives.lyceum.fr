{"componentChunkName":"component---src-templates-programme-md-js","path":"/1g/nsi/programme/","result":{"data":{"markdownRemark":{"html":"<blockquote class=\"blockquote\">\n<p>Ce document est une retranscription non officielle du programme de Numérique et sciences du numérique de première générale applicable à la rentrée 2019. La version officielle est consultable sur <a href=\"http://cache.media.education.gouv.fr/file/CSP/41/2/1e_Numerique_et_sciences_informatiques_Specialite_Voie_G_1025412.pdf\">eduscol</a>.</p>\n</blockquote>\n<h2 id=\"préambule\" class=\"anchored\">Préambule</h2>\n<p>L’enseignement de spécialité de numérique et sciences informatiques du cycle terminal de la voie générale vise l’appropriation des fondements de l’informatique pour préparer les élèves à une poursuite d’études dans l’enseignement supérieur, en les formant à la pratique d’une démarche scientifique et en développant leur appétence pour des activités de recherche.</p>\n<p>L’objectif de cet enseignement, non professionnalisant, est l’appropriation des concepts et des méthodes qui fondent l’informatique, dans ses dimensions scientifiques et techniques. Cet enseignement s’appuie sur l’universalité de quatre concepts fondamentaux et la variété de leurs interactions:</p>\n<ul>\n<li>Les <strong>données</strong>, qui représentent sous une forme numérique unifiée des informations très diverses : textes, images, sons, mesures physiques, sommes d’argent, etc.</li>\n<li>Les <strong>algorithmes</strong>, qui spécifient de façon abstraite et précise des traitements à effectuer sur les données à partir d’opérations élémentaires.</li>\n<li>Les <strong>langages</strong>, qui permettent de traduire les algorithmes abstraits en <strong>programmes</strong> textuels ou graphiques de façon à ce qu’ils soient exécutables par les machines.</li>\n<li>Les <strong>machines</strong>, et leurs systèmes d’exploitation, qui permettent d’exécuter des programmes en enchaînant un grand nombre d’instructions simples, assurant la persistance des données par leur stockage, et de gérer les communications. On y inclut les <strong>objets connectés</strong> et les <strong>réseaux</strong>.</li>\n</ul>\n<p>À ces concepts s’ajoute un élément transversal : les interfaces qui permettent la communication avec les humains, la collecte des données et la commande des systèmes.</p>\n<p>Cet enseignement prolonge les enseignements d’informatique dispensés à l’école primaire, au collège en mathématiques et en technologie et, en seconde, l’enseignement commun de sciences numériques et technologie . Il s’appuie aussi sur l’algorithmique pratiquée en mathématiques en seconde. Il permet de développer des compétences :</p>\n<ul>\n<li>analyser et modéliser un problème en termes de flux et de traitement d’informations ;</li>\n<li>décomposer un problème en sous-problèmes, reconnaître des situations déjà analysées et réutiliser des solutions ;</li>\n<li>concevoir des solutions algorithmiques ;</li>\n<li>traduire un algorithme dans un langage de programmation, en spécifier les interfaces et les interactions, comprendre et réutiliser des codes sources existants, développer des processus de mise au point et de validation de programmes ;</li>\n<li>mobiliser les concepts et les technologies utiles pour assurer les fonctions d’acquisition, de mémorisation, de traitement et de diffusion des informations ;</li>\n<li>développer des capacités d’abstraction et de généralisation.</li>\n</ul>\n<p>Cet enseignement a vocation à multiplier les occasions de mise en activité des élèves, sous des <strong>formes variées</strong> qui permettent de développer des compétences transversales :</p>\n<ul>\n<li>faire preuve d’autonomie, d’initiative et de créativité ;</li>\n<li>présenter un problème ou sa solution, développer une argumentation dans le cadre d’un débat ;</li>\n<li>coopérer au sein d’une équipe dans le cadre d’un projet ;</li>\n<li>rechercher de l’information, partager des ressources ;</li>\n<li>faire un usage responsable et critique de l’informatique.</li>\n</ul>\n<p>La progression peut suivre un rythme annuel construit autour de périodes spécifiques favorisant une alternance entre divers types d’activités.</p>\n<p>Cet enseignement contribue à l’acquisition des compétences numériques qui font l’objet d’une certification en fin de cycle terminal.</p>\n<p>Comme tous les enseignements, cette spécialité contribue au développement des compétences orales à travers notamment la pratique de l’argumentation. Celle-ci conduit à préciser sa pensée et à expliciter son raisonnement de manière à convaincre. Elle permet à chacun de faire évoluer sa pensée, jusqu’à la remettre en cause si nécessaire, pour accéder progressivement à la vérité par la preuve. Si ces considérations sont valables pour tous les élèves, elles prennent un relief particulier pour ceux qui choisiront de poursuivre cet enseignement de spéciali té en terminale et qui ont à préparer l’épreuve orale terminale du baccalauréat. Il convient que les travaux proposés aux élèves y contribuent dès la classe de première.</p>\n<h2 id=\"démarche-de-projet\" class=\"anchored\">Démarche de projet</h2>\n<p>Un enseignement d’informatique ne saurait se réduire à une présentation de concepts ou de méthodes sans permettre aux élèves de se les approprier en développant des projets applicatifs.</p>\n<p>Une part de l’horaire de l’enseignement d’au moins un quart du total en classe de première doit être réservée à la conception et à l’élaboration de projets conduits par des groupes de deux à quatre élèves.</p>\n<p>Les projets réalisés par les élèves, sous la conduite du professeur, constituent un apprentissage fondamental tant pour la compréhension de l’informatique que pour l’acquisition de compétences. En classe de première comme en classe terminale, ils peuvent porter sur des problématiques issues d’autres disciplines et ont essentiellement pour but d’imaginer des solutions répondant à l’expression d’un besoin ; dans la mesure du possible, il convient de laisser le choix du thème du projet aux élèves eux-mêmes. Il peut s’agir d’un approfondissement théorique des concepts étudiés en commun, d’une application à d’autres disciplines telle qu’une simulation d’expérience, d’un travail sur des données socioéconomiques, du développement d’un logiciel de lexicographie, d’un projet autour d’un objet connecté ou d’un robot, de la conception d’une bibliothèque implémentant une structure de données complexe, d’un problème de traitement d’image ou de son, d’une application mobile, par exemple de réalité virtuelle ou augmentée, du développement d’un site Web associé à l’utilisation d’une base de données, de la réalisation d’un interprète d’un mini-langage, d ’un programme de jeu de stratégie, etc.</p>\n<p>La gestion d’un projet inclut des points d’étape pour faire un bilan avec le professeur, valider des éléments, contrôler l’avancement du projet ou adapter ses objectifs, voire le redéfinir partiellement, afin de maintenir la motivation des élèves.</p>\n<p>Les professeurs veillent à ce que les projets restent d’une ambition raisonnable afin de leur permettre d’aboutir.</p>\n<h2 id=\"modalités-de-mise-en-œuvre\" class=\"anchored\">Modalités de mise en œuvre</h2>\n<p>Les activités pratiques et la réalisation de projets supposent, pour chaque élève, l’accès à un équipement relié à internet.</p>\n<p>Un langage de programmation est nécessaire pour l’écriture des programmes : un langage simple d’usage, interprété, concis, libre et gratuit, multiplateforme, largement répandu, riche de bibliothèques adaptées et bénéficiant d’une vaste communauté d’auteurs dans le monde éducatif est à privilégier. Au moment de la conception de ce programme, le langage choisi est Python version 3 (ou supérieure). L’expertise dans tel ou tel langage de programmation n’est cependant pas un objectif de formation.</p>\n<h2 id=\"éléments-de-programme\" class=\"anchored\">Éléments de programme</h2>\n<p>Le programme est organisé autour de huit rubriques. Il ne constitue cependant pas un plan de cours. Il appartient aux professeurs de choisir leur progression, sans faire de chaque partie un tout insécable et indépendant des autres. Au contraire, les mêmes notions peuvent être développées et éclairées dans différentes rubriques, en mettant en lumière leurs interactions.</p>\n<h3 id=\"histoire-de-linformatique\" class=\"anchored\">Histoire de l’informatique</h3>\n<p>Cette rubrique transversale se décline dans chacune des sept autres.</p>\n<p>Comme toute connaissance scientifique et technique, les concepts de l’informatique ont une histoire et ont été forgés par des personnes. Les algorithmes sont présents dès l’Antiquité, les machines à calculer apparaissent progressivement au XVII e siècle, les sciences de l’information sont fondées au XIX e siècle, mais c’est en 1936 qu’apparaît le concept de machine universelle, capable d’exécuter tous les algorithmes, et que les notions de machine, algorithme, langage et information sont pensées comme un tout cohérent. Les premiers ordinateurs ont été construits en 1948 et leur puissance a ensuite évolué exponentiellement. Parallèlement, les ordinateurs se sont diversifiés dans leur taille, leur forme et leur emploi : téléphones, tablettes, montres connectées, ordinateurs personnels, serveurs, fermes de calcul, méga-ordinateurs. Le réseau internet, développé depuis 1969, relie aujourd’hui ordinateurs et objets connectés.</p>\n<table class=\"table table-bordered table-hover\">\n<thead class=\"table-warning\">\n<tr class=\"header\">\n<th>Contenus</th>\n<th>Capacités attendues</th>\n<th>Commentaires</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>Événements clés de l’histoire de l’informatique</td>\n<td>Situer dans le temps les principaux événements de l’histoire de l’informatique et leurs protagonistes.</td>\n<td>Ces repères historiques seront construits au fur et à mesure de la présentation des concepts et techniques.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"représentation-des-données-types-et-valeurs-de-base\" class=\"anchored\">Représentation des données : types et valeurs de base</h3>\n<p>Toute machine informatique manipule une représentation des données dont l’unité minimale est le bit 0/1, ce qui permet d’unifier logique et calcul. Les données de base sont représentées selon un codage dépendant de leur nature : entiers, flottants, caractères et chaînes de caractères. Le codage conditionne la taille des différentes valeurs en mémoire.</p>\n<table class=\"table table-bordered table-hover\">\n<thead class=\"table-warning\">\n<tr class=\"header\">\n<th>Contenus</th>\n<th>Capacités attendues</th>\n<th>Commentaires</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>Écriture d’un entier positif dans une base b ⩾ 2</td>\n<td>Passer de la représentation d’une base dans une autre.</td>\n<td>Les bases 2, 10 et 16 sont privilégiées.</td>\n</tr>\n<tr class=\"even\">\n<td>Représentation binaire d’un entier relatif</td>\n<td>Évaluer le nombre de bits nécessaires à l’écriture en base 2 d’un entier, de la somme ou du produit de deux nombres entiers. Utiliser le complément à 2.</td>\n<td>Il s’agit de décrire les tailles courantes des entiers (8, 16, 32 ou 64 bits). Il est possible d’évoquer la représentation des entiers de taille arbitraire de Python.</td>\n</tr>\n<tr class=\"odd\">\n<td>Représentation approximative des nombres réels : notion de nombre flottant</td>\n<td>Représentation approximative des nombres réels : notion de nombre flottant</td>\n<td>0.2 + 0.1 n’est pas égal à 0.3. Il faut éviter de tester l’égalité de deux flottants. Aucune connaissance précise de la norme IEEE-754 n’est exigible.</td>\n</tr>\n<tr class=\"even\">\n<td><p>Valeurs booléennes : <code>0</code>, <code>1</code>.</p>\n<p>Opérateurs booléens : <code>and</code>, <code>or</code>, <code>not</code>.</p>\n<p>Expressions booléennes</p></td>\n<td>Dresser la table d’une d’une expression booléenne.</td>\n<td><p>Le ou exclusif (<code>xor</code>) est évoqué.</p>\n<p>Quelques applications directes comme l’addition binaire sont présentées.</p>\n<p>L’attention des élèves est attirée sur le caractère séquentiel de certains opérateurs booléens.</p></td>\n</tr>\n<tr class=\"odd\">\n<td><p>Représentation d’un texte en machine.</p>\n<p>Exemples des encodages <code>ASCII</code>, <code>ISO-8859-1</code>, <code>Unicode</code></p></td>\n<td><p>Identifier l’intérêt des différents systèmes d’encodage.</p>\n<p>Convertir un fichier texte dans différents formats d’encodage.</p></td>\n<td>Aucune connaissance précise des normes d’encodage n’est exigible</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"représentation-des-données-types-construits\" class=\"anchored\">Représentation des données : types construits</h3>\n<p>À partir des types de base se constituent des types construits, qui sont introduits au fur et à mesure qu’ils sont nécessaires. Il s’agit de présenter tour à tour les p-uplets ( tuples), les enregistrements qui collectent des valeurs de types différents dans des champs nommés et les tableaux qui permettent un accès calculé direct aux éléments. En pratique, on utilise les appellations de Python, qui peuvent être différentes de celles d’autres langages de programmation.</p>\n<table class=\"table table-bordered table-hover\">\n<thead class=\"table-warning\">\n<tr class=\"header\">\n<th>Contenus</th>\n<th>Capacités attendues</th>\n<th>Commentaires</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>p-uplets. p-uplets nommés</td>\n<td>Écrire une fonction renvoyant un p-uplet de valeurs.</td>\n<td></td>\n</tr>\n<tr class=\"even\">\n<td>Tableau indexé, tableau donné en compréhension</td>\n<td><p>Lire et modifier les éléments d’un tableau grâce à leurs index.</p>\n<p>Constuire un tableau par compréhension.</p>\n<p>Utiliser des tableaux de tableaux pour représenter des matrices, notation <code>a[i][j]</code></p>\n<p>Itérer sur les éléments d’un tableau.</p></td>\n<td><p>Seuls les tableaux dont les éléments sont du même type sont présentés.</p>\n<p>Aucune connaissance des tranches (slices) n’est exigible.</p>\n<p>L’aspect dynamique des tableaux de Python n’est pas évoqué.</p>\n<p>Python identifie listes et tableaux.</p>\n<p>Il n’est pas fait référence aux tableaux de la bibliothèque NumPy.</p></td>\n</tr>\n<tr class=\"odd\">\n<td>Dictionnaires par clés et valeurs</td>\n<td><p>Construire une entrée de dictionnaire</p>\n<p>Itérer sur les éléments d’un dictionnaire.</p></td>\n<td><p>Il est possible de présenter les données EXIF d’une image sous la forme d’un enregistrement.</p>\n<p>En Python, les p-uplets nommés sont implémentés par des dictionnaires.</p>\n<p>Utiliser les méthodes <code>keys()</code>, <code>values()</code> et <code>items()</code></p></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"traitement-de-données-en-tables\" class=\"anchored\">Traitement de données en tables</h3>\n<p>Les données organisées en table correspondent à une liste de p-uplets nommés qui partagent les mêmes descripteurs. La mobilisation de ce type de structure de données permet de préparer les élèves à aborder la notion de base de données qui ne sera présentée qu’en classe terminale. Il s’agit d’utiliser un tableau doublement indexé ou un tableau de p-uplets, dans un langage de programmation ordinaire et non dans un système de gestion de bases de données.</p>\n<table class=\"table table-bordered table-hover\">\n<thead class=\"table-warning\">\n<tr class=\"header\">\n<th>Contenus</th>\n<th>Capacités attendues</th>\n<th>Commentaires</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>Indexation de tables</td>\n<td>Importer une table depuis un fichier texte tabulé ou un fichier CSV.</td>\n<td>Est utilisé un tableau doublement indexé ou un tableau de p-uplets qui partagent les mêmes descripteurs.</td>\n</tr>\n<tr class=\"even\">\n<td>Recherche dans une table</td>\n<td>Rechercher les lignes d’une table vérifiant des critères exprimés en logique propositionnelle.</td>\n<td>La recherche de doublons, les tests de cohérence d’une table sont présentés.</td>\n</tr>\n<tr class=\"odd\">\n<td>Tri d’une table</td>\n<td>Trier une table suivant une colonne.</td>\n<td>Une fonction de tri intégrée au système ou à une bibliothèque peut être utilisée.</td>\n</tr>\n<tr class=\"even\">\n<td>Fusion de tables</td>\n<td>Construire une nouvelle table en combinant les données de deux tables.</td>\n<td>La notion de domaine de valeurs est mise en évidence.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"interactions-entre-lhomme-et-la-machine-sur-le-web\" class=\"anchored\">Interactions entre l’homme et la machine sur le <em>Web</em></h3>\n<p>Lors de la navigation sur le Web, les internautes interagissent avec leur machine par le biais des pages Web.</p>\n<p>L’Interface Homme-Machine (IHM) repose sur la gestion d’événements associés à des éléments graphiques munis de méthodes algorithmiques.</p>\n<p>La compréhension du dialogue client-serveur déjà abordé en classe de seconde est consolidée, sur des exemples simples, en identifiant les requêtes du client, les calculs puis les réponses du serveur traitées par le client.</p>\n<p>Il ne s’agit pas de décrire exhaustivement les différents éléments disponibles, ni de développer une expertise dans les langages qui permettent de mettre en œuvre le dialogue tels que <code>PHP</code> ou <code>JavaScript</code>.</p>\n<table class=\"table table-bordered table-hover\">\n<thead class=\"table-warning\">\n<tr class=\"header\">\n<th>Contenus</th>\n<th>Capacités attendues</th>\n<th>Commentaires</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td><p>Modalités de l’interaction entre l’homme et la machine</p>\n<p>Événements</p></td>\n<td><p>Identifier les différents composants graphiques permettant d’interagir avec une application Web</p>\n<p>Identifier les événements que les fonctions associées aux différents composants graphiques sont capables de traiter</p></td>\n<td>Il s’agit d’examiner le code HTML d’une page comprenant des composants graphiques et de distinguer ce qui relève de la description des composants graphiques en HTML de leur comportement (réaction aux événements) programmé par exemple en JavaScript.</td>\n</tr>\n<tr class=\"even\">\n<td>Interaction avec l’utilisateur dans une page Web</td>\n<td>Analyser et modifier les méthodes exécutées lors d’un clic sur un bouton d’une page Web.</td>\n<td></td>\n</tr>\n<tr class=\"odd\">\n<td><p>Interaction client- serveur.</p>\n<p>Requêtes HTTP, réponses du serveur</p></td>\n<td><p>Distinguer ce qui est exécuté sur le client ou sur le serveur et dans quel ordre.</p>\n<p>Distinguer ce qui est mémorisé dans le client et retransmis au serveur.</p>\n<p>Reconnaître quand et pourquoi la transmission est chiffrée.</p></td>\n<td>Il s’agit de faire le lien avec ce qui a été vu en classe de seconde et d’expliquer comment on peut passer des paramètres à un site grâce au protocole HTTP.</td>\n</tr>\n<tr class=\"even\">\n<td>Formulaire d’une page Web</td>\n<td><p>Analyser le fonctionnement d’un formulaire simple.</p>\n<p>Distinguer les transmissions de paramètres par les requêtes POST ou GET.</p></td>\n<td>Discuter les deux types de requêtes selon le type des valeurs à transmettre et/ou leur confidentialité.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"architectures-matérielles-et-systèmes-dexploitation\" class=\"anchored\">Architectures matérielles et systèmes d’exploitation</h3>\n<p>Exprimer un algorithme dans un langage de programmation a pour but de le rendre exécutable par une machine dans un contexte donné. La découverte de l’architecture des machines et de leur système d’exploitation constitue une étape importante.</p>\n<p>Les circuits électroniques sont au cœur de toutes les machines informatiques. Les réseaux permettent de transmettre l’information entre machines. Les systèmes d’exploitation gèrent et optimisent l’ensemble des fonctions de la machine, de l’exécution des programmes aux entrées-sorties et à la gestion d’énergie.</p>\n<p>On étudie aussi le rôle des capteurs et actionneurs dans les entrées-sorties clavier, interfaces graphiques et tactiles, dispositifs de mesure physique, commandes de machines, etc.</p>\n<table class=\"table table-bordered table-hover\">\n<thead class=\"table-warning\">\n<tr class=\"header\">\n<th>Contenus</th>\n<th>Capacités attendues</th>\n<th>Commentaires</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>Modèle d’architecture séquentielle (von Neumann)</td>\n<td><p>Distinguer les rôles et les caractéristiques des différents constituants d’une machine.</p>\n<p>Dérouler l’exécution d’une séquence d’instructions simples du type langage machine.</p></td>\n<td><p>La présentation se limite aux concepts généraux.</p>\n<p>On distingue les architectures monoprocesseur et les architectures multiprocesseur.</p>\n<p>Des activités débranchées sont proposées.</p>\n<p>Les circuits combinatoires réalisent des fonctions booléennes.</p></td>\n</tr>\n<tr class=\"even\">\n<td><p>Transmission de données dans un réseau</p>\n<p>Protocoles de communication</p>\n<p>Architecture d’un réseau</p></td>\n<td><p>Mettre en évidence l’intérêt du découpage des données en paquets et de leur encapsulation.</p>\n<p>Dérouler le fonctionnement d’un protocole simple de récupération de perte de paquets(bit alterné).</p>\n<p>Simuler ou mettre en œuvre un réseau.</p></td>\n<td><p>Le protocole peut être expliqué et simulé en mode débranché.</p>\n<p>Le lien est fait avec ce qui a été vu en classe de seconde sur le protocole TCP/IP.</p>\n<p>Le rôle des différents constituants du réseau local de l’établissement est présenté.</p></td>\n</tr>\n<tr class=\"odd\">\n<td>Systèmes d’exploitation</td>\n<td><p>Identifier les fonctions d’un système d’exploitation.</p>\n<p>Utiliser les commandes de base en ligne de commande.</p>\n<p>Gérer les droits et permissions d’accès aux fichiers.</p></td>\n<td><p>Les différences entre systèmes d’exploitation libres et propriétaires sont évoquées.</p>\n<p>Les élèves utilisent un système d’exploitation libre.</p>\n<p>Il ne s’agit pas d’une étude théorique des systèmes d’exploitation.</p></td>\n</tr>\n<tr class=\"even\">\n<td><p>Périphériques d’entrée et de sortie</p>\n<p>Interface Homme- Machine (IHM)</p></td>\n<td><p>Identifier le rôle des capteurs et actionneurs.</p>\n<p>Réaliser par programmation une IHM répondant à un cahier des charges donné.</p></td>\n<td>Les activités peuvent être développées sur des objets connectés, des systèmes embarqués ou robots.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"langages-et-programmation\" class=\"anchored\">Langages et programmation</h3>\n<p>Les langages de programmation Turing-complets sont caractérisés par un corpus de « constructions élémentaires ». Sans introduire cette terminologie, il s’agit de montrer qu’il existe de nombreux langages de programmation, différents par leur style (impératif, fonctionnel, objet, logique, événementiel, etc.), ainsi que des langages formalisés de description ou de requêtes qui ne sont pas des langages de programmation.</p>\n<p>L’importance de la spécification, de la documentation et des tests est à présenter, ainsi que l’intérêt de la modularisation qui permet la réutilisation de programmes et la mise à disposition de bibliothèques. Pour les programmes simples écrits par les élèves, on peut se contenter d’une spécification rapide mais précise.</p>\n<table class=\"table table-bordered table-hover\">\n<thead class=\"table-warning\">\n<tr class=\"header\">\n<th>Contenus</th>\n<th>Capacités attendues</th>\n<th>Commentaires</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>Constructions élémentaires</td>\n<td>Mettre en évidence un corpus de constructions élémentaires. boucles non bornées, appels de fonction.</td>\n<td>Séquences, affectation, conditionnelles, boucles bornées,</td>\n</tr>\n<tr class=\"even\">\n<td>Diversité et unité des langages de programmation</td>\n<td>Repérer, dans un nouveau langage de programmation, les traits communs et les traits particuliers à ce langage.</td>\n<td>Les manières dont un même programme simple s’écrit dans différents langages sont comparées.</td>\n</tr>\n<tr class=\"odd\">\n<td>Spécification</td>\n<td><p>Prototyper une fonction.</p>\n<p>Décrire les préconditions sur les arguments.</p>\n<p>Décrire des postconditions sur les résultats.</p></td>\n<td>Des assertions peuvent être utilisées pour garantir des préconditions ou des postconditions.</td>\n</tr>\n<tr class=\"even\">\n<td>Mise au point de programmes</td>\n<td>Utiliser des jeux de tests.</td>\n<td><p>L’importance de la qualité et du nombre des tests est mise en évidence.</p>\n<p>Le succès d’un jeu de tests ne garantit pas la correction d’un programme.</p></td>\n</tr>\n<tr class=\"odd\">\n<td>Utilisation de bibliothèques</td>\n<td>Utiliser la documentation d’une bibliothèque.</td>\n<td>Aucune connaissance exhaustive d’une bibliothèque particulière n’est exigible.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"algorithmique\" class=\"anchored\">Algorithmique</h3>\n<p>Le concept de méthode algorithmique est introduit ; de nouveaux exemples seront vus en terminale. Quelques algorithmes classiques sont étudiés. L’étude de leurs coûts respectifs prend tout son sens dans le cas de données nombreuses, qui peuvent être préférentiellement des données ouvertes.</p>\n<p>Il est nécessaire de montrer l’intérêt de prouver la correction d’un algorithme pour lequel on dispose d’une spécification précise, notamment en mobilisant la notion d’invariant sur des exemples simples. L a nécessité de prouver la terminaison d’un programme est mise en évidence dès qu’on utilise une boucle non bornée (ou, en terminale, des fonctions récursives) grâce à la mobilisation de la notion de variant sur des exemples simples.</p>\n<table class=\"table table-bordered table-hover\">\n<thead class=\"table-warning\">\n<tr class=\"header\">\n<th>Contenus</th>\n<th>Capacités attendues</th>\n<th>Commentaires</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>Parcours séquentiel d’un tableau</td>\n<td><p>Écrire un algorithme de recherche d’une occurence sur des valeurs de type quelconque</p>\n<p>Écrire un algorithme de recherche d’un extremum, de calcul d’une moyenne.</p></td>\n<td>On montre que le coût est linéaire</td>\n</tr>\n<tr class=\"even\">\n<td>Tris par insertion, par sélection</td>\n<td><p>Écrire un algorithme de tri.</p>\n<p>Décrire un invariant de boucle qui prouve la correction des tris par insertion, par sélection.</p></td>\n<td><p>La terminaison de ces algorithmes est à justifier.</p>\n<p>On montre que leur coût est quadratique dans le pire cas.</p></td>\n</tr>\n<tr class=\"odd\">\n<td>Algorithme des k plus proches voisins</td>\n<td>Écrire un algorithme qui prédit la classe d’un élément en fonction de la classe majoritaire de ses k plus proches voisins.</td>\n<td>Il s’agit d’un exemple d’algorithme d’apprentissage.</td>\n</tr>\n<tr class=\"even\">\n<td>Recherche dichotomique dans un tableau trié</td>\n<td>Montrer la terminaison de la recherche dichotomique à l’aide d’un variant de boucle.</td>\n<td><p>Des assertions peuvent être utilisées.</p>\n<p>La preuve de la correction peut être présentée par le professeur.</p></td>\n</tr>\n<tr class=\"odd\">\n<td>Algorithmes gloutons</td>\n<td>Résoudre un problème grâce à un algorithme glouton.</td>\n<td><p>Exemples : problèmes du sac à dos ou du rendu de monnaie.</p>\n<p>Les algorithmes gloutons constituent une méthode algorithmique parmi d’autres qui seront vues en terminale.</p></td>\n</tr>\n</tbody>\n</table>","frontmatter":{"tocHTML":"<ul><li><a href=\"#préambule\" data-localhref=\"true\">Préambule</a></li><li><a href=\"#démarche-de-projet\" data-localhref=\"true\">Démarche de projet</a></li><li><a href=\"#modalités-de-mise-en-œuvre\" data-localhref=\"true\">Modalités de mise en œuvre</a></li><li><a href=\"#éléments-de-programme\" data-localhref=\"true\">Éléments de programme</a></li><ul><li><a href=\"#histoire-de-linformatique\" data-localhref=\"true\">Histoire de l’informatique</a></li><li><a href=\"#représentation-des-données-types-et-valeurs-de-base\" data-localhref=\"true\">Représentation des données : types et valeurs de base</a></li><li><a href=\"#représentation-des-données-types-construits\" data-localhref=\"true\">Représentation des données : types construits</a></li><li><a href=\"#traitement-de-données-en-tables\" data-localhref=\"true\">Traitement de données en tables</a></li><li><a href=\"#interactions-entre-lhomme-et-la-machine-sur-le-web\" data-localhref=\"true\">Interactions entre l’homme et la machine sur le <em>Web</em></a></li><li><a href=\"#architectures-matérielles-et-systèmes-dexploitation\" data-localhref=\"true\">Architectures matérielles et systèmes d’exploitation</a></li><li><a href=\"#langages-et-programmation\" data-localhref=\"true\">Langages et programmation</a></li><li><a href=\"#algorithmique\" data-localhref=\"true\">Algorithmique</a></li></ul></ul>"},"fields":{"classe":"1g","matter":"nsi","slug":"1g/nsi/programme"}}},"pageContext":{"slug":"1g/nsi/programme"}},"staticQueryHashes":["604483588"],"slicesMap":{}}