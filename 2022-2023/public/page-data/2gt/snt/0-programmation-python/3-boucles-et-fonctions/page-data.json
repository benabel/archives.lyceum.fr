{"componentChunkName":"component---src-templates-cours-md-js","path":"/2gt/snt/0-programmation-python/3-boucles-et-fonctions/","result":{"data":{"markdownRemark":{"html":"<details class=\"programme\"><summary>Programme Officiel</summary>\n<table class=\"table table-bordered table-hover\">\n<thead class=\"table-warning\">\n<tr class=\"header\">\n<th><div class=\"highlight\"><pre><span></span>       **Contenus**\n</pre></div>\n</th>\n<th><div class=\"highlight\"><pre><span></span>            **Capacités attendues**\n</pre></div>\n</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td><p>Boucles bornées et non bornées</p>\n<p>Définitions et appels de fonctions</p></td>\n<td>Écrire et développer des programmes pour répondre à des problèmes et modéliser des phénomènes physiques, économiques et sociaux.</td>\n</tr>\n</tbody>\n</table>\n<a class=\"lien-programme\" href=\"../programme/\">Lien vers le programme complet</a></details>\n<div class=\"intro quarto-layout-panel\">\n<div class=\"quarto-layout-row quarto-layout-valign-top\">\n<div class=\"quarto-layout-cell\" style=\"flex-basis: 50.0%;justify-content: center;\">\n<p>Dans ce chapitre, nous allons nous intéresser aux boucles qui permettent de <strong>répéter</strong> des instructions dans un programme, ainsi qu’aux fonctions qui permettent d’exécuter des portions de programme à la demande.</p>\n</div>\n<div class=\"quarto-layout-cell\" style=\"flex-basis: 50.0%;justify-content: center;\">\n<p><wc-wikimage title=\"RepeatUntil.svg\" caption=\"Il existe deux types de boucles, les boucles bornées et le boucles non bornées.\"></wc-wikimage></p>\n</div>\n</div>\n</div>\n<h2 id=\"les-boucles\" class=\"anchored\">Les boucles</h2>\n<p>Les boucles permettent de <strong>répéter</strong> des blocs d’instructions.</p>\n<p>Il en existe deux types:</p>\n<ul>\n<li>Les boucles bornées avec le mot-clé <code>for</code>.</li>\n<li>Les boucles non bornées avec le mot-clé <code>while</code>.</li>\n</ul>\n<h3 id=\"les-boucles-bornées-for\" class=\"anchored\">Les boucles bornées: <code>for</code></h3>\n<p>Lorsqu’<em>on connait le nombre de répétitions</em> à effectuer, on utilise la boucle <code>for</code> associée à la fonction <code>range()</code>.</p>\n<div class=\"example\">\n<p>Pour répéter 7 fois un bloc d’instructions, on utilise:</p>\n<div class=\"cell\" data-execution_count=\"1\">\n<div class=\"highlight\"><pre><span></span><span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">):</span>\n<span class=\"nb\">    print</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n</pre></div>\n<div class=\"cell-output cell-output-stdout\">\n<div class=\"highlight\"><pre><span></span>0\n1\n2\n3\n4\n5\n6\n</pre></div>\n</div>\n</div>\n</div>\n<details class=\"plus\"><summary>&nbsp;</summary>\n<p>On peut aussi réaliser des boucles sur des types construits qui seront vus en <a href=\"/1g/nsi/3-representation-des-donnees-types-construits\">première</a>.</p>\n<ul>\n<li><p>Sur des chaînes de caractères:</p>\n<div class=\"cell\" data-execution_count=\"2\">\n<div class=\"highlight\"><pre><span></span><span class=\"k\">for</span> <span class=\"n\">lettre</span> <span class=\"ow\">in</span> <span class=\"s2\">\"Bonjour!\"</span><span class=\"p\">:</span>\n<span class=\"nb\">    print</span><span class=\"p\">(</span><span class=\"n\">lettre</span><span class=\"p\">)</span>\n</pre></div>\n<div class=\"cell-output cell-output-stdout\">\n<div class=\"highlight\"><pre><span></span>B\no\nn\nj\no\nu\nr\n!\n</pre></div>\n</div>\n</div></li>\n<li><p>Sur des listes:</p>\n<div class=\"cell\" data-execution_count=\"3\">\n<div class=\"highlight\"><pre><span></span><span class=\"k\">for</span> <span class=\"n\">premier</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">]:</span>\n<span class=\"nb\">    print</span><span class=\"p\">(</span><span class=\"n\">premier</span><span class=\"p\">)</span>\n</pre></div>\n<div class=\"cell-output cell-output-stdout\">\n<div class=\"highlight\"><pre><span></span>2\n3\n5\n7\n11\n13\n</pre></div>\n</div>\n</div></li>\n</ul>\n</details>\n<h3 id=\"les-boucles-non-bornées-while\" class=\"anchored\">Les boucles non bornées: <code>while</code></h3>\n<p>Lorsqu’<em>on ne connait pas le nombre de répétitions</em> à effectuer, on utilise la boucle <code>while</code> associée à une <em>variable de contrôle</em>.</p>\n<div class=\"example\">\n<p>Voici un programme qui permet de vérifier la saisie d’un mot de passe par un utilisateur.</p>\n<div class=\"highlight\"><pre><span></span><span class=\"n\">mdp</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"</span>                <span class=\"c1\"># initialisation</span>\n<span class=\"k\">while</span> <span class=\"n\">mdp</span> <span class=\"o\">!=</span> <span class=\"s2\">\"azerty\"</span><span class=\"p\">:</span>  <span class=\"c1\"># condition d'arrêt de la boucle</span>\n<span class=\"n\">    mdp</span> <span class=\"o\">=</span> <span class=\"nb\">input</span><span class=\"p\">(</span><span class=\"s2\">\"Entrez votre mot de passe.\"</span><span class=\"p\">)</span>   <span class=\"c1\"># mise à jour de</span>\n<span class=\"c1\">                                                # la variable de boucle</span>\n<span></span>\n<span class=\"c1\"># On sort de la boucle</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Vous êtes connecté\"</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"callout callout-style-default callout-caution callout-captioned\">\n<div class=\"callout-header d-flex align-content-center\">\n<div class=\"callout-icon-container\">\n<i class=\"callout-icon\"></i>\n</div>\n<div class=\"callout-caption-container flex-fill\">\nMise en garde\n</div>\n</div>\n<div class=\"callout-body-container callout-body\">\n<p>Attention à bien vérifier que votre boucle finira par se terminer sinon votre programme rentrera dans une boucle infinie, et il faudra obligatoirement le stopper.</p>\n</div>\n</div>\n<h2 id=\"les-fonctions\" class=\"anchored\">Les fonctions</h2>\n<p>Il s’agit de blocs d’instructions exécutés à la demande, on les définit par le mot-clef <code>def</code>.</p>\n<div class=\"example\">\n<div class=\"cell\" data-execution_count=\"4\">\n<div class=\"highlight\"><pre><span></span><span class=\"c1\"># définition de la fonction</span>\n<span class=\"k\">def</span> <span class=\"nf\">dit_bonjour</span><span class=\"p\">(</span><span class=\"n\">prenom</span><span class=\"p\">):</span>\n<span class=\"nb\">    print</span><span class=\"p\">(</span><span class=\"s2\">\"Bonjour \"</span> <span class=\"o\">+</span> <span class=\"n\">prenom</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Nous venons de définir la fonction, mais pour l’instant, il ne se passe rien.</p>\n<p>Pour exécuter le code de la fonction, il faut maintenant appeler la fonction avec un paramètre pour l’exécuter.</p>\n<div class=\"cell\" data-execution_count=\"5\">\n<div class=\"highlight\"><pre><span></span><span class=\"c1\"># appel de la fonction avec l'argument Ada</span>\n<span class=\"n\">dit_bonjour</span><span class=\"p\">(</span><span class=\"s2\">\"Ada\"</span><span class=\"p\">)</span>\n</pre></div>\n<div class=\"cell-output cell-output-stdout\">\n<div class=\"highlight\"><pre><span></span>Bonjour Ada\n</pre></div>\n</div>\n</div>\n</div>\n<h3 id=\"renvoyer-une-valeur-avec-return\" class=\"anchored\">Renvoyer une valeur avec <code>return</code></h3>\n<p>Au lieu d’afficher une valeur, il est préférable de <em>renvoyer</em> une valeur grâce au mot-clé <code>return</code>.</p>\n<div class=\"example\">\n<div class=\"cell\" data-execution_count=\"6\">\n<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">périmètre</span><span class=\"p\">(</span><span class=\"n\">rayon</span><span class=\"p\">):</span>\n<span class=\"n\">    p</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"mf\">3.14</span><span class=\"o\">*</span><span class=\"n\">rayon</span>\n<span class=\"k\">    return</span> <span class=\"n\">p</span>\n</pre></div>\n</div>\n<p>Cette fois-ci l’appel renverra la valeur du périmètre, on peut alors l’affecter à une variable.</p>\n<div class=\"cell\" data-execution_count=\"7\">\n<div class=\"highlight\"><pre><span></span><span class=\"c1\"># on appelle la fonction avec l'argument 0.5</span>\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">périmètre</span><span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>\n</pre></div>\n<div class=\"cell-output cell-output-stdout\">\n<div class=\"highlight\"><pre><span></span>3.14\n</pre></div>\n</div>\n</div>\n</div>\n<h3 id=\"les-paramètres-de-fonction\" class=\"anchored\">Les paramètres de fonction</h3>\n<p>Une fonction peut accepter un nombre quelconque de paramètres, il suffit de les séparer par des virgules.</p>\n<div class=\"examples\">\n<p>Avec deux paramètres.</p>\n<div class=\"cell\" data-execution_count=\"8\">\n<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">surface_rectangle</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">L</span><span class=\"p\">):</span>\n<span class=\"k\">    return</span> <span class=\"n\">l</span><span class=\"o\">*</span><span class=\"n\">L</span>\n<span class=\"c1\"># appel</span>\n<span class=\"n\">surface_rectangle</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"c1\"># renvoie 6</span>\n</pre></div>\n<div class=\"cell-output cell-output-display\" data-execution_count=\"8\">\n<div class=\"highlight\"><pre><span></span>6\n</pre></div>\n</div>\n</div>\n<p>Avec aucun paramètre:</p>\n<div class=\"cell\" data-execution_count=\"9\">\n<div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"k\">def</span> <span class=\"nf\">affiche_heure</span><span class=\"p\">():</span>\n<span class=\"nb\">    print</span><span class=\"p\">(</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">asctime</span><span class=\"p\">())</span>\n<span></span>\n<span class=\"c1\"># Pour l'appel on met les parénthèses même s'il n'y a pas d'arguments</span>\n<span class=\"n\">affiche_heure</span><span class=\"p\">()</span>\n</pre></div>\n<div class=\"cell-output cell-output-stdout\">\n<div class=\"highlight\"><pre><span></span>Fri Sep 29 15:24:24 2023\n</pre></div>\n</div>\n</div>\n</div>","tableOfContents":"","frontmatter":{"tags":["cours","seconde","lycée","snt","python","boucle","fonction"],"tocHTML":"<ul><li><a href=\"#les-boucles\" data-localhref=\"true\">Les boucles</a></li><ul><li><a href=\"#les-boucles-bornées-for\" data-localhref=\"true\">Les boucles bornées: <code>for</code></a></li><li><a href=\"#les-boucles-non-bornées-while\" data-localhref=\"true\">Les boucles non bornées: <code>while</code></a></li></ul><li><a href=\"#les-fonctions\" data-localhref=\"true\">Les fonctions</a></li><ul><li><a href=\"#renvoyer-une-valeur-avec-return\" data-localhref=\"true\">Renvoyer une valeur avec <code>return</code></a></li><li><a href=\"#les-paramètres-de-fonction\" data-localhref=\"true\">Les paramètres de fonction</a></li></ul></ul>"},"fields":{"classe":"2gt","chapter":"Boucles et fonctions","matter":"snt","nChapter":"3","part":"Programmation Python","nPart":"0"}}},"pageContext":{"slug":"2gt/snt/0-programmation-python/3-boucles-et-fonctions","chapter":"Boucles et fonctions"}},"staticQueryHashes":["604483588"],"slicesMap":{}}