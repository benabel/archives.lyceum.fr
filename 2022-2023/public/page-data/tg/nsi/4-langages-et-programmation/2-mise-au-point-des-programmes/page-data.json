{"componentChunkName":"component---src-templates-cours-md-js","path":"/tg/nsi/4-langages-et-programmation/2-mise-au-point-des-programmes/","result":{"data":{"markdownRemark":{"html":"<details class=\"programme\"><summary>Programme Officiel</summary>\n<table class=\"table table-bordered table-hover\">\n<thead class=\"table-warning\">\n<tr class=\"header\">\n<th>Contenus</th>\n<th>Capacités attendues</th>\n<th>Commentaires</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td><p>Mise au point des programmes.</p>\n<p>Gestion des bugs.</p></td>\n<td>Dans la pratique de la programmation, savoir répondre aux causes typiques de bugs : problèmes liés au typage, effets de bord non désirés, débordements dans les tableaux, instruction conditionnelle non exhaustive, choix des inégalités, comparaisons et calculs entre flottants, mauvais nommage des variables, etc.</td>\n<td><p>On prolonge le travail entrepris en classe de première sur l’utilisation de la spécification, des assertions, de la documentation des programmes et de la construction de jeux de tests.</p>\n<p>Les élèves apprennent progressivement à anticiper leurs erreurs.</p></td>\n</tr>\n</tbody>\n</table>\n<a class=\"lien-programme\" href=\"../programme/\">Lien vers le programme complet</a></details>\n<blockquote class=\"blockquote\">\n<p>La mise au point du programme doit permettre au programme de répondre à une spécification, durant cette phase, le programmeur se doit de savoir répondre aux causes typiques de bugs.</p>\n</blockquote>\n<h2 id=\"spécification-et-tests\" class=\"anchored\">Spécification et tests</h2>\n<p>Durant la phase de conception d’un programme, on commence par écrire la spécification du programme et écrire des jeux de tests pour valider le fonctionnement du programme.</p>\n<p>La spécification décrit les entrées et sorties du programme, ainsi que leurs types, ce que l’on appelle en anglais l’API_(Application Programming Interface)_ ou interface de programmation applicative en français(peu courant).</p>\n<p>Les tests vérifient que les sorties du programme sont conformes à ce que l’on attend.</p>\n<div class=\"example\">\n<p>Voici une fonction avec sa spécification.</p>\n<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">est_pair</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">\"\"\"Indique si un nombre est pair ou non</span>\n<span></span>\n<span class=\"sd\">    Paramètres</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    n: int</span>\n<span></span>\n<span class=\"sd\">    Returns</span>\n<span class=\"sd\">    -------</span>\n<span class=\"sd\">    bool</span>\n<span class=\"sd\">        True si n est pair, False sinon</span>\n<span class=\"sd\">    \"\"\"</span>\n<span class=\"k\">    if</span> <span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n<span class=\"k\">        return</span> <span class=\"kc\">True</span>\n<span class=\"k\">    else</span><span class=\"p\">:</span>\n<span class=\"k\">        return</span> <span class=\"kc\">False</span>\n</pre></div>\n<p>Ou plus succinctement avec les annotations de type:</p>\n<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">est_pair</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n<span class=\"s2\">    \"Indique si un nombre est pair ou non\"</span>\n<span class=\"k\">    if</span> <span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n<span class=\"k\">        return</span> <span class=\"kc\">True</span>\n<span class=\"k\">    else</span><span class=\"p\">:</span>\n<span class=\"k\">        return</span> <span class=\"kc\">False</span>\n</pre></div>\n<p>Maintenant un ensemble de tests:</p>\n<div class=\"highlight\"><pre><span></span><span class=\"k\">assert</span> <span class=\"n\">est_pair</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"kc\">True</span>\n<span class=\"k\">assert</span> <span class=\"n\">est_pair</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"kc\">False</span>\n<span class=\"k\">assert</span> <span class=\"n\">est_pair</span><span class=\"p\">(</span><span class=\"mi\">1381635162</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"kc\">True</span>\n<span class=\"k\">assert</span> <span class=\"n\">est_pair</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">3565454165461</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"kc\">False</span>\n<span class=\"c1\"># le is True est redondant</span>\n<span class=\"k\">assert</span> <span class=\"n\">est_pair</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"c1\"># le is False peut être écrit</span>\n<span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">est_pair</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n</pre></div>\n<p>On peut également ajouter un message en cas d’erreur sur un test en le séparant par une virgule.</p>\n<div class=\"highlight\"><pre><span></span><span class=\"k\">assert</span> <span class=\"n\">est_pair</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s2\">\"Le nombre deux n'a pas été reconnu comme pair\"</span>\n</pre></div>\n<p>Ainsi si la fonction présentait un jour une erreur, le programme s’arrêterait en levant l’exception avec le message d’explication.</p>\n<div class=\"highlight\"><pre><span></span>Traceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAssertionError: Le nombre deux n'a pas été reconnu comme pair\n</pre></div>\n</div>\n<h2 id=\"gestion-des-bugs\" class=\"anchored\">Gestion des bugs</h2>\n<p>Lors de l’écriture de code Python, vous ferez fréquemment des erreurs, qui vous serons «gentiment» rappelées par l’interpréteur Python à l’exécution du code.</p>\n<h3 id=\"erreurs-les-plus-courantes-en-python\" class=\"anchored\">Erreurs les plus courantes en Python</h3>\n<p>En fonction des erreurs rencontrées, Python affiche des erreurs spécifiques qui vous aident à comprendre quel est le problème dans votre programme.</p>\n<p>Voici quelques erreurs courantes que vous devez apprendre à reconnaitre parmi les <a href=\"https://docs.python.org/fr/3/library/exceptions.html#exception-hierarchy\">nombreuses exceptions</a> de Python.</p>\n<table class=\"table table-bordered table-hover\">\n<thead class=\"table-warning\">\n<tr class=\"header\">\n<th><div class=\"highlight\"><pre><span></span>Type d'erreur\n</pre></div>\n</th>\n<th>Objet Python</th>\n<th><div class=\"highlight\"><pre><span></span>                           Erreurs courantes\n</pre></div>\n</th>\n<th><div class=\"highlight\"><pre><span></span>            Exemple\n</pre></div>\n</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>Erreur de syntaxe</td>\n<td><code>SyntaxError</code></td>\n<td>Erreur de parenthèse, <code>:</code> manquant avant un bloc d’instruction….</td>\n<td><code>len([1,2,3))</code></td>\n</tr>\n<tr class=\"even\">\n<td>Erreurs d’indexation</td>\n<td><code>IndexError</code></td>\n<td>Accès à un index non présent dans une liste. Accès à un index non présent dans une liste, ou un tuple, str…</td>\n<td><code>[12,15,14][4]</code></td>\n</tr>\n<tr class=\"odd\">\n<td>Erreurs de nom</td>\n<td><code>NameError</code></td>\n<td>Nom de fonction ou de variable mal orthographié.</td>\n<td><code>print(Bonjour)</code> ou <code>prout(\"Bonjour\")</code></td>\n</tr>\n<tr class=\"even\">\n<td>Erreurs d’indentation</td>\n<td><code>IndentationError</code></td>\n<td>Indentation oubliée, ou trop grande, les blocs sont alors mal délimités.</td>\n<td></td>\n</tr>\n<tr class=\"odd\">\n<td>Erreurs de type</td>\n<td><code>TypeError</code></td>\n<td>Opération impossible entre deux types(str - int). Conversion de type impossible.</td>\n<td><code>\"3\" * \"5\"</code></td>\n</tr>\n</tbody>\n</table>\n<p>Parfois ces erreurs nécessitent de modifier le code pour corriger le «bug».</p>\n<p>D’autres fois ces erreurs nécessitent d’être gérées sans arrêter complétement le programme.</p>\n<h3 id=\"gestion-des-exceptions-avec-try-...-except...\" class=\"anchored\">Gestion des exceptions avec <code>try: ... except...</code></h3>\n<p>Prenons l’exemple de la gestion d’une entrée utilisateur. Vous demandez l’âge d’une personne et vous attendez un entier pour vérifier son accès.</p>\n<p>Il faut lui reposer la question jusqu’à ce qu’il rentre une valeur conforme à nos attentes.</p>\n<div class=\"highlight\"><pre><span></span><span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">(</span><span class=\"s2\">\"Quel âge avez-vous? \"</span><span class=\"p\">))</span>\n<span class=\"k\">if</span> <span class=\"n\">age</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">13</span><span class=\"p\">:</span>\n<span class=\"nb\">  print</span><span class=\"p\">(</span><span class=\"s2\">\"Vous pouvez vous inscrire\"</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n<span class=\"nb\">  print</span><span class=\"p\">(</span><span class=\"s2\">\"Les réseaux sociaux sont interdits aux moins de 13 ans.\"</span><span class=\"p\">)</span>  \n</pre></div>\n<p>Si l’utilisateur répond <code>\"seize ans\"</code>, vous obtenez le message d’erreur suivant:</p>\n<div class=\"highlight\"><pre><span></span>ValueError: invalid literal for int() with base 10: 'seize ans'\n</pre></div>\n<p>On va gérer cette erreur avec un <code>try</code>.</p>\n<div class=\"highlight\"><pre><span></span><span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"n\">  age</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">(</span><span class=\"s2\">\"Quel âge avez-vous? \"</span><span class=\"p\">))</span>\n<span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n<span class=\"nb\">  print</span><span class=\"p\">(</span><span class=\"s2\">\"Veuillez entrer votre âge sous forme de chiffres\"</span><span class=\"p\">)</span>\n</pre></div>\n<p>Le programme ne renvoie plus d’erreurs et ne s’arrête pas. On peut continuer à demander l’âge sans relancer le programme.</p>\n<div class=\"highlight\"><pre><span></span>Quel âge avez-vous? treize ans\nVeuillez entrer votre âge sous forme de chiffres\n</pre></div>\n<p>Un <code>while</code> peut permettre de reposer la question en cas de besoin.</p>\n<div class=\"highlight\"><pre><span></span><span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n<span class=\"k\">while</span> <span class=\"ow\">not</span> <span class=\"n\">age</span><span class=\"p\">:</span> \n<span class=\"k\">    try</span><span class=\"p\">:</span>\n<span class=\"n\">      age</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">(</span><span class=\"s2\">\"Quel âge avez-vous? \"</span><span class=\"p\">))</span>\n<span class=\"k\">    except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n<span class=\"nb\">      print</span><span class=\"p\">(</span><span class=\"s2\">\"Veuillez entrer votre âge sous forme de chiffres\"</span><span class=\"p\">)</span>\n<span></span>\n<span class=\"c1\"># on est sures d'avoir un age entier ici</span>\n<span class=\"k\">if</span> <span class=\"n\">age</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">13</span><span class=\"p\">:</span>\n<span class=\"nb\">    print</span><span class=\"p\">(</span><span class=\"s2\">\"Vous pouvez vous inscrire\"</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n<span class=\"nb\">    print</span><span class=\"p\">(</span><span class=\"s2\">\"Les réseaux sociaux sont interdits aux moins de 13 ans.\"</span><span class=\"p\">)</span>\n</pre></div>\n<p>Voici un exemple d’interaction avec ce programme.</p>\n<div class=\"highlight\"><pre><span></span>Quel âge avez-vous?  treize ans\nVeuillez entrer votre âge sous forme de chiffres\nQuel âge avez-vous?  13.5\nVeuillez entrer votre âge sous forme de chiffres\nQuel âge avez-vous?  13\nVous pouvez vous inscrire\n</pre></div>\n<details class=\"plus\"><summary>&nbsp;</summary>\n<p>Attention à gérer les exceptions avec précaution ou vous risquez d’introduire des bugs qui n’arrêteront pas le programme et resteront donc «invisibles».</p>\n</details>","tableOfContents":"","frontmatter":{"tags":["bug","débogage"],"tocHTML":"<ul><li><a href=\"#spécification-et-tests\" data-localhref=\"true\">Spécification et tests</a></li><li><a href=\"#gestion-des-bugs\" data-localhref=\"true\">Gestion des bugs</a></li><ul><li><a href=\"#erreurs-les-plus-courantes-en-python\" data-localhref=\"true\">Erreurs les plus courantes en Python</a></li><li><a href=\"#gestion-des-exceptions-avec-try-...-except...\" data-localhref=\"true\">Gestion des exceptions avec <code>try: ... except...</code></a></li></ul></ul>"},"fields":{"classe":"tg","chapter":"Mise au point des programmes","matter":"nsi","nChapter":"2","part":"Langages et programmation","nPart":"4"}}},"pageContext":{"slug":"tg/nsi/4-langages-et-programmation/2-mise-au-point-des-programmes","chapter":"Mise au point des programmes"}},"staticQueryHashes":["604483588"],"slicesMap":{}}