{"componentChunkName":"component---src-templates-cours-md-js","path":"/tg/nsi/4-langages-et-programmation/5-notion-de-programme/","result":{"data":{"markdownRemark":{"html":"<p><strong>Ce chapitre ne pourra pas faire l’objet d’une évaluation lors de l’épreuve terminale écrite et pratique de l’enseignement de spécialité.</strong> <a href=\"https://www.education.gouv.fr/bo/21/Hebdo30/MENE2121274N.htm\" class=\"cite-source\">BO MENE2121274N</a></p>\n<details class=\"programme\"><summary>Programme Officiel</summary>\n<table class=\"table table-bordered table-hover\">\n<thead class=\"table-warning\">\n<tr class=\"header\">\n<th>Contenus</th>\n<th>Capacités attendues</th>\n<th>Commentaires</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td><p>Notion de programme en tant que donnée.</p>\n<p>Calculabilité, décidabilité.</p></td>\n<td><p>Comprendre que tout programme est aussi une donnée.</p>\n<p>Comprendre que la calculabilité ne dépend pas du langage de programmation utilisé.</p>\n<p>Montrer, sans formalisme théorique, que le problème de l’arrêt est indécidable.</p></td>\n<td>L’utilisation d’un interpréteur ou d’un compilateur, le téléchargement de logiciel, le fonctionnement des systèmes d’exploitation permettent de comprendre un programme comme donnée d’un autre programme.</td>\n</tr>\n</tbody>\n</table>\n<a class=\"lien-programme\" href=\"../programme/\">Lien vers le programme complet</a></details>\n<blockquote class=\"blockquote\">\n<p>Comme nous l’avons vu en première, un programme est la traduction électronique d’un algorithme afin qu’il puisse être compris par une machine. Dans ce chapitre, nous allons montrer qu’un programme ne peut pas tout calculer ou décider.</p>\n</blockquote>\n<h2 id=\"notion-de-programme-en-tant-que-donnée\" class=\"anchored\">Notion de programme en tant que donnée</h2>\n<p>Certains programmes utilisent comme données le code source d’autres programmes.</p>\n<div class=\"examples\">\n<ul>\n<li>un système d’exploitation(linux p.ex) est un programme qui éxecute d’autres programmes(traitement de textes p.ex).</li>\n<li>l’interpréteur Python, est un programme qui traduit le code source de votre programme Python en instructions exécutables par machine: du <a href=\"/1g/nsi/6-architectures-materielles-et-systemes-dexploitation/2-jeu-dinstructions-du-processeur\">langage machine</a>.</li>\n</ul>\n</div>\n<h2 id=\"calculabilité\" class=\"anchored\">Calculabilité</h2>\n<p>La notion de calculabilité date de 1936, il s’agit de savoir ce qui peut être calculé par un ordinateur, et donc permet de voir les <strong>limites des problèmes</strong> que peuvent résoudre les ordinateurs.</p>\n<div class=\"prop\">\n<p>On dira qu’une fonction est <strong>calculable</strong> si elle peut être programmée dans l’un ou l’autre des langages de programmation usuels. Cette année, nous utiliserons le langage Python comme témoin : une fonction est calculable si on peut la programmer en Python.</p>\n</div>\n<details class=\"plus\"><summary>&nbsp;</summary>\n<p>Il existe d’autres modèles de calcul, comme le λ-calcul, les fonctions récursives, les machines de Turing, que nous ne développerons pas ici, et qui ne font pas partie des attendus du programme.</p>\n<p>La thèse de Church postule que tous ces modèles de calcul sont équivalents : une fonction calculable pour un modèle l’est pour un autre. Cela nous permet d’utiliser le modèle des fonctions programmables en Python sans perdre de généralité.</p>\n</details>\n<p><a href=\"https://cache.media.eduscol.education.fr/file/NSI/63/6/RA20_NSI_G_T_calculabilite_1298636.pdf\" class=\"cite-source\">Calculabilité et décidabilité sur eduscol</a></p>\n<p>On peut calculer beaucoup de choses avec un ordinateur comme le nombre <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi></mrow><annotation encoding=\"application/x-tex\">\\pi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span></span></span></span>\n, les nombres rationnels <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msqrt><mn>2</mn></msqrt></mrow><annotation encoding=\"application/x-tex\">\\sqrt{2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.1328em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9072em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">2</span></span></span><span style=\"top:-2.8672em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"1.08em\" viewBox=\"0 0 400000 1080\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1328em;\"><span></span></span></span></span></span></span></span></span>\n, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msqrt><mn>3</mn></msqrt></mrow><annotation encoding=\"application/x-tex\">\\sqrt{3}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.1328em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9072em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">3</span></span></span><span style=\"top:-2.8672em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"1.08em\" viewBox=\"0 0 400000 1080\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1328em;\"><span></span></span></span></span></span></span></span></span>\n…</p>\n<p>Par contre, il a été prouvé que certains problèmes n’étaient pas calculables comme par exemple :</p>\n<ul>\n<li>Savoir si un énoncé mathématique est un théorème ou pas_(s’il peut être démontré)_.</li>\n<li>Créer un programme qui prend un programme en entrée, et qui indiquera si le programme s’arrête ou pas : le problème de l’arrêt.</li>\n</ul>\n<p>Il s’agit de problèmes de <strong>décidabilité</strong>.</p>\n<h2 id=\"décidabilité\" class=\"anchored\">Décidabilité</h2>\n<dl>\n<dt>\ndécidabilité\n</dt>\n<dd>\n<div>\n<p>Un problème de décision est dit décidable s’il existe un algorithme, une procédure mécanique qui se termine en un nombre fini d’étapes, qui le décide, c’est-à-dire qui réponde par oui ou par non à la question posée par le problème. S’il n’existe pas de tels algorithmes, le problème est dit indécidable. Par exemple, le problème de l’arrêt est indécidable.</p>\n<p><a href=\"https://fr.wikipedia.org/wiki/D%C3%A9cidabilit%C3%A9#D%C3%A9finition\" class=\"cite-source\">Article Wikipédia sur la décidabilité</a></p>\n</div>\n</dd>\n</dl>\n<h3 id=\"exemples-de-problèmes-décidables\" class=\"anchored\">Exemples de problèmes décidables</h3>\n<p>Tous les sous-ensembles finis des entiers sont décidables, par exemple:</p>\n<ul>\n<li>Décider si un entier naturel est pair ou non;</li>\n<li>décider si un entier naturel est premier ou non.</li>\n</ul>\n<details class=\"plus\"><summary>Décidable ne signifie pas résolvable</summary>\n<p>Notons qu’un ensemble peut être théoriquement décidable sans qu’en pratique la décision puisse être faite, parce que celle-ci nécessiterait trop de temps (plus que l’âge de l’univers) ou trop de ressources (plus que le nombre d’atomes de l’univers). L’objet de la théorie de la complexité des algorithmes est d’étudier les problèmes de décision en prenant en compte ressources et temps de calcul.</p>\n<p><a href=\"https://fr.wikipedia.org/wiki/D%C3%A9cidabilit%C3%A9#Exemples_d'ensembles_et_de_probl%C3%A8mes_d%C3%A9cidables\" class=\"cite-source\">Article Wikipédia sur la décidabilité</a></p>\n</details>\n<h3 id=\"exemple-de-problème-indécidable-le-problème-de-larrêt\" class=\"anchored\">Exemple de problème indécidable : le problème de l’arrêt</h3>\n<p>L’indécidabilité du problème de l’arrêt a été démontrée par Alan Turing en 1936.</p>\n<p>On peut l’interpréter ainsi : il n’existe pas de programme permettant de tester n’importe quel programme informatique afin de conclure dans tous les cas s’il s’arrêtera en un temps fini ou bouclera à jamais.</p>\n<p><strong>Preuve par l’absurde de non-décidabilité de l’arrêt</strong></p>\n<p>Supposons qu’il existe une fonction calculable <code>termine(programme, données)</code> qui prend 2 arguments :</p>\n<ul>\n<li>un programme</li>\n<li>des données d’entrée pour ce programme</li>\n</ul>\n<p>et qui renverra <code>True</code> si le programme termine et <code>False</code> s’il entre dans une boucle infinie.</p>\n<div class=\"examples\">\n<ul>\n<li>en utilisant la fonction <code>est_pair()</code> définie dans la partie <a href=\"./exo\">exercice</a></li>\n</ul>\n<p><code>termine(est_pair, 128)</code> ou <code>termine(est_pair, 127)</code> renverraient <code>True</code>.</p>\n<ul>\n<li>une fonction définie ainsi :</li>\n</ul>\n<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">est_positif</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n<span class=\"k\">    if</span> <span class=\"n\">n</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n<span class=\"k\">        return</span> <span class=\"kc\">True</span>\n<span class=\"k\">    else</span><span class=\"p\">:</span>\n<span class=\"k\">        while</span> <span class=\"n\">n</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n<span class=\"n\">            n</span> <span class=\"o\">=</span> <span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> <span class=\"c1\"># boucle infinie</span>\n<span class=\"k\">        return</span> <span class=\"kc\">False</span>\n</pre></div>\n<p>entrainerait une boucle infinie pour les nombres négatifs, et on aurait :</p>\n<p><code>termine(est_positif, 128)</code> renvoie <code>True</code> alors que <code>termine(est_positif, -2)</code> renverrait <code>False</code> non pas car -2 n’est pas positif mais parce que l’appel <code>positif(-2)</code> ne se terminerait jamais.</p>\n</div>\n<p>Définissons une fonction <code>test_sur_soi</code>.</p>\n<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">test_sur_soi</span><span class=\"p\">(</span><span class=\"n\">programme</span><span class=\"p\">):</span>\n<span class=\"k\">    if</span> <span class=\"n\">termine</span><span class=\"p\">(</span><span class=\"n\">programme</span><span class=\"p\">,</span> <span class=\"n\">programme</span><span class=\"p\">):</span>\n<span class=\"k\">        while</span> <span class=\"kc\">True</span><span class=\"p\">:</span> <span class=\"k\">pass</span> <span class=\"c1\"># boucle infinie</span>\n</pre></div>\n<p>On obtient alors une contradiction si on appelle <code>test_sur_soi</code> sur elle-même :</p>\n<div class=\"highlight\"><pre><span></span><span class=\"n\">test_sur_soi</span><span class=\"p\">(</span><span class=\"n\">test_sur_soi</span><span class=\"p\">)</span>\n<span></span>\n<span class=\"c1\"># l'appel éxecutera l'algorithme suivant</span>\n<span class=\"k\">if</span> <span class=\"n\">termine</span><span class=\"p\">(</span><span class=\"n\">test_sur_soi</span><span class=\"p\">,</span> <span class=\"n\">test_sur_soi</span><span class=\"p\">):</span>\n<span class=\"k\">    while</span> <span class=\"kc\">True</span><span class=\"p\">:</span> <span class=\"k\">pass</span>\n</pre></div>\n<p>On arrive au paradoxe suivant :</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow><mi>t</mi><mi>e</mi><mi>s</mi><mi>t</mi><mi>_</mi><mi>s</mi><mi>u</mi><mi>r</mi><mi>_</mi><mi>s</mi><mi>o</mi><mi>i</mi></mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mi>t</mi><mi>e</mi><mi>s</mi><mi>t</mi><mi>_</mi><mi>s</mi><mi>u</mi><mi>r</mi><mi>_</mi><mi>s</mi><mi>o</mi><mi>i</mi></mrow><mo stretchy=\"false\">)</mo><mtext>&nbsp;termine</mtext><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><mrow><mrow><mi>t</mi><mi>e</mi><mi>s</mi><mi>t</mi><mi>_</mi><mi>s</mi><mi>u</mi><mi>r</mi><mi>_</mi><mi>s</mi><mi>o</mi><mi>i</mi></mrow><mo stretchy=\"false\">(</mo><mrow><mrow><mi>t</mi><mi>e</mi><mi>s</mi><mi>t</mi><mi>_</mi><mi>s</mi><mi>u</mi><mi>r</mi><mi>_</mi><mi>s</mi><mi>o</mi><mi>i</mi></mrow><mo stretchy=\"false\">)</mo><mrow><mtext>&nbsp;boucle&nbsp;ind</mtext><mover accent=\"true\"><mtext>e</mtext><mo>ˊ</mo></mover><mtext>finiment</mtext></mrow></mrow></mrow></mrow></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\n{\\displaystyle {\\it {{test\\_sur\\_soi}({\\it {{test\\_sur\\_soi}){\\text{ termine}}\\iff {\\it {{test\\_sur\\_soi}({\\it {{test\\_sur\\_soi}){\\text{ boucle indéfiniment}}}}}}}}}}}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.06em;vertical-align:-0.31em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathit\">test_sur_soi</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathit\">test_sur_soi</span></span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">&nbsp;termine</span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⟺</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathit\">test_sur_soi</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathit\">test_sur_soi</span></span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">&nbsp;boucle&nbsp;ind</span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6944em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\">e</span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.25em;\"><span class=\"mord\">ˊ</span></span></span></span></span></span></span><span class=\"mord\">finiment</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>\n</p>","tableOfContents":"","frontmatter":{"tags":["calculabilité","décidabilité","problème de l'arrêt"],"tocHTML":"<ul><li><a href=\"#notion-de-programme-en-tant-que-donnée\" data-localhref=\"true\">Notion de programme en tant que donnée</a></li><li><a href=\"#calculabilité\" data-localhref=\"true\">Calculabilité</a></li><li><a href=\"#décidabilité\" data-localhref=\"true\">Décidabilité</a></li><ul><li><a href=\"#exemples-de-problèmes-décidables\" data-localhref=\"true\">Exemples de problèmes décidables</a></li><li><a href=\"#exemple-de-problème-indécidable-le-problème-de-larrêt\" data-localhref=\"true\">Exemple de problème indécidable : le problème de l’arrêt</a></li></ul></ul>"},"fields":{"classe":"tg","chapter":"Notion de programme*","matter":"nsi","nChapter":"5","part":"Langages et programmation","nPart":"4"}}},"pageContext":{"slug":"tg/nsi/4-langages-et-programmation/5-notion-de-programme","chapter":"Notion de programme*"}},"staticQueryHashes":["604483588"],"slicesMap":{}}