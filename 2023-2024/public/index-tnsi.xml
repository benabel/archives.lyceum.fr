<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>lyceum</title>
<link>https://www.lyceum.fr/2023-2024/#category=TNSI</link>
<atom:link href="https://www.lyceum.fr/2023-2024/index-tnsi.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.4.554</generator>
<lastBuildDate>Thu, 16 May 2024 13:21:00 GMT</lastBuildDate>
<item>
  <title>Chapitre 0: Révisions</title>
  <link>https://www.lyceum.fr/2023-2024/tg/nsi/1-structures-de-donnees/0-revisions/</link>
  <description><![CDATA[ 




<div class="intro">
<blockquote class="blockquote">
<p>Nous avons vu l’année dernière comment étaient codées les données au sein d’un ordinateur, et nous avons utilisé des types simples et composés de Python.</p>
</blockquote>
</div>
<section id="les-types-simples" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="les-types-simples"><span class="header-section-number">1</span> Les types simples</h2>
<p>Un objet de type simple ne stocke qu’une donnée.</p>
<ul>
<li>entier(<code>int</code>): <code>1</code> <code>12</code> <code>-4</code></li>
<li>nombre flottant(<code>float</code>): <code>1.1</code> <code>12.0</code> -25E2`<br>
</li>
<li>chaîne de caractères(<code>str</code>): <code>"Du texte"</code> <code>'Un autre texte'</code></li>
<li>booléen(<code>bool</code>): <code>True</code> <code>False</code></li>
</ul>
</section>
<section id="les-types-construits" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="les-types-construits"><span class="header-section-number">2</span> Les types construits</h2>
<p>Les types construits permettent de stocker des collections de données.</p>
<ul>
<li><p>tableau(<code>list</code>): <code>l = [1, 12, -4]</code></p>
<p>On accède aux éléments du tableau par <strong>index</strong>. <code>l[2]</code> → <code>-4</code></p></li>
<li><p>dictionnaire(<code>dict</code>): <code>d = {"nom": "Gaston", "age": 25}</code></p>
<p>On accède aux éléments du dictionnaire par <strong>clef</strong>. <code>d["age"]</code> → <code>25</code></p></li>
</ul>
</section>
<section id="méthode-ditérations" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="méthode-ditérations"><span class="header-section-number">3</span> Méthode d’itérations</h2>
<section id="itération-sur-une-liste" class="level3" data-number="3.1">
<h3 data-number="3.1" class="anchored" data-anchor-id="itération-sur-une-liste"><span class="header-section-number">3.1</span> Itération sur une liste</h3>
<p>On peut itérer sur les valeurs ou sur les index.</p>
<ol type="1">
<li>Itération sur les valeurs</li>
</ol>
<p>On fait une itération sures valeurs du tableau en utilisant le mot-clé <code>in</code>.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> val <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> ma_liste:</span>
<span id="cb1-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(val)</span></code></pre></div>
<ol start="2" type="1">
<li>Itération sur les index</li>
</ol>
<p>C’est la méthode classique utilisée dans les langages impératifs. Ayant accès à l’index on a également accès la valeur.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(ma_liste)):</span>
<span id="cb2-2">    val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ma_liste[i]</span>
<span id="cb2-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"indice:"</span>, i, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"valeur:"</span>, val)</span></code></pre></div>
</section>
<section id="itération-sur-les-dictionnaires" class="level3" data-number="3.2">
<h3 data-number="3.2" class="anchored" data-anchor-id="itération-sur-les-dictionnaires"><span class="header-section-number">3.2</span> Itération sur les dictionnaires</h3>
<p>Les dictionnaires étant des associations de clés(key) et de valeurs(value), on peut itérer sur les clés, les valeurs, ou les deux.</p>
<ol type="1">
<li><p>Itération sur les clés: <code>keys()</code></p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> key <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> D.keys():</span>
<span id="cb3-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(key)</span></code></pre></div>
<p>Ou plus simplement.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> key <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> D:</span>
<span id="cb4-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(key)</span></code></pre></div></li>
<li><p>Itération sur les valeurs: <code>values()</code></p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> value <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> D.values():</span>
<span id="cb5-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(value)</span></code></pre></div></li>
<li><p>Itération sur les paires clé, valeurs: <code>items()</code></p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> key, value <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> D.items():</span>
<span id="cb6-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(key, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'=&gt;'</span>, value)</span></code></pre></div></li>
</ol>


</section>
</section>

 ]]></description>
  <category>TNSI</category>
  <guid>https://www.lyceum.fr/2023-2024/tg/nsi/1-structures-de-donnees/0-revisions/</guid>
  <pubDate>Thu, 16 May 2024 13:21:00 GMT</pubDate>
</item>
<item>
  <title>Chapitre 1: Interface et implémentation</title>
  <link>https://www.lyceum.fr/2023-2024/tg/nsi/1-structures-de-donnees/1-interface-et-implementation/</link>
  <description><![CDATA[ 




<div class="programme">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Programme
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="programme">
<table class="table table-bordered table-hover">
<thead class="table-warning">
<tr class="header">
<th>Contenus</th>
<th>Capacités attendues</th>
<th>Commentaires</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Structures de données, interface et implémentation.</td>
<td><p>Spécifier une structure de données par son interface.</p>
<p>Distinguer interface et implémentation.</p>
<p>Écrire plusieurs implémentations d’une même structure de données.</p></td>
<td>L’abstraction des structures de données est introduite après plusieurs implémentations d’une structure simple comme la file (avec un tableau ou avec deux piles).</td>
</tr>
<tr class="even">
<td><p>Listes, piles, files : structures linéaires.</p>
<p>Dictionnaires, index et clé.</p></td>
<td><p>Distinguer des structures par le jeu des méthodes qui les caractérisent.</p>
<p>Choisir une structure de données adaptée à la situation à modéliser.</p>
<p>Distinguer la recherche d’une valeur dans une liste et dans un dictionnaire.</p></td>
<td>_</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</div>
<blockquote class="blockquote">
<p>Cette année, nous allons voir de nouvelles façons d’organiser et de traiter les données, ce que l’on appelle des <strong>structures de données</strong>. On rencontrera, notamment des structures linéaires comme la liste, la pile et la file, mais également des structures relationnelles telles que les arbres ou les graphes. Dans ce chapitre, nous allons commencer par distinguer la structure de données de son implémentation en s’appuyant sur les tableaux et dictionnaires vus en première.</p>
</blockquote>
<section id="les-tableaux-list-en-python" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="les-tableaux-list-en-python"><span class="header-section-number">1</span> Les tableaux: <em>(<code>list</code> en python)</em></h2>
<p>En <a href="../../../../1g/nsi/3-representation-des-donnees-types-construits/1-tableaux">première</a>, nous avons déjà rencontré les tableaux(<em>tableaux dynamiques</em> pour être plus précis), qui sont des séquences d’éléments ordonnés auxquels on peut accéder facilement par leur <em>index</em>.</p>
<p></p><figure class="wikimage figure"><picture>
			  <source type="image/webp" srcset="/img/d-hVLO-gAH-300.webp 300w, /img/d-hVLO-gAH-600.webp 600w, /img/d-hVLO-gAH-711.webp 711w" sizes="100vw">
  <source type="image/png" srcset="/img/d-hVLO-gAH-300.png 300w, /img/d-hVLO-gAH-600.png 600w, /img/d-hVLO-gAH-711.png 711w" sizes="100vw">
				<img class="img-fluid figure-img" src="https://www.lyceum.fr/2023-2024/img/d-hVLO-gAH-300.webp" width="711" height="159" alt="Un tableau est une suite de données ordonnées auxquelles on accéde par un index(un entier)." loading="lazy" decoding="async">
			</picture>
<figcaption id="caption">Un tableau est une suite de données ordonnées auxquelles on accéde par un index(un entier).</figcaption><figcaption id="credit">&nbsp;Public domain&nbsp;<a id="image-description" href="//commons.wikimedia.org/wiki/File:Tableau_à_une_dimension.png">via Wikimedia Commons</a></figcaption></figure> <p></p>
<p>En python les tableaux sont implémentés par l’objet <code>list</code> dont les éléments sont séparés par une virgule et entourés de crochets.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># création</span></span>
<span id="cb1-2">ma_liste <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"deux"</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>]</span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># accès aux élements par index</span></span>
<span id="cb1-4">ma_liste[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># renvoie "deux"!</span></span></code></pre></div>
<p>Les listes étant mutables, on peut ajouter ou supprimer des éléments après création.</p>
<ul>
<li>Ajout d’un élément à l’index souhaité :</li>
</ul>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ajout avec la méthode `insert()`</span></span>
<span id="cb2-2">ma_liste.insert(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"zéro"</span>)</span>
<span id="cb2-3">ma_liste <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># renvoie ['zéro', 1, 'deux', 3.0]</span></span></code></pre></div>
<ul>
<li>Suppression d’un élément à l’index souhaité :</li>
</ul>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># suppression avec la méthode `pop()`</span></span>
<span id="cb3-2">ma_liste.pop(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-3">ma_liste <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># renvoie ['zéro', 1, 3.0]</span></span></code></pre></div>
<ul>
<li>Il est également fréquent de souhaiter connaitre la longueur de la liste :</li>
</ul>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># longueur avec la fonction `len()`</span></span>
<span id="cb4-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(ma_liste) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># renvoie 3 puisque ['zéro', 1, 3.0]</span></span></code></pre></div>
<div class="plus">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
En plus: Une liste est-elle vide en Python?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="plus" data-titre="Une liste est-elle vide en Python?">
<p>Python étant un langage à type dynamique, il peut convertir le type d’une valeur en un autre suivant la situation. Ainsi si une liste se retouve dans une situation ou un booléen est attendu(<code>if liste: ... while liste:</code>), il convertira:</p>
<ul>
<li>la liste vide en: <code>False</code></li>
<li>une liste non vide en: <code>True</code></li>
</ul>
<p>Donc vérifier si une liste est vide peut-être simplement fait avec <code>bool(liste)</code>.</p>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="différence-entre-interface-et-implémentation" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="différence-entre-interface-et-implémentation"><span class="header-section-number">2</span> Différence entre interface et implémentation</h2>
<p>Les quatre méthodes qui ont été définies dans la classe <code>list</code> en Python: <code>len</code>, <code>pop</code>, <code>insert</code> sont ce que l’on appelle une <em>implémentation</em> de la structure de donnée tableau.</p>
<dl>
<dt>
Implémentation
</dt>
<dd>
<div>
<p>L’implémentation d’une structure de données ou d’un algorithme est une <em>mise en œuvre</em> pratique dans un langage de programmation.</p>
</div>
</dd>
</dl>
<p>Il existe de nombreux langages de programmation qui implémentent le type abstrait <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mi>a</mi><mi>b</mi><mi>l</mi><mi>e</mi><mi>a</mi><mi>u</mi></mrow><annotation encoding="application/x-tex">tableau</annotation></semantics></math>, nous avions vu l’<a href="../../../../1g/nsi/7-langages-et-programmation/7-comparaisons-de-langages">année dernière</a> les différences d’implémentation entre les <code>list</code> de Python et les <code>Array</code> de javascript.</p>
<p>Cependant, on retrouve des méthodes similaires qui sont ce que l’on appelle l’<em>interface</em> de la structure de données <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mi>a</mi><mi>b</mi><mi>l</mi><mi>e</mi><mi>a</mi><mi>u</mi></mrow><annotation encoding="application/x-tex">tableau</annotation></semantics></math>:</p>
<ol type="1">
<li>« Insérer » : ajoute un élément dans le tableau à l’index souhaité. <code>ajout(index, élément)</code>;</li>
<li>« Retirer » : retire un élément de le tableau à l’index souhaité. <code>suppr(index)</code>;</li>
<li>« Le tableau est-il vide ? » : renvoie « vrai » si le tableau est vide, « faux » sinon. <code>est_vide()</code>;</li>
<li>« Nombre d’éléments dans le tableau » : renvoie le nombre d’éléments dans le tableau. <code>longueur()</code>.</li>
</ol>
<p><a href="https://fr.wikipedia.org/wiki/Liste_(informatique)#Primitives" class="cite-source">Article Wikipedia sur les listes</a></p>
<dl>
<dt>
Interface
</dt>
<dd>
<div>
<p>L’interface d’une structure de données est la <em>spécification</em> des méthodes pouvant être appliquées sur cette structure de données.</p>
</div>
</dd>
</dl>
<div class="plus">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
En plus: Vers le pseudo-langage
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="plus" data-titre="Vers le pseudo-langage">
<p>L’intérêt de définir des structures de données avec une interface commune est de pouvoir écrire des algorithmes sur le papier en utilisant l’interface définie.</p>
<p>On utilise alors un pseudo-langage plus ou moins proche de la langue naturelle qui pourra être implémenté dans tous les langages de programmation ayant défini la structure de données.</p>
</div>
</div>
</div>
</div>
</div>
<div class="appli">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Application: Implémentation d'un tableau en python
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="appli" data-titre="Implémentation d'un tableau en python">
<p>Créer une classe <code>Tableau</code> qui implémente les quatre méthodes ci-dessus en stockant les données du tableau dans un attribut appelé <code>data</code> de type <code>list</code>e.</p>
<p>Pour aller plus loin, faire l’<a href="./exo">exercice 2</a>.</p>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="les-tableaux-associatifs-dictionnaires-en-python" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="les-tableaux-associatifs-dictionnaires-en-python"><span class="header-section-number">3</span> Les Tableaux associatifs: <em>(<code>dict</code>ionnaires en Python)</em></h2>
<p>Un dictionnaire, est un type de données associant à un ensemble de <strong>clés</strong>, un ensemble de <strong>valeurs</strong> correspondantes.</p>
<p></p><figure class="wikimage figure"><picture>
			  <source type="image/webp" srcset="/img/DfK9FySFiR-300.webp 300w, /img/DfK9FySFiR-688.svg 688w" sizes="100vw">
  <source type="image/svg+xml" srcset="/img/DfK9FySFiR-688.svg 688w" sizes="100vw">
				<img class="img-fluid figure-img" src="https://www.lyceum.fr/2023-2024/img/DfK9FySFiR-300.webp" width="688" height="261" alt="Dans tableau associatif, on accéde aux données par une clé(chaîne de caractère), ils ne sont généralement pas ordonnés." loading="lazy" decoding="async">
			</picture>
<figcaption id="caption">Dans tableau associatif, on accéde aux données par une clé(chaîne de caractère), ils ne sont généralement pas ordonnés.</figcaption><figcaption id="credit">&nbsp;Public domain&nbsp;<a id="image-description" href="//commons.wikimedia.org/wiki/File:Associative_array_as_linked_list.svg">via Wikimedia Commons</a></figcaption></figure> <p></p>
<p>Il s’agit de <em>l’implémentation</em> d’une structure de données <em>abstraite</em> appelée <strong>tableau associatif</strong>.</p>
<section id="interface" class="level3" data-number="3.1">
<h3 data-number="3.1" class="anchored" data-anchor-id="interface"><span class="header-section-number">3.1</span> Interface</h3>
<p>Les opérations usuellement fournies par un tableau associatif sont :</p>
<ul>
<li>ajout : association d’une nouvelle valeur à une nouvelle clef ;</li>
<li>modification : association d’une nouvelle valeur à une ancienne clef ;</li>
<li>suppression : suppression d’une clef ;</li>
<li>recherche : détermination de la valeur associée à une clef, si elle existe.</li>
</ul>
<p><a href="https://fr.wikipedia.org/wiki/Tableau_associatif" class="cite-source">Article Wikipedia sur le Tableau associatif</a></p>
</section>
<section id="implémentation-en-python" class="level3" data-number="3.2">
<h3 data-number="3.2" class="anchored" data-anchor-id="implémentation-en-python"><span class="header-section-number">3.2</span> Implémentation en python</h3>
<p>Les dictionnaires font partie de la bibliothèque standard de Python grâce à la classe <code>dict</code> vue en <a href="../../../../1g/nsi/3-representation-des-donnees-types-construits/3-dictionnaires">première</a>.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># création du dictionnaire</span></span>
<span id="cb5-2">personne <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nom"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lagaffe"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prenom"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gaston"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"age"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rigolo"</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>}</span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># accès à une valeur</span></span>
<span id="cb5-4">personne[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'age'</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># renvoie 27</span></span></code></pre></div>
<p>Les dictionnaires étant mutables, on peut ajouter supprimer ou modifier une valeur à un dictionnaire déjà créé:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ajout d'une clé</span></span>
<span id="cb6-2">personne[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dessinateur"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"André Franquin"</span></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># suppression d'une clé</span></span>
<span id="cb6-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">del</span> personne[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rigolo"</span>]</span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># modification d'une clé</span></span>
<span id="cb6-6">personne[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"age"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span></span>
<span id="cb6-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># accès à une valeur</span></span>
<span id="cb6-8">personne[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'age'</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># renvoie 28</span></span></code></pre></div>
<p>La recherche d’une valeur d’une valeur est traitée ci-après comme le propose le <a href="../../programme">programme officiel</a>.</p>
<div class="plus">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
En plus: Différentes implémentations des dictionnaires
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="plus" data-titre="Différentes implémentations des dictionnaires">
<p>L’article anglais de wikipédia compare diverses implémentations des tableaux associatifs.</p>
<p>https://en.wikipedia.org/wiki/Associative_array#Comparison</p>
<ul>
<li>table de hachage</li>
<li>arbres binaires de recherche équilibrés ou non</li>
<li>liste chaînée…</li>
</ul>
<p>En fonction des implémentations utilisées, les opérations de recherche ou d’ajouts sont plus ou moins couteuses en temps:</p>
<ul>
<li>temps fixe: <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo stretchy="true" form="prefix">(</mo><mn>1</mn><mo stretchy="true" form="postfix">)</mo></mrow></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></li>
<li>temps logarithmique <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo stretchy="true" form="prefix">(</mo><mo>log</mo><mi>n</mi><mo stretchy="true" form="postfix">)</mo></mrow></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></li>
<li>temps linéaire <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo stretchy="true" form="prefix">(</mo><mi>n</mi><mo stretchy="true" form="postfix">)</mo></mrow></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></li>
</ul>
</div>
</div>
</div>
</div>
</div>
</section>
</section>
<section id="recherche-dune-valeur" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="recherche-dune-valeur"><span class="header-section-number">4</span> Recherche d’une valeur</h2>
<p>Les méthodes d’itération diffèrent légèrement entre les <code>list</code>es et le <code>dict</code>ionnaire en Python.</p>
<section id="dans-une-liste" class="level3" data-number="4.1">
<h3 data-number="4.1" class="anchored" data-anchor-id="dans-une-liste"><span class="header-section-number">4.1</span> Dans une liste</h3>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on crée une liste vide par compréhension</span></span>
<span id="cb7-2">paires <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)]</span>
<span id="cb7-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(paires) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># affiche [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]</span></span>
<span id="cb7-4"></span>
<span id="cb7-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> recherche_liste(liste, élément):</span>
<span id="cb7-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># itération sur les valeurs de la liste</span></span>
<span id="cb7-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> e <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> liste:</span>
<span id="cb7-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> élément:</span>
<span id="cb7-9">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb7-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb7-11"></span>
<span id="cb7-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Appels de la fonction</span></span>
<span id="cb7-13">recherche_liste(paires, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># renvoie False</span></span>
<span id="cb7-14">recherche_liste(paires, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># renvoie True</span></span></code></pre></div>
<div class="plus">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
En plus: Avec le mot-clé in
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="plus" data-titre="Avec le mot-clé in">
<p>On peut utiliser le mot-clé <code>in</code> pour tester la présence d’une valeur dans la liste:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> paires</span>
<span id="cb8-2"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb8-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> paires</span>
<span id="cb8-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span></code></pre></div>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="dans-un-dictionnaire" class="level3" data-number="4.2">
<h3 data-number="4.2" class="anchored" data-anchor-id="dans-un-dictionnaire"><span class="header-section-number">4.2</span> Dans un dictionnaire</h3>
<p>Il existe trois méthodes d’itération sur les dictionnaires vues en <a href="../../../../1g/nsi/3-representation-des-donnees-types-construits/3-dictionnaires/#itération-sur-les-dictionnaires">première</a>:</p>
<ul>
<li>Itération sur les clés: <code>keys()</code></li>
<li>Itération sur les valeurs: <code>values()</code></li>
<li>Itération sur les paires clé, valeurs: <code>items()</code></li>
</ul>
<p>Pour rechercher une valeur, une itération sur les valeurs suffit.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1">personne <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nom'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Lagaffe'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'prenom'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gaston'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'age'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dessinateur'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'André Franquin'</span>}</span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> recherche_dict(dico, valeur):</span>
<span id="cb9-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> val <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dico.values():</span>
<span id="cb9-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> valeur:</span>
<span id="cb9-6">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb9-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb9-8"></span>
<span id="cb9-9">recherche_dict(personne, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'André Franquin'</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># renvoie True</span></span>
<span id="cb9-10">recherche_dict(personne, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Lagafe'</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># renvoie False</span></span></code></pre></div>
<div class="plus">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-7-contents" aria-controls="callout-7" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
En plus: Avec le mot-clé in
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-7" class="callout-7-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="plus" data-titre="Avec le mot-clé in">
<p>Le mot-clé <code>in</code> teste l’opérande parmi les <em>clés</em> et non les valeurs.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'André Franquin'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> personne</span>
<span id="cb10-2"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb10-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dessinateur'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> personne</span>
<span id="cb10-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span></code></pre></div>
</div>
</div>
</div>
</div>
</div>
</section>
</section>
<section id="complexité-des-opérations" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="complexité-des-opérations"><span class="header-section-number">5</span> Complexité des opérations</h2>
<p>Nous avons déjà défini la complexité temporelle d’un algorithme qui consiste à compter le nombre d’opérations élémentaires effectuées par un algorithme pour aboutir au résultat souhaité.</p>
<p>Nous allons préciser ici ce que l’on entend par opération élémentaire, car parfois lorsque l’on tape une opération celle-ci n’est pas élémentaire.</p>
<div class="prop">
<p>Une opération est élémentaire si elle a une complexité <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo stretchy="true" form="prefix">(</mo><mn>1</mn><mo stretchy="true" form="postfix">)</mo></mrow></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math>.</p>
</div>
<section id="cas-des-listes" class="level3" data-number="5.1">
<h3 data-number="5.1" class="anchored" data-anchor-id="cas-des-listes"><span class="header-section-number">5.1</span> Cas des <code>list</code>es</h3>
<table class="table table-bordered table-hover">
<thead class="table-warning">
<tr class="header">
<th><pre><code>    Opération</code></pre></th>
<th><pre><code>  Exemple</code></pre></th>
<th>Complexité</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Ajout à la fin</td>
<td><code>liste.append(e)</code></td>
<td><math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo stretchy="true" form="prefix">(</mo><mn>1</mn><mo stretchy="true" form="postfix">)</mo></mrow></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></td>
</tr>
<tr class="even">
<td>Insertion d’un élément</td>
<td><code>liste.insert(i, e)</code></td>
<td><math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo stretchy="true" form="prefix">(</mo><mi>n</mi><mo stretchy="true" form="postfix">)</mo></mrow></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></td>
</tr>
<tr class="odd">
<td>Suppression à la fin</td>
<td><code>liste.pop()</code></td>
<td><math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo stretchy="true" form="prefix">(</mo><mn>1</mn><mo stretchy="true" form="postfix">)</mo></mrow></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></td>
</tr>
<tr class="even">
<td>Suppression au milieu</td>
<td><code>liste.pop(i)</code></td>
<td><math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo stretchy="true" form="prefix">(</mo><mi>n</mi><mo stretchy="true" form="postfix">)</mo></mrow></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></td>
</tr>
<tr class="odd">
<td>Accès à un élément</td>
<td><code>liste[i]</code></td>
<td><math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo stretchy="true" form="prefix">(</mo><mn>1</mn><mo stretchy="true" form="postfix">)</mo></mrow></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></td>
</tr>
<tr class="even">
<td>Modification d’un élément</td>
<td><code>liste[i] = e</code></td>
<td><math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo stretchy="true" form="prefix">(</mo><mn>1</mn><mo stretchy="true" form="postfix">)</mo></mrow></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></td>
</tr>
<tr class="odd">
<td>Longueur de la liste</td>
<td><code>len(liste)</code></td>
<td><math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo stretchy="true" form="prefix">(</mo><mn>1</mn><mo stretchy="true" form="postfix">)</mo></mrow></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></td>
</tr>
<tr class="even">
<td>Recherche d’un élément</td>
<td><code>e in liste</code></td>
<td><math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo stretchy="true" form="prefix">(</mo><mi>n</mi><mo stretchy="true" form="postfix">)</mo></mrow></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></td>
</tr>
</tbody>
</table>
<p><a href="https://wiki.python.org/moin/TimeComplexity#list" class="cite-source">Time complexity sur le wiki Python</a></p>
</section>
<section id="cas-des-dictionnaires" class="level3" data-number="5.2">
<h3 data-number="5.2" class="anchored" data-anchor-id="cas-des-dictionnaires"><span class="header-section-number">5.2</span> Cas des <code>dict</code>ionnaires</h3>
<table class="table table-bordered table-hover">
<thead class="table-warning">
<tr class="header">
<th><pre><code>    Opération</code></pre></th>
<th><pre><code>  Exemple</code></pre></th>
<th>Complexité</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Ajout d’un élément</td>
<td><code>dico[clé] = val</code></td>
<td><math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo stretchy="true" form="prefix">(</mo><mn>1</mn><mo stretchy="true" form="postfix">)</mo></mrow></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></td>
</tr>
<tr class="even">
<td>Modification d’un élément</td>
<td><code>dico[clé] = val</code></td>
<td><math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo stretchy="true" form="prefix">(</mo><mn>1</mn><mo stretchy="true" form="postfix">)</mo></mrow></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></td>
</tr>
<tr class="odd">
<td>Suppression d’un élément</td>
<td><code>del dico[clé]</code></td>
<td><math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo stretchy="true" form="prefix">(</mo><mn>1</mn><mo stretchy="true" form="postfix">)</mo></mrow></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></td>
</tr>
<tr class="even">
<td>Accès à un élément</td>
<td><code>dico[i]</code></td>
<td><math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo stretchy="true" form="prefix">(</mo><mn>1</mn><mo stretchy="true" form="postfix">)</mo></mrow></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></td>
</tr>
<tr class="odd">
<td>Recherche d’une clé</td>
<td><code>e in dico</code></td>
<td><math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo stretchy="true" form="prefix">(</mo><mn>1</mn><mo stretchy="true" form="postfix">)</mo></mrow></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></td>
</tr>
<tr class="even">
<td>Recherche d’un valeur</td>
<td><code>e in dico.values()</code></td>
<td><math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo stretchy="true" form="prefix">(</mo><mi>n</mi><mo stretchy="true" form="postfix">)</mo></mrow></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></td>
</tr>
</tbody>
</table>
<p><em>Note: les complexités données sont moyennes car dans le pire des cas, toutes ses opérations sont en <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo stretchy="true" form="prefix">(</mo><mi>n</mi><mo stretchy="true" form="postfix">)</mo></mrow></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math>.</em></p>
<p><a href="https://wiki.python.org/moin/TimeComplexity#dict" class="cite-source">Time complexity sur le wiki Python</a></p>


</section>
</section>

 ]]></description>
  <category>TNSI</category>
  <guid>https://www.lyceum.fr/2023-2024/tg/nsi/1-structures-de-donnees/1-interface-et-implementation/</guid>
  <pubDate>Thu, 16 May 2024 13:21:00 GMT</pubDate>
</item>
<item>
  <title>Chapitre 2: Programmation objet</title>
  <link>https://www.lyceum.fr/2023-2024/tg/nsi/1-structures-de-donnees/2-programmation-objet/</link>
  <description><![CDATA[ 




<div class="programme">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Programme
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="programme">
<table class="table table-bordered table-hover">
<thead class="table-warning">
<tr class="header">
<th>Contenus</th>
<th>Capacités attendues</th>
<th>Commentaires</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Vocabulaire de la programmation objet : classes, attributs, méthodes, objets.</td>
<td><p>Écrire la définition d’une classe.</p>
<p>Accéder aux attributs et méthodes d’une classe.</p></td>
<td>On n’aborde pas ici tous les aspects de la programmation objet comme le polymorphisme et l’héritage.</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</div>
<div class="intro">
<p></p><figure class="wikimage figure"><picture>
			  <source type="image/webp" srcset="/img/__vib0ZWcr-120.webp 120w, /img/__vib0ZWcr-120.svg 120w" sizes="100vw">
  <source type="image/svg+xml" srcset="/img/__vib0ZWcr-120.svg 120w" sizes="100vw">
				<img class="img-fluid figure-img" src="https://www.lyceum.fr/2023-2024/img/__vib0ZWcr-120.webp" width="120" height="48" alt="Object-oriented programming logo" loading="lazy" decoding="async">
			</picture>
<figcaption id="caption"></figcaption><figcaption id="credit">&nbsp;CC0&nbsp;<a id="image-description" href="//commons.wikimedia.org/wiki/File:OOP.svg">via Wikimedia Commons</a></figcaption></figure><p></p>
<p>La <em>programmation orientée objet&nbsp;(P.O.O.)</em> est un <a href="../../../../tg/nsi/4-langages-et-programmation/4-paradigmes-de-programmation/">paradigme de programmation</a> permettant au développeur de dépasser les objets proposés par le langage de programmation afin d’en créer de nouveaux adaptés au problème qu’il tente de résoudre: des utilisateurs, des messages, des jouets…</p>
</div>
<section id="attributs-et-méthodes" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="attributs-et-méthodes"><span class="header-section-number">1</span> Attributs et méthodes</h2>
<p>En POO, les objets sont décrits dans des <code>class</code>es contenant:</p>
<ul>
<li>des <em>attributs</em> qui sont les <em>données</em> associées à l’objet;</li>
<li>des <em>méthodes</em> qui sont les <em>fonctions</em> s’appliquant sur cet objet.</li>
</ul>
<p>En Python, on accède aux attributs et aux méthodes grâce à la <strong>notation pointée</strong>, vous l’avez déjà utilisée car Python est un langage fortement orienté objet.</p>
<p>Prenons l’exemple des objets de types <a href=""><code>date</code></a> du module <code>datetime</code>.</p>
<p>On commence par créer une date de ce type, ce que l’on appelle une instance de l’objet.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datetime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> date</span>
<span id="cb1-2"></span>
<span id="cb1-3">prise_bastille <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> date.fromisoformat(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1789-07-14"</span>)</span>
<span id="cb1-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type:"</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(prise_bastille))</span>
<span id="cb1-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"objet: "</span>, prise_bastille)</span></code></pre></div>
<p><span class="smallcaps">&gt;&gt;sortie</span></p>
<div class="cell-output cell-output-stdout">
<pre><code>type: &lt;class 'datetime.date'&gt;
objet:  1789-07-14</code></pre>
</div>
</div>
<section id="les-attributs-données" class="level3" data-number="1.1">
<h3 data-number="1.1" class="anchored" data-anchor-id="les-attributs-données"><span class="header-section-number">1.1</span> Les attributs: données</h3>
<p>Cet objet possède des **attributs*: les <em>données</em> relatives à cet objet.</p>
<p>On y accède grâce à la notation pointée: <code>objet.attribut</code></p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1">prise_bastille.day</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>14</code></pre>
</div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1">prise_bastille.month</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>7</code></pre>
</div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1">prise_bastille.year</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>1789</code></pre>
</div>
</div>
</section>
<section id="les-méthodes-fonctions" class="level3" data-number="1.2">
<h3 data-number="1.2" class="anchored" data-anchor-id="les-méthodes-fonctions"><span class="header-section-number">1.2</span> Les méthodes: fonctions</h3>
<p>Cet objet possède des **méthodes*: les <em>fonctions</em> s’appliquant sur cet objet.</p>
<p>On y accède grâce à la notation pointée: <code>objet.méthode(...)</code></p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Appel de la méthode sans argument</span></span>
<span id="cb9-2">prise_bastille.ctime()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>'Tue Jul 14 00:00:00 1789'</code></pre>
</div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Appel de la méthode avec un argument de type str</span></span>
<span id="cb11-2">prise_bastille.strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%A </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> %B %Y"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>'Tuesday 14 July 1789'</code></pre>
</div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Même appel mais en utilisant une version française</span></span>
<span id="cb13-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> locale</span>
<span id="cb13-3"></span>
<span id="cb13-4">locale.setlocale(locale.LC_ALL, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fr_FR.UTF-8"</span>)</span>
<span id="cb13-5"></span>
<span id="cb13-6">prise_bastille.strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%A </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> %B %Y"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>'mardi 14 juillet 1789'</code></pre>
</div>
</div>
</section>
</section>
<section id="création-dune-classe-et-instanciation" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="création-dune-classe-et-instanciation"><span class="header-section-number">2</span> Création d’une classe et instanciation</h2>
<p>En Python, on créé une classe avec la mot clé <code>class</code> qu’on nomme par habitude avec un nom en <a href="https://fr.wikipedia.org/wiki/Camel_case"><em>UpperCamelCase</em></a>.</p>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> ClasseDeLycee:</span>
<span id="cb15-2">    nom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Terminale"</span></span>
<span id="cb15-3">    numero <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb15-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># liste des élèves</span></span>
<span id="cb15-5">    eleves <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span></code></pre></div>
</div>
<p>L’objet <code>ClasseDeLycee</code> est une sorte de «patron» à partir duquel on va pouvoir créer des objets à la demande en créant ce que l’on appelle des instances par appel de la classe.</p>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## On crée deux instances de l'objet ClasseDeLycee</span></span>
<span id="cb16-2">term1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ClasseDeLycee()</span>
<span id="cb16-3">term2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ClasseDeLycee()</span></code></pre></div>
</div>
<p>On peut accéder aux attributs de nos objets à l’aide de la notation pointée: <code>nom_instance.attribut</code>.</p>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># nos deux instances contiennent les mêmes attributs nom et numero</span></span>
<span id="cb17-2">term1.nom</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>'Terminale'</code></pre>
</div>
</div>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb19-1">term2.nom</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>'Terminale'</code></pre>
</div>
</div>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb21-1">term1.numero, term2.numero</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>(1, 1)</code></pre>
</div>
</div>
<p>On peut modifier les attributs d’un objet après son instanciation bien que l’on préfère utiliser un constructeur pour personnliser les objets à leur instanciation comme on le verra plus loin.</p>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># méthode déconseillée</span></span>
<span id="cb23-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on utilise plutôt des getters et setters pour ça (voir plus bas)</span></span>
<span id="cb23-3">term2.numero <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb23-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># les attributs ont bien été modifiés pour l'instance term2</span></span>
<span id="cb23-5">term2.nom, term2.numero</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>('Terminale', 2)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># par contre les attributs de l'instance term1 sont inchangés</span></span>
<span id="cb25-2">term1.nom, term1.numero</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>('Terminale', 1)</code></pre>
</div>
</div>
<div class="plus">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
En plus: Attributs de classe et d'instance
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="plus" data-titre="Attributs de classe et d'instance">
<p>Dans cette partie nous avons utilisé des attributs de classe sans le <code>self</code> pour plus de simplicité dans cette introduction.</p>
<p>Par la suite, on utilisera des attributs d’instance(<code>self.attribut</code>), il y a de légères différences qui sortent du cadre de ce cours.</p>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="les-méthodes-et-la-variable-self" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="les-méthodes-et-la-variable-self"><span class="header-section-number">3</span> Les méthodes et la variable <code>self</code></h2>
<p>Les méthodes sont des fonctions définies au sein de la classe qui s’appliquent aux objets créés grâce à cette classe.</p>
<p>Une méthode prend toujours en premier paramètre l’objet lui-même par l’intermédiare du paramètre qu’on appelle par convention <code>self</code>.</p>
<p>De façon générale, le mot clé <code>self</code> désignera l’instance de l’objet au sein du code de la classe.</p>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> ClasseDeLycee:</span>
<span id="cb27-2">    nom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Terminale"</span></span>
<span id="cb27-3">    numero <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb27-4">    eleves <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb27-5"></span>
<span id="cb27-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> ajoute_eleve(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, élève):</span>
<span id="cb27-7">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Cette méthode ajoute un élève dans la classe"""</span></span>
<span id="cb27-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.eleves.append(élève)</span></code></pre></div>
</div>
<p>Lorsqu’on appelle une méthode sur une instance de la classe, on utilisera encore la notation pointée: <code>nom_instance.methode(...)</code>.</p>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb28-1">term1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ClasseDeLycee()</span>
<span id="cb28-2">term1.ajoute_eleve(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alan Turing"</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># l'attribut eleves a bien été modifié</span></span>
<span id="cb29-2">term1.eleves</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>['Alan Turing']</code></pre>
</div>
</div>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mais pas pour l'instance term2</span></span>
<span id="cb31-2">term2.eleves</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>[]</code></pre>
</div>
</div>
</section>
<section id="méthodes-particulières" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="méthodes-particulières"><span class="header-section-number">4</span> Méthodes particulières</h2>
<section id="initialisation-avec-le-constructeur-__init__" class="level3" data-number="4.1">
<h3 data-number="4.1" class="anchored" data-anchor-id="initialisation-avec-le-constructeur-__init__"><span class="header-section-number">4.1</span> Initialisation avec le constructeur <code>__init__()</code></h3>
<p>Il est souvent interressant de créer des objets différents à partir d’un même classe , il est donc possible d’ajouter des arguments qui seront pris en charge lors de l’instanciation de l’objet en utilisant la méthode prédéfinie: <code>__init__()</code>.</p>
<p>Voici comment nous pourrions permettre de personnnaliser notre classe dès sa création.</p>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> ClasseDeLycee:</span>
<span id="cb33-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nom, numero, eleves):</span>
<span id="cb33-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.nom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nom</span>
<span id="cb33-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.numero <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> numero</span>
<span id="cb33-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.eleves <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> eleves</span>
<span id="cb33-6"></span>
<span id="cb33-7"></span>
<span id="cb33-8">prem7 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ClasseDeLycee(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Première"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ada Lovelace"</span>])</span>
<span id="cb33-9"></span>
<span id="cb33-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(prem7.nom, prem7.numero, prem7.eleves)</span></code></pre></div>
<p><span class="smallcaps">&gt;&gt;sortie</span></p>
<div class="cell-output cell-output-stdout">
<pre><code>Première 7 ['Ada Lovelace']</code></pre>
</div>
</div>
<p>On peut donner des valeurs par défaut aux paramètres dans la signature de la méthode <code>__init__</code>.</p>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> ClasseDeLycee:</span>
<span id="cb35-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Terminale"</span>, numero<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, eleves<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[]):</span>
<span id="cb35-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.nom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nom</span>
<span id="cb35-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.numero <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> numero</span>
<span id="cb35-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.eleves <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> eleves</span>
<span id="cb35-6"></span>
<span id="cb35-7"></span>
<span id="cb35-8">term3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ClasseDeLycee()</span>
<span id="cb35-9"></span>
<span id="cb35-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(term3.nom, term3.numero, term3.eleves)</span></code></pre></div>
<p><span class="smallcaps">&gt;&gt;sortie</span></p>
<div class="cell-output cell-output-stdout">
<pre><code>Terminale 3 []</code></pre>
</div>
</div>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on peut personnaliser les attributs souhaités de l'instance</span></span>
<span id="cb37-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># en gardant les valeurs par défaut pour les autres</span></span>
<span id="cb37-3"></span>
<span id="cb37-4">term4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ClasseDeLycee(numero<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb37-5"></span>
<span id="cb37-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(term4.nom, term4.numero, term4.eleves)</span></code></pre></div>
<p><span class="smallcaps">&gt;&gt;sortie</span></p>
<div class="cell-output cell-output-stdout">
<pre><code>Terminale 4 []</code></pre>
</div>
</div>
</section>
<section id="la-méthode-__str__" class="level3" data-number="4.2">
<h3 data-number="4.2" class="anchored" data-anchor-id="la-méthode-__str__"><span class="header-section-number">4.2</span> La méthode <code>__str__()</code></h3>
<p>Cette méthode est utilisée pour donner une représentation des objets sous forme lisible lors d’un appel de la fonction <code>print</code>.</p>
<p>Pour l’instant si on affiche notre instance, on a:</p>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(term4)</span></code></pre></div>
<p><span class="smallcaps">&gt;&gt;sortie</span></p>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;__main__.ClasseDeLycee object at 0x7f3c094d0410&gt;</code></pre>
</div>
</div>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> ClasseDeLycee:</span>
<span id="cb41-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Terminale"</span>, numero<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, eleves<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[]):</span>
<span id="cb41-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.nom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nom</span>
<span id="cb41-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.numero <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> numero</span>
<span id="cb41-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.eleves <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> eleves</span>
<span id="cb41-6"></span>
<span id="cb41-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__str__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb41-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"&lt;Classe de Lycée </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>nom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>numero<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&gt;"</span></span>
<span id="cb41-9"></span>
<span id="cb41-10"></span>
<span id="cb41-11">term3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ClasseDeLycee()</span>
<span id="cb41-12"></span>
<span id="cb41-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(term3)</span></code></pre></div>
<p><span class="smallcaps">&gt;&gt;sortie</span></p>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;Classe de Lycée Terminale3&gt;</code></pre>
</div>
</div>
<div class="plus">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
En plus
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="plus">
<p>On peut également utiliser la méthode <code>__repr__()</code> qui est plus générale et qui sera également utilisée lors d’un appel de la fonction <code>print</code> si <code>__str__</code> n’est pas définie.</p>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="les-accesseursgetters-et-mutateurs-setters" class="level3" data-number="4.3">
<h3 data-number="4.3" class="anchored" data-anchor-id="les-accesseursgetters-et-mutateurs-setters"><span class="header-section-number">4.3</span> Les accesseurs(<em>getters</em>) et mutateurs (<em>setters</em>)</h3>
<p>Il est fortement <em>déconseillé</em> de récupérer <em>(get)</em> ou modifier <em>(set)</em> des attributs de l’objet directement par l’utilisation de la notation pointée vue précédemment.</p>
<p>Pour chaque attribut, il est conseillé de définir deux méthodes:</p>
<ul>
<li><code>get_nom_attribut</code>: pour le récupérer.</li>
<li><code>set_nom_attribut</code>: pour le modifier.</li>
</ul>
<p><em>C’est long oui, mais c’est la pratique couramment recommandée.</em></p>
<p>Voici ce que cela donnerait dans notre cas, on a trois attributs, il faut donc ajouter six méthodes.</p>
<div class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> ClasseDeLycee:</span>
<span id="cb43-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Terminale"</span>, numero<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, eleves<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[]):</span>
<span id="cb43-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.nom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nom</span>
<span id="cb43-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.numero <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> numero</span>
<span id="cb43-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.eleves <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> eleves</span>
<span id="cb43-6"></span>
<span id="cb43-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_nom(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb43-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.nom</span>
<span id="cb43-9"></span>
<span id="cb43-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> set_nom(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, nom):</span>
<span id="cb43-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.nom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nom</span>
<span id="cb43-12"></span>
<span id="cb43-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_numero(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb43-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.numero</span>
<span id="cb43-15"></span>
<span id="cb43-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> set_numero(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, numero):</span>
<span id="cb43-17">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.numero <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> numero</span>
<span id="cb43-18"></span>
<span id="cb43-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_eleves(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb43-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.eleves</span>
<span id="cb43-21"></span>
<span id="cb43-22">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> set_eleves(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, eleves):</span>
<span id="cb43-23">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.eleves <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> eleves</span>
<span id="cb43-24"></span>
<span id="cb43-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__str__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb43-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"&lt;Classe de Lycée </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>nom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>numero<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&gt;"</span></span>
<span id="cb43-27"></span>
<span id="cb43-28"></span>
<span id="cb43-29">c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ClasseDeLycee()</span>
<span id="cb43-30"></span>
<span id="cb43-31"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Au début"</span>)</span>
<span id="cb43-32"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(c)</span></code></pre></div>
<p><span class="smallcaps">&gt;&gt;sortie</span></p>
<div class="cell-output cell-output-stdout">
<pre><code>Au début
&lt;Classe de Lycée Terminale3&gt;</code></pre>
</div>
</div>
<div class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Modification des attributs avec les setters</span></span>
<span id="cb45-2">c.set_nom(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Seconde"</span>)</span>
<span id="cb45-3">c.set_numero(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span>
<span id="cb45-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(c)</span></code></pre></div>
<p><span class="smallcaps">&gt;&gt;sortie</span></p>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;Classe de Lycée Seconde15&gt;</code></pre>
</div>
</div>
<div class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb47-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Récupération des attributs avec les getters</span></span>
<span id="cb47-2">c.get_nom(), c.get_eleves()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="26">
<pre><code>('Seconde', [])</code></pre>
</div>
</div>
</section>
</section>
<section id="en-plus-héritage" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="en-plus-héritage"><span class="header-section-number">5</span> En plus: Héritage</h2>
<p>Un des aspects intéressants <em>(mais hors-programme)</em> est la possibilité de créer des sous classes qui héritent des attributs et méthode de la classe parente.</p>
<p>L’héritage q’il est bien réalisé permet d’éviter des répétitions de code <em>(Principe DRY: Don’t Repeat Yourself)</em>, et permet d’aboutir à une grande structuration des données.</p>
<div class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb49-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Terminale(ClasseDeLycee):</span>
<span id="cb49-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, numero, eleves<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[]):</span>
<span id="cb49-3">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># super appelle le constructeur du parent</span></span>
<span id="cb49-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"terminale"</span>, numero, eleves)</span>
<span id="cb49-5"></span>
<span id="cb49-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># On ne met à jour que les méthodes qui sont changées</span></span>
<span id="cb49-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Toutes les autres méthodes sont héritées</span></span>
<span id="cb49-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__str__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb49-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"&lt;Classe de Terminale</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>numero<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&gt;"</span></span>
<span id="cb49-10"></span>
<span id="cb49-11"></span>
<span id="cb49-12">term7 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Terminale(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb49-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(term7)</span></code></pre></div>
<p><span class="smallcaps">&gt;&gt;sortie</span></p>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;Classe de Terminale7&gt;</code></pre>
</div>
</div>
<div class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb51-1">term7.get_eleves()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="28">
<pre><code>[]</code></pre>
</div>
</div>
<p>Toutes les méthodes du parent non modifiées sont <em>héritées</em>.</p>
<div class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb53-1">term7.set_eleves([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Albert Einstein"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Paul MacCartney"</span>])</span>
<span id="cb53-2">term7.get_eleves()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="29">
<pre><code>['Albert Einstein', 'Paul MacCartney']</code></pre>
</div>
</div>
<p>Il reste cependant à définir les méthodes et attributs propres à cette classe: <code>voeux_parcoursup</code>, <code>mention_bac</code>…</p>


</section>

 ]]></description>
  <category>TNSI</category>
  <guid>https://www.lyceum.fr/2023-2024/tg/nsi/1-structures-de-donnees/2-programmation-objet/</guid>
  <pubDate>Thu, 16 May 2024 13:21:00 GMT</pubDate>
</item>
<item>
  <title>Chapitre 3: Structures linéaires: piles, files</title>
  <link>https://www.lyceum.fr/2023-2024/tg/nsi/1-structures-de-donnees/3-structures-lineaires-piles-files/</link>
  <description><![CDATA[ 




<div class="programme">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Programme
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="programme">
<table class="table table-bordered table-hover">
<thead class="table-warning">
<tr class="header">
<th>Contenus</th>
<th>Capacités attendues</th>
<th>Commentaires</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Structures de données, interface et implémentation.</td>
<td><p>Spécifier une structure de données par son interface.</p>
<p>Distinguer interface et implémentation.</p>
<p>Écrire plusieurs implémentations d’une même structure de données.</p></td>
<td>L’abstraction des structures de données est introduite après plusieurs implémentations d’une structure simple comme la file (avec un tableau ou avec deux piles).</td>
</tr>
<tr class="even">
<td>Listes, piles, files : structures linéaires.</td>
<td><p>Distinguer des structures par le jeu des méthodes qui les caractérisent.</p>
<p>Choisir une structure de données adaptée à la situation à modéliser.</p></td>
<td>On distingue les modes FIFO(`first_ <em>in first out</em>) et LIFO (<em>last in first</em> <em>out</em>) des piles et des files.</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</div>
<div class="intro">
<p></p><figure class="wikimage figure"><picture>
			  <source type="image/webp" srcset="/img/cpJVaN2gRZ-300.webp 300w, /img/cpJVaN2gRZ-600.webp 600w, /img/cpJVaN2gRZ-700.webp 700w" sizes="100vw">
  <source type="image/svg+xml" srcset="/img/cpJVaN2gRZ-700.svg 700w" sizes="100vw">
				<img class="img-fluid figure-img" src="https://www.lyceum.fr/2023-2024/img/cpJVaN2gRZ-300.webp" width="700" height="344" alt="Différences entre les piles et files" loading="lazy" decoding="async">
			</picture>
<figcaption id="caption">Différences entre les piles et files</figcaption><figcaption id="credit">©&nbsp;&nbsp;CC BY-SA 4.0&nbsp;<a id="image-description" href="//commons.wikimedia.org/wiki/File:QUEUE_VS_STACK.svg">via Wikimedia Commons</a></figcaption></figure><p></p>
<blockquote class="blockquote">
<p>Dans ce chapitre nous allons décrire des structures de données linéaires appelées <strong>listes</strong>, dont nous verrons deux formes restreintes <em>très efficaces</em>: les <strong>piles</strong> et les <strong>files</strong>. Il faut bien comprendre que lorsqu’on parle de structure de données, on parle d’une <em>représentation abstraite</em> qui n’est pas en lien direct avec son implémentation qui peut-être réalisé de diverses manières suivant le langage de programmation, voire au sein d’un même langage de programmation.</p>
</blockquote>
</div>
<!-- TODO implémentation en python avec des classes queue from collections ou sinon fonction(voir IPT Eyrolles) ou Prpeabac -->
<section id="les-piles-lifo" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="les-piles-lifo"><span class="header-section-number">1</span> Les piles: <em>LIFO</em></h2>
<p>Les <strong>pile</strong>s(<em>stacks</em> en anglais) correspondent exactement à la notion de pile dans la vie courante:</p>
<ul>
<li>Une pile de cartes,</li>
<li>Une pile d’assiettes…</li>
</ul>
<p></p><figure class="wikimage figure"><picture>
			  <source type="image/webp" srcset="/img/-Zp7F0M4Iv-300.webp 300w, /img/-Zp7F0M4Iv-313.webp 313w, /img/-Zp7F0M4Iv-600.webp 600w" sizes="100vw">
  <source type="image/svg+xml" srcset="/img/-Zp7F0M4Iv-313.svg 313w" sizes="100vw">
				<img class="img-fluid figure-img" src="https://www.lyceum.fr/2023-2024/img/-Zp7F0M4Iv-300.webp" width="600" height="431" alt="La pile est une structure de données LIFO: dernier arrivé premier sorti." loading="lazy" decoding="async">
			</picture>
<figcaption id="caption">La pile est une structure de données LIFO: dernier arrivé premier sorti.</figcaption><figcaption id="credit">&nbsp;Public domain&nbsp;<a id="image-description" href="//commons.wikimedia.org/wiki/File:Data_stack.svg">via Wikimedia Commons</a></figcaption></figure><p></p>
<p>Pour ajouter un élément on l’empile, il se retrouve donc au-dessus, et pour retirer un élément on ne peut retirer <strong>que l’élément se trouvant au sommet de la pile</strong>.</p>
<p>En anglais on dit <em>last in, first out</em> ou <em>LIFO</em> pour dire: dernier arrivé premier sorti.</p>
<div class="examples">
<p>Ce type de structure de données est par exemple utilisé dans:</p>
<ul>
<li>les éditeurs avec la fonction <em>Annuler</em> (CTRL+Z)</li>
<li>les navigateurs pour reculer d’une page.</li>
<li>les compilateurs et interpréteurs pour évaluer des séries de fonctions (voir <a href="../../../../tg/nsi/4-langages-et-programmation/3-recursivite">fonctions récursives</a>)</li>
<li>Sans l’évaluation des expressions mathématiques avec parenthèses <code>((ax + b) * c)</code></li>
</ul>
</div>
<section id="interface" class="level3" data-number="1.1">
<h3 data-number="1.1" class="anchored" data-anchor-id="interface"><span class="header-section-number">1.1</span> Interface</h3>
<p>Une pile est définie par l’interface comprenant les opérations suivantes:</p>
<ul>
<li><strong>Consulter</strong> le dernier élément de la pile: <code>sommet()</code></li>
<li>Savoir si la pile <strong>est vide</strong>: <code>est_vide()</code></li>
<li><strong>Empiler</strong> un élément pour le mettre au sommet de la pile: <code>empiler(élément)</code>.</li>
<li><strong>Dépiler</strong> un élément pour le retirer du sommet de la pile: <code>dépiler()</code>.</li>
</ul>
<div class="prop">
<p>Les méthodes <code>empiler</code> et <code>dépiler</code> doivent s’effectuer en temps constant (Complexité <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo stretchy="true" form="prefix">(</mo><mn>1</mn><mo stretchy="true" form="postfix">)</mo></mrow></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math>)</p>
</div>
</section>
<section id="implémentation-en-python" class="level3" data-number="1.2">
<h3 data-number="1.2" class="anchored" data-anchor-id="implémentation-en-python"><span class="header-section-number">1.2</span> Implémentation en Python</h3>
<p>L’objet <code>list</code> en Python présente deux méthodes qui lui permettent d’implémenter la pile:</p>
<ul>
<li><code>list.append(el)</code>: ajoute l’élément en fin de liste.</li>
<li><code>list.pop()</code>: supprime le dernier élément de la liste et le renvoie.</li>
</ul>
<p>De plus ces deux méthodes s’effectuent en temps constant (voir ce <a href="../../../../tg/nsi/1-structures-de-donnees/1-interface-et-implementation/#cas-des-listes">tableau</a> pour plus de détails.)</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1">pile <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span>
<span id="cb1-2">pile.append(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb1-3">pile.append(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(pile)    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># affiche [3, 4, 5, 6, 7]</span></span>
<span id="cb1-6">pile.pop()     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># renvoie 7</span></span>
<span id="cb1-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(pile)    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># affiche [3, 4, 5, 6]</span></span>
<span id="cb1-8">pile.pop()     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># renvoie 6</span></span>
<span id="cb1-9">pile.pop()     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># renvoie 5</span></span>
<span id="cb1-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(pile)    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># affiche [3, 4]</span></span></code></pre></div>
<p><a href="https://docs.python.org/3/tutorial/datastructures.html#using-lists-as-stacks" class="cite-source">Documentation de Python</a></p>
<div class="appli">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Application
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="appli">
<p>Créer une classe <code>Pile</code> qui implémente le type abstrait pile en stockant les données de la pile dans un attribut privé <code>_data</code> de type <code>list</code>. Voir cet <a href="./exo/#exo1">exercice</a> pour plus de détails.</p>
</div>
</div>
</div>
</div>
</div>
</section>
</section>
<section id="les-files-fifo" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="les-files-fifo"><span class="header-section-number">2</span> Les files: <em>FIFO</em></h2>
<p>Les files(<em>queues</em> en anglais) correspondent également à la notion de file dans la vie courante:</p>
<ul>
<li>Une file d’attente à la caisse,</li>
<li>à un feu rouge…</li>
</ul>
<p></p><figure class="wikimage figure"><picture>
			  <source type="image/webp" srcset="/img/wjBTl_3khf-300.webp 300w, /img/wjBTl_3khf-405.svg 405w" sizes="100vw">
  <source type="image/svg+xml" srcset="/img/wjBTl_3khf-405.svg 405w" sizes="100vw">
				<img class="img-fluid figure-img" src="https://www.lyceum.fr/2023-2024/img/wjBTl_3khf-300.webp" width="405" height="265" alt="La file est une structure de données FIFO: premier arrivé premier sorti." loading="lazy" decoding="async">
			</picture>
<figcaption id="caption">La file est une structure de données FIFO: premier arrivé premier sorti.</figcaption><figcaption id="credit">©&nbsp;&nbsp;CC BY-SA 3.0&nbsp;<a id="image-description" href="//commons.wikimedia.org/wiki/File:Data_Queue.svg">via Wikimedia Commons</a></figcaption></figure><p></p>
<p>Lorsqu’on ajoute un élément, celui-ci se retrouve à la fin de la file, et on <strong>retire les éléments dans l’ordre dans lequel ils sont arrivés</strong>.</p>
<p>En anglais on dit <em>first in, first out</em> ou <em>FIFO</em> pour dire: <strong>premier arrivé premier sorti</strong>.</p>
<div class="examples">
<p>Ce type de structure de données est par exemple utilisé dans:</p>
<ul>
<li>Un gestionnaire d’impression pour ordonner l’ordre des impressions.</li>
<li>Un processeur pour planifier l’ordre des opérations.</li>
<li>Un serveur web pour ordonner les réponses en fonction de l’ordre des demandes.</li>
</ul>
</div>
<section id="interface-1" class="level3" data-number="2.1">
<h3 data-number="2.1" class="anchored" data-anchor-id="interface-1"><span class="header-section-number">2.1</span> Interface</h3>
<p>Une file est une liste sur laquelle on autorise seulement 4 opérations:</p>
<ul>
<li><strong>Consulter</strong> le premier élément de la file: la tête: <code>tête()</code>.</li>
<li>Tester si la file <strong>est vide</strong>: <code>est_vide()</code>.</li>
<li><strong>Enfiler</strong> un nouvel élément: le mettre en dernier dans la queue: <code>enfiler(élément)</code>.</li>
<li><strong>Défiler</strong> un élément, supprimer et renvoyer le premier élément: <code>défiler()</code>.</li>
</ul>
<div class="prop">
<p>Les méthodes <code>enfiler</code> et <code>défiler</code> doivent s’effectuer en temps constant (Complexité <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo stretchy="true" form="prefix">(</mo><mn>1</mn><mo stretchy="true" form="postfix">)</mo></mrow></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math>)</p>
</div>
</section>
<section id="implémentation-en-python-1" class="level3" data-number="2.2">
<h3 data-number="2.2" class="anchored" data-anchor-id="implémentation-en-python-1"><span class="header-section-number">2.2</span> Implémentation en Python</h3>
<p>L’objet <code>list</code> en Python présente deux méthodes qui lui permettent d’implémenter la file:</p>
<ul>
<li><code>list.append(el)</code>: ajoute l’élément en fin de liste.</li>
<li><code>list.pop(0)</code>: supprime le premier élément de la liste et le renvoie.</li>
</ul>
<p>Toutefois, les listes ne sont pas très efficaces pour réaliser ce type de traitement. Alors que les ajouts et suppressions en fin de liste sont rapides, les opérations d’insertions ou de retraits en début de liste sont lentes (car tous les autres éléments doivent être décalés d’une position <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo stretchy="true" form="prefix">(</mo><mi>n</mi><mo stretchy="true" form="postfix">)</mo></mrow></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math>).</p>
<p>Pour implémenter une file avec des opérations en temps constant <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo stretchy="true" form="prefix">(</mo><mn>1</mn><mo stretchy="true" form="postfix">)</mo></mrow></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math>, on peut utiliser la classe <a href="https://docs.python.org/fr/3/library/collections.html#collections.deque"><code>collections.deque</code></a>. Les <code>deques</code> sont une généralisation des piles et des files appelée <strong>liste chainée double</strong> (en anglais <em>double-ended queue</em>).</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> deque</span>
<span id="cb2-2">queue <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> deque()</span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># On considère une file allant de gauche à droite</span></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on enfile à gauche</span></span>
<span id="cb2-5">queue.appendleft(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jobi"</span>)    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># enfile 'Jobi'</span></span>
<span id="cb2-6">queue.appendleft(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Joba"</span>)    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># enfile 'Joba'</span></span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># L'élément en tête est à droite au dernier indice</span></span>
<span id="cb2-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(queue[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># affiche "Jobi"</span></span>
<span id="cb2-10"></span>
<span id="cb2-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on défile à droite</span></span>
<span id="cb2-12">queue.pop()                 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># défile 'Jobi' et le renvoie</span></span>
<span id="cb2-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(queue[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># affiche "Joba" qui est en tête de queue maintenant</span></span>
<span id="cb2-14">queue.pop()                 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># défile 'Joba' et le renvoie</span></span>
<span id="cb2-15"></span>
<span id="cb2-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on vérifie que la queue est bien vide</span></span>
<span id="cb2-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(queue) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># renvoie True</span></span></code></pre></div>
<p><a href="https://docs.python.org/3/tutorial/datastructures.html#using-lists-as-queues" class="cite-source">Documentation de Python</a></p>
<div class="appli">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Application
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="appli">
<p>Créer une classe <code>File</code> qui implémente le type abstrait file en stockant les données de la file dans un attribut privé <code>_data</code> de type <code>collections.deque</code>. Voir cet <a href="./exo/#exo2">exercice</a> pour plus de détails.</p>
</div>
</div>
</div>
</div>
</div>
</section>
</section>
<section id="comment-réaliser-une-boucle" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="comment-réaliser-une-boucle"><span class="header-section-number">3</span> Comment réaliser une boucle?</h2>
<p>L’interface des piles et files étant volontairement très réduite, il est impossible d’accéder aux éléments présents au milieu sans les sortir.</p>
<p>Donc pour itérer sur les éléments, on les retire jusqu’à ce que la structure soit vide.</p>
<section id="avec-une-pile" class="level3" data-number="3.1">
<h3 data-number="3.1" class="anchored" data-anchor-id="avec-une-pile"><span class="header-section-number">3.1</span> Avec une pile</h3>
<pre><code>while not pile.est_vide():
    e = pile.dépiler()</code></pre>
<p>L’ordre de sortie est l’inverse de l’ordre d’entrée.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># instanciation</span></span>
<span id="cb4-2">pile <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># empile au sommet Jobi Joba</span></span>
<span id="cb4-5">pile.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Jobi'</span>)</span>
<span id="cb4-6">pile.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Joba'</span>)</span>
<span id="cb4-7"></span>
<span id="cb4-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dépile tout</span></span>
<span id="cb4-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(pile) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb4-10">    e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pile.pop()</span>
<span id="cb4-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(e, end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' | '</span>)</span></code></pre></div>
<p><strong>Sortie</strong> <code>Joba | Jobi |</code></p>
</section>
<section id="avec-une-file" class="level3" data-number="3.2">
<h3 data-number="3.2" class="anchored" data-anchor-id="avec-une-file"><span class="header-section-number">3.2</span> Avec une file</h3>
<pre><code>while not file.est_vide():
    e = file.défiler()</code></pre>
<p>L’ordre de sortie est le même que l’ordre d’entrée.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> deque</span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># instanciation</span></span>
<span id="cb6-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> deque()</span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># enfile à gauche  Jobi Joba</span></span>
<span id="cb6-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.appendleft(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Jobi'</span>)</span>
<span id="cb6-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.appendleft(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Joba'</span>)</span>
<span id="cb6-8"></span>
<span id="cb6-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># défile tout</span></span>
<span id="cb6-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb6-11">    e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.pop()</span>
<span id="cb6-12">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(e, end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' | '</span>)</span></code></pre></div>
<p><strong>Sortie</strong> <code>Jobi | Joba |</code></p>


</section>
</section>

 ]]></description>
  <category>TNSI</category>
  <guid>https://www.lyceum.fr/2023-2024/tg/nsi/1-structures-de-donnees/3-structures-lineaires-piles-files/</guid>
  <pubDate>Thu, 16 May 2024 13:21:00 GMT</pubDate>
</item>
<item>
  <title>Chapitre 4: Arbres</title>
  <link>https://www.lyceum.fr/2023-2024/tg/nsi/1-structures-de-donnees/4-arbres/</link>
  <description><![CDATA[ 




<div class="programme">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Programme
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="programme">
<table class="table table-bordered table-hover">
<thead class="table-warning">
<tr class="header">
<th>Contenus</th>
<th>Capacités attendues</th>
<th>Commentaires</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><p>Arbres : structures hiérarchiques.</p>
<p>Arbres binaires : nœuds, racines, feuilles, sous-arbres gauches, sous-arbres droits.</p></td>
<td><p>Identifier des situations nécessitant une structure de données arborescente.</p>
<p>Évaluer quelques mesures des arbres binaires (taille, encadrement de la hauteur, etc.).</p></td>
<td>On fait le lien avec la rubrique « algorithmique ».</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</div>
<div class="intro">
<figure class="half right figure">
<a href="https://commons.wikimedia.org/wiki/File:DOM-model.svg#/media/File:DOM-model.svg"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/5a/DOM-model.svg/1200px-DOM-model.svg.png" alt="DOM-model.svg" class="figure-img"></a>
<figcaption>
By ‍Birger Eriksson - <span class="int-own-work" lang="en">Own work</span>, <a href="https://creativecommons.org/licenses/by-sa/3.0" title="Creative Commons Attribution-Share Alike 3.0">CC BY-SA 3.0</a>, <a href="https://commons.wikimedia.org/w/index.php?curid=18034500">Link</a>
</figcaption>
</figure>
<blockquote class="blockquote">
<p>Dans ce chapitre, on présente une nouvelle structure de donnée: les <em>arbres</em> qui sont particulièrement adaptés à la représentation des données hiérarchiques comme un arbre généalogique ou encore le <a href="https://fr.wikipedia.org/wiki/Document_Object_Model">DOM</a> d’une page <code>html</code>.</p>
</blockquote>
</div>
<section id="vocabulaire" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="vocabulaire"><span class="header-section-number">1</span> Vocabulaire</h2>
<dl>
<dt>
Arbre
</dt>
<dd>
<div>
<p>Un arbre est constitué de <strong>nœuds</strong> reliés par des <strong>arêtes</strong>. Souvent les nœuds ont une valeur: l’<em>étiquette</em>.</p>
</div>
</dd>
<dt>
Racine d’un arbre enraciné
</dt>
<dd>
<div>
<p>Un arbre enraciné (ou arborescence) possède à sa base une <strong>racine</strong> auxquels sont reliés d’autres nœuds qui sont ses <strong>descendants</strong>.</p>
</div>
</dd>
</dl>
<p></p><figure class="wikimage figure"><picture>
			  <source type="image/webp" srcset="/img/LOpgilFumc-206.webp 206w, /img/LOpgilFumc-206.svg 206w" sizes="100vw">
  <source type="image/svg+xml" srcset="/img/LOpgilFumc-206.svg 206w" sizes="100vw">
				<img class="img-fluid figure-img" src="https://www.lyceum.fr/2023-2024/img/LOpgilFumc-206.webp" width="206" height="235" alt="Dans cet arbre, la racine est le noeud 2 au sommet coloré en vert." loading="lazy" decoding="async">
			</picture>
<figcaption id="caption">Dans cet arbre, la racine est le noeud 2 au sommet coloré en vert.</figcaption><figcaption id="credit">©&nbsp;&nbsp;CC BY-SA 4.0&nbsp;<a id="image-description" href="//commons.wikimedia.org/wiki/File:Tree_(computer_science).svg">via Wikimedia Commons</a></figcaption></figure><p></p>
<p>Un nœud situé à l’extrémité de l’arbre qui n’a donc pas de descendants est une <strong>feuille</strong>.</p>
<div class="prop">
<p>Chaque nœud peut avoir un nombre quelconque de nœuds fils, mais il n’a qu’un nœud père (sauf la racine qui n’a pas de nœud père).</p>
</div>
<dl>
<dt>
Profondeur d’un nœud
</dt>
<dd>
<div>
<p>La profondeur d’un nœud est la distance, c’est-à-dire, le nombre d’arêtes de la racine au nœud.</p>
</div>
</dd>
<dt>
Hauteur d’un arbre
</dt>
<dd>
<div>
<p>La hauteur d’un arbre est la plus grande profondeur d’une feuille de l’arbre.</p>
</div>
</dd>
<dt>
Taille d’un arbre
</dt>
<dd>
<div>
<p>La taille d’un arbre est son nombre de nœuds.</p>
</div>
</dd>
</dl>
<div class="appli">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Application
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="appli">
<p>Reproduire l’arbre ci-dessus, et l’annoter en légendant:</p>
<ul>
<li>la racine,</li>
<li>des feuilles,</li>
<li>un nœud père et ses fils.</li>
</ul>
<p>Calculer la hauteur et la taille de cet arbre.</p>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="arbres-binaires" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="arbres-binaires"><span class="header-section-number">2</span> Arbres binaires</h2>
<section id="définition" class="level3" data-number="2.1">
<h3 data-number="2.1" class="anchored" data-anchor-id="définition"><span class="header-section-number">2.1</span> Définition</h3>
<dl>
<dt>
Arbre binaire
</dt>
<dd>
<div>
<p>Les arbres binaires sont un type d’arbres particuliers pour lesquels chaque nœud a au plus <strong>deux fils</strong>.</p>
</div>
</dd>
</dl>
<p></p><figure class="wikimage figure"><picture>
			  <source type="image/webp" srcset="/img/SVnOxfIZkO-300.webp 300w, /img/SVnOxfIZkO-600.webp 600w" sizes="100vw">
  <source type="image/svg+xml" srcset="/img/SVnOxfIZkO-300.svg 300w" sizes="100vw">
				<img class="img-fluid figure-img" src="https://www.lyceum.fr/2023-2024/img/SVnOxfIZkO-300.webp" width="600" height="500" alt="Dans un arbre binaire, un noeud ne peut avoir plus de 2 enfants." loading="lazy" decoding="async">
			</picture>
<figcaption id="caption">Dans un arbre binaire, un noeud ne peut avoir plus de 2 enfants.</figcaption><figcaption id="credit">&nbsp;Public domain&nbsp;<a id="image-description" href="//commons.wikimedia.org/wiki/File:Binary_tree.svg">via Wikimedia Commons</a></figcaption></figure><p></p>
</section>
<section id="implémentation-récursive" class="level3" data-number="2.2">
<h3 data-number="2.2" class="anchored" data-anchor-id="implémentation-récursive"><span class="header-section-number">2.2</span> Implémentation récursive</h3>
<p>Comme chaque nœud d’un arbre binaire a au plus deux enfants, on définit les sous arbres gauche et sous arbre droit d’un nœud.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><picture>
			  <source type="image/webp" srcset="/img/hnpexNJLV5-300.webp 300w, /img/hnpexNJLV5-589.webp 589w" sizes="100vw">
  <source type="image/png" srcset="/img/hnpexNJLV5-300.png 300w, /img/hnpexNJLV5-589.png 589w" sizes="100vw">
				<img class="img-fluid figure-img" src="https://www.lyceum.fr/2023-2024/img/hnpexNJLV5-300.webp" width="589" height="207" alt="" loading="lazy" decoding="async">
			</picture>
</p>
<figcaption>sous arbres d’un nœud</figcaption>
</figure>
</div>
<p><a href="https://pixees.fr/informatiquelycee/n_site/nsi_term_structDo_arbre.html" class="cite-source">CC-BY-SA David Roche</a></p>
<div class="prop">
<p>Un arbre binaire est une structure de données récursive. Tout nœud d’un arbre binaire est un arbre binaire.</p>
</div>
<p>On peut ainsi définir une <code>class</code>e <code>ArbreBinaire</code> <strong>récursive</strong> comme suit:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># nécessaire pour pouvoir annoter le type de la classe</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> __future__ <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> annotations</span>
<span id="cb1-3"></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> ArbreBinaire:</span>
<span id="cb1-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Structure de donnée d'arbre binaire"""</span></span>
<span id="cb1-7"></span>
<span id="cb1-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, étiquette: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, gauche: ArbreBinaire, droit: ArbreBinaire):</span>
<span id="cb1-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.étiquette <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> étiquette</span>
<span id="cb1-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gauche <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gauche</span>
<span id="cb1-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.droit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> droit</span></code></pre></div>
<div class="appli">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Application
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="appli">
<ol type="1">
<li><p>Écrire la séquence d’instructions permettant de construire l’arbre binaire présenté en exemple ci-dessus.</p></li>
<li><p>Expliquer comment accéder à l’étiquette du nœud 7(en partant de la racine) à partir de cette implémentation.</p></li>
</ol>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="parcours-dun-arbre-binaire" class="level3" data-number="2.3">
<h3 data-number="2.3" class="anchored" data-anchor-id="parcours-dun-arbre-binaire"><span class="header-section-number">2.3</span> Parcours d’un arbre binaire</h3>
<p>Il existe diverses façons de parcourir les nœuds d’un arbre.</p>
<p>Le parcours en <strong>largeur d’abord</strong>: les nœuds sont parcourus comme si on lisait l’arbre, de haut en bas et de gauche à droite.</p>
<p></p><figure class="wikimage figure"><picture>
			  <source type="image/webp" srcset="/img/4xLWPUOpdO-187.webp 187w" sizes="100vw">
  <source type="image/gif" srcset="/img/4xLWPUOpdO-187.gif 187w" sizes="100vw">
				<img class="img-fluid figure-img" src="https://www.lyceum.fr/2023-2024/img/4xLWPUOpdO-187.webp" width="187" height="175" alt="Parcours en largeur" loading="lazy" decoding="async">
			</picture>
<figcaption id="caption">Parcours en largeur</figcaption><figcaption id="credit">©&nbsp;&nbsp;CC BY-SA 3.0&nbsp;<a id="image-description" href="//commons.wikimedia.org/wiki/File:Animated_BFS.gif">via Wikimedia Commons</a></figcaption></figure><p></p>
<p>Le parcours en <strong>profondeur d’abord</strong>: on explore complétement le sous-arbre gauche avant de commencer l’exploration du droit. Il existe trois façons de faire:</p>
<ul>
<li>Parcours <strong>préfixe</strong> ou <em>préordre</em> <strong>(NGD)</strong>: on visite d’abord le nœud, puis son sous-arbre gauche, puis son sous-arbre droit.</li>
<li>Parcours <strong>infixe</strong> ou <em>en ordre</em> <strong>(GND)</strong>: on visite d’abord le sous-arbre gauche, puis le nœud, puis le sous-arbre droit.</li>
<li>Parcours <strong>postfixe</strong> ou en <em>postordre</em> <strong>(GDN)</strong>: on visite d’abord le sous-arbre gauche, puis le sous-arbre droit, et enfin le nœud.</li>
</ul>
<div class="example">
<p>Parcours en profondeur d’abord d’un exemple d’arbre:</p>
<ul>
<li>préfixe (rouge): F, B, A, D, C, E, G, I, H;</li>
<li>infixe (jaune): A, B, C, D, E, F, G, H, I;</li>
<li>postfixe (vert): A, C, E, D, B, H, I, G, F.</li>
</ul>
<p></p><figure class="wikimage figure"><picture>
			  <source type="image/webp" srcset="/img/vHbxeDokVG-300.webp 300w, /img/vHbxeDokVG-336.webp 336w, /img/vHbxeDokVG-600.webp 600w" sizes="100vw">
  <source type="image/svg+xml" srcset="/img/vHbxeDokVG-336.svg 336w" sizes="100vw">
				<img class="img-fluid figure-img" src="https://www.lyceum.fr/2023-2024/img/vHbxeDokVG-300.webp" width="600" height="512" alt="Les trois ordres possibles de parcours en profondeur." loading="lazy" decoding="async">
			</picture>
<figcaption id="caption">Les trois ordres possibles de parcours en profondeur.</figcaption><figcaption id="credit">&nbsp;Public domain&nbsp;<a id="image-description" href="//commons.wikimedia.org/wiki/File:Sorted_binary_tree_ALL.svg">via Wikimedia Commons</a></figcaption></figure><p></p>
</div>
<div class="appli">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Application
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="appli">
<p>Donner les quatre ordres de parcours de l’arbre ci-dessous qui représente une expression arithmétique.</p>
<p></p><figure class="wikimage figure"><img src="https://upload.wikimedia.org/wikipedia/commons/7/7e/AST_binary_tree_arith_variables.svg" class="img-fluid figure-img" alt="L'arbre de l'expression A*(B-C)+(D+E)."><figcaption id="caption">L'arbre de l'expression A*(B-C)+(D+E).</figcaption><figcaption id="credit">&nbsp;Public domain&nbsp;<a id="image-description" href="//commons.wikimedia.org/wiki/File:AST_binary_tree_arith_variables.svg">via Wikimedia Commons</a></figcaption></figure><p></p>
<p>Quel parcours représente la notation habituelle de nos calculatrices actuelles?</p>
</div>
</div>
</div>
</div>
</div>
</section>
</section>
<section id="arbres-binaires-de-recherche" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="arbres-binaires-de-recherche"><span class="header-section-number">3</span> Arbres binaires de recherche</h2>
<section id="définition-1" class="level3" data-number="3.1">
<h3 data-number="3.1" class="anchored" data-anchor-id="définition-1"><span class="header-section-number">3.1</span> Définition</h3>
<dl>
<dt>
Arbre binaire de recherche
</dt>
<dd>
<div>
<p>Il s’agit d’un arbre binaire dans lequel toutes les valeurs dans le sous-arbre gauche d’un nœud sont inférieures à la valeur à la racine de l’arbre et toutes les valeurs dans le sous-arbre droit d’un nœud sont supérieures ou égales à la valeur à la racine de l’arbre.</p>
</div>
</dd>
</dl>
<p></p><figure class="wikimage figure"><picture>
			  <source type="image/webp" srcset="/img/R9JSDkrSfn-300.webp 300w, /img/R9JSDkrSfn-600.webp 600w" sizes="100vw">
  <source type="image/svg+xml" srcset="/img/R9JSDkrSfn-300.svg 300w" sizes="100vw">
				<img class="img-fluid figure-img" src="https://www.lyceum.fr/2023-2024/img/R9JSDkrSfn-300.webp" width="600" height="500" alt="Un arbre binaire de recherche est l'équivalent d'une liste triée pour les arbres binaire, ils permettent des recherches très efficaces." loading="lazy" decoding="async">
			</picture>
<figcaption id="caption">Un arbre binaire de recherche est l'équivalent d'une liste triée pour les arbres binaire, ils permettent des recherches très efficaces.</figcaption><figcaption id="credit">&nbsp;Public domain&nbsp;<a id="image-description" href="//commons.wikimedia.org/wiki/File:Binary_search_tree.svg">via Wikimedia Commons</a></figcaption></figure><p></p>
<div class="appli">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Application
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="appli">
<ol type="1">
<li><p>Proposer deux arbres binaires de recherche avec tous les entiers entre 1 et 6 dont l’un est complet(tous les étages sont entièrement remplis, sauf le dernier ou les feuilles sont tassées à gauche).</p></li>
<li><p>Proposer deux arbres binaires de recherche avec tous les entiers entre 1 et 15 dont l’un est parfait(tous les étages sont entièrement remplis).</p></li>
</ol>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="implémentation-en-p.o.o." class="level3" data-number="3.2">
<h3 data-number="3.2" class="anchored" data-anchor-id="implémentation-en-p.o.o."><span class="header-section-number">3.2</span> Implémentation en P.O.O.</h3>
<p>Dans un arbre binaire de recherche, les nœuds ne peuvent pas être placés n’importe comment et doivent respecter l’ordre entre les sous arbres et le nœud: <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi><mo>&lt;</mo><mi>N</mi><mo>&lt;</mo><mi>D</mi></mrow><annotation encoding="application/x-tex">G&lt;N&lt;D</annotation></semantics></math>.</p>
<p>On peut créer une classe <code>ABR</code> semblable à la classe <code>ArbreBinaire</code>, mais en lui ajoutant une méthode <code>insérer</code> pour ajouter l’élément à sa place dans l’arbre binaire de recherche.</p>
<p>On peut ainsi définir une <code>class</code>e <code>ArbreBinaire</code> <strong>récursive</strong> comme suit:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># nécessaire pour pouvoir annoter le type de la classe</span></span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> __future__ <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> annotations</span>
<span id="cb2-3"></span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> ABR:</span>
<span id="cb2-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Structure de donnée d'arbre binaire de recherche"""</span></span>
<span id="cb2-7"></span>
<span id="cb2-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, étiquette: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, gauche: ABR, droit: ABR):</span>
<span id="cb2-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.étiquette <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> étiquette</span>
<span id="cb2-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gauche <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gauche</span>
<span id="cb2-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.droit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> droit</span>
<span id="cb2-12"></span>
<span id="cb2-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> insérer(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, valeur):</span>
<span id="cb2-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Insère une valeur à sa place dans l'arbre"""</span></span>
<span id="cb2-15"></span>
<span id="cb2-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># si la valeur est inférieure on l'insère à gauche</span></span>
<span id="cb2-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> valeur <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.étiquette:</span>
<span id="cb2-18">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># si il y a pas de noeud à gauche, on l'insère</span></span>
<span id="cb2-19">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gauche <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb2-20">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gauche <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ABR(valeur, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb2-21">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sinon on fait un appel récursif sur le sous arbre gauche</span></span>
<span id="cb2-22">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb2-23">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gauche.insérer(valeur)</span>
<span id="cb2-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb2-25">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.droit <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb2-26">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.droit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ABR(valeur, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb2-27">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb2-28">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.droit.insérer(valeur)</span></code></pre></div>
<div class="appli">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Application
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="appli">
<ol type="1">
<li><p>À quoi ressemblerait l’arbre créé en insérant successivement tous les entiers entre 1 et 6 comme ceci.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1">abr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ABR(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb3-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>):</span>
<span id="cb3-3">    abr.insérer(i)</span></code></pre></div></li>
<li><p>Corriger l’ordre d’insertion afin d’obtenir un arbre complet.</p></li>
</ol>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="intérêt-des-arbres-binaires-de-recherche" class="level3" data-number="3.3">
<h3 data-number="3.3" class="anchored" data-anchor-id="intérêt-des-arbres-binaires-de-recherche"><span class="header-section-number">3.3</span> Intérêt des arbres binaires de recherche</h3>
<p>Le caractère trié d’un arbre binaire de recherche permet des opérations rapides pour rechercher une clé, ce que nous verrons dans la partie <a href="../../5-algorithmique/1-algorithmes-sur-les-arbres-binaires/#arbre-binaire-de-recherche">algorithmique</a>.</p>
<div class="appli">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-7-contents" aria-controls="callout-7" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Application
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-7" class="callout-7-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="appli">
<ol type="1">
<li><p>Comparer le nombre d’opérations nécessaires à la recherche de l’élément 15 dans l’arbre ci-dessus:</p>
<ul>
<li>par une méthode brutale (<em>brute force</em>): on itère sur tous les éléments de l’arbre par exemple avec un parcours en largeur.</li>
<li>par une méthode <strong>dichotomique</strong> utilisant le fait que l’arbre binaire de recherche est « trié ».</li>
</ul></li>
<li><p>Donner la complexité des deux méthodes pour un arbre de taille <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mi>n</mi><annotation encoding="application/x-tex">n</annotation></semantics></math>.</p></li>
</ol>
</div>
</div>
</div>
</div>
</div>
<div class="ref">
<ul>
<li><a href="https://www.vuibert.fr/ouvrage/9782311406832-option-informatique-mpsi-mpmp-2e-edition-actualisee">Option informatique MPSI/MP</a></li>
<li><a href="https://www.editions-hatier.fr/livre/nsi-1re-generale-numerique-et-sciences-informatiques-prepabac-9782401052307">Prépabac NSI aux éditions Hatier</a></li>
<li><a href="https://fr.wikipedia.org/wiki/Arbre_enracin%C3%A9">Article Wikipedia sur les arbres</a></li>
<li><a href="https://fr.wikipedia.org/wiki/Arbre_enracin%C3%A9">Article Wikipedia sur les arbres binaires de recherche</a></li>
</ul>
</div>


</section>
</section>

 ]]></description>
  <category>TNSI</category>
  <guid>https://www.lyceum.fr/2023-2024/tg/nsi/1-structures-de-donnees/4-arbres/</guid>
  <pubDate>Thu, 16 May 2024 13:21:00 GMT</pubDate>
</item>
<item>
  <title>Chapitre 5: Graphes*</title>
  <link>https://www.lyceum.fr/2023-2024/tg/nsi/1-structures-de-donnees/5-graphes/</link>
  <description><![CDATA[ 




<p><strong>Ce chapitre ne pourra pas faire l’objet d’une évaluation lors de l’épreuve terminale écrite et pratique de l’enseignement de spécialité.</strong> <a href="https://www.education.gouv.fr/bo/21/Hebdo30/MENE2121274N.htm" class="cite-source">BO MENE2121274N</a></p>
<div class="programme">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Programme
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="programme">
<table class="table table-bordered table-hover">
<thead class="table-warning">
<tr class="header">
<th>Contenus</th>
<th>Capacités attendues</th>
<th>Commentaires</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><p>Graphes : structures relationnelles.</p>
<p>Sommets, arcs, arêtes, graphes orientés ou non orientés.</p></td>
<td><p>Modéliser des situations sous forme de graphes.</p>
<p>Écrire les implémentations correspondantes d’un graphe : matrice d’adjacence, liste de successeurs/de prédécesseurs.</p>
<p>Passer d’une représentation à une autre.</p></td>
<td><p>On s’appuie sur des exemples comme le réseau routier, le réseau électrique, Internet, les réseaux sociaux.</p>
<p>Le choix de la représentation dépend du traitement qu’on veut mettre en place : on fait le lien avec la rubrique « algorithmique ».</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</div>
<div class="intro">
<p></p><figure class="wikimage figure"><picture>
			  <source type="image/webp" srcset="/img/pxZUZThhBH-300.webp 300w, /img/pxZUZThhBH-600.webp 600w" sizes="100vw">
  <source type="image/svg+xml" srcset="/img/pxZUZThhBH-600.svg 600w" sizes="100vw">
				<img class="img-fluid figure-img" src="https://www.lyceum.fr/2023-2024/img/pxZUZThhBH-300.webp" width="600" height="600" alt="The Graph is generated with 30 nodes and a poisson distribution with lambda(5,5) It follows the <a href=" https:="" en.wikipedia.org="" wiki="" erd%c5%91s%e2%80%93r%c3%a9nyi_model"="" title="w:Erdős–Rényi model">model of Erdos and Renyi"
					loading="lazy"
					decoding="async"&gt;
			</picture>
<figcaption id="caption"></figcaption><figcaption id="credit">©&nbsp;&nbsp;CC BY-SA 3.0&nbsp;<a id="image-description" href="//commons.wikimedia.org/wiki/File:Random-graph-Erdos_generated_network.svg">via Wikimedia Commons</a></figcaption></figure><p></p>
<p>Dans ce chapitre, nous étudions les <em>graphes</em>, une structure de données très utilisée pour représenter les liens et les interactions entre des objets, les personnes, les villes, les ordinateurs… En effet, nous verrons qu’il existe de nombreuses variétés de <em>graphes</em> permettant ainsi de décrire des situations diverses, tout en conservant, une même représentation et donc des mêmes méthodes pour les manipuler par informatique.</p>
</div>
<section id="les-graphes-une-structure-de-données-non-linéaire" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="les-graphes-une-structure-de-données-non-linéaire"><span class="header-section-number">1</span> Les graphes : une structure de données non linéaire</h2>
<p>Vous êtes déjà habitués à manipuler des listes, n-uplets ou encore les piles et les files, qui sont des exemples de <em>structures de données linéaires</em>, c’est-à-dire à une dimension, on peut les parcourir du début à la fin en suivant <em>un seul chemin</em>.</p>
<p>Dans le chapitre précédent, nous avons vu les <a href="../../1-structures-de-donnees/4-arbres">arbres</a>, un exemple structure de données non linéaire très utilisée pour représenter une hiérarchie entre des données comme des liens de descendance dans un arbre généalogique.</p>
<p>En fait, les arbres sont des graphes avec bien particuliers tels que tous les sommets sauf la racine ont un unique parent(on parle de <em>graphe acyclique orienté</em>).</p>
<p>Maintenant que nous parlons de graphe, il n’existe plus aucune restriction, il n’y a plus de racine, plus de restriction sur les parents, les enfants, ou quoi que ce soit.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><picture>
			  <source type="image/webp" srcset="/img/zw2EPK2Zt1-300.webp 300w, /img/zw2EPK2Zt1-520.webp 520w, /img/zw2EPK2Zt1-600.webp 600w" sizes="100vw">
  <source type="image/svg+xml" srcset="/img/zw2EPK2Zt1-520.svg 520w" sizes="100vw">
				<img class="img-fluid figure-img" src="https://www.lyceum.fr/2023-2024/img/zw2EPK2Zt1-300.webp" width="600" height="263" alt="" loading="lazy" decoding="async">
			</picture>
</p>
<figcaption>Graphe et arbres</figcaption>
</figure>
</div>
<dl>
<dt>
graphe
</dt>
<dd>
<div>
<p>Un graphe est une structure de données composée d’objets: les <em>sommets</em> dans laquelle certaines paires d’objets sont reliées par des <em>arêtes</em> (ou arcs dans le cas de graphes orientés).</p>
</div>
</dd>
</dl>
<p><a href="lexique" class="cite-source">Lexique de la théorie des graphes</a></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><picture>
			  <source type="image/webp" srcset="/img/QdZbkwdZpT-300.webp 300w, /img/QdZbkwdZpT-520.webp 520w, /img/QdZbkwdZpT-600.webp 600w" sizes="100vw">
  <source type="image/svg+xml" srcset="/img/QdZbkwdZpT-520.svg 520w" sizes="100vw">
				<img class="img-fluid figure-img" src="https://www.lyceum.fr/2023-2024/img/QdZbkwdZpT-300.webp" width="600" height="263" alt="" loading="lazy" decoding="async">
			</picture>
</p>
<figcaption>Sommets et arêtes sur un graphe</figcaption>
</figure>
</div>
<dl>
<dt>
Graphe orienté
</dt>
<dd>
<div>
<p>On distingue les graphes <em>non orientés</em>, où les arêtes relient deux sommets de <em>manière symétrique</em> et les graphes <em>orientés</em>, où les arêtes, alors appelés <em>arcs</em>, relient deux sommets de manière asymétrique.</p>
<p><a href="lexique">Lexique de la théorie des graphes</a></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><picture>
			  <source type="image/webp" srcset="/img/EetQt1QGdE-300.webp 300w, /img/EetQt1QGdE-520.webp 520w, /img/EetQt1QGdE-600.webp 600w" sizes="100vw">
  <source type="image/svg+xml" srcset="/img/EetQt1QGdE-520.svg 520w" sizes="100vw">
				<img class="img-fluid figure-img" src="https://www.lyceum.fr/2023-2024/img/EetQt1QGdE-300.webp" width="600" height="263" alt="" loading="lazy" decoding="async">
			</picture>
</p>
<figcaption>Graphes orientés et non orientés</figcaption>
</figure>
</div>
</div>
</dd>
<dt>
Graphe pondéré
</dt>
<dd>
<div>
<p>Un graphe pondéré ou un réseau est un graphe où chaque arête porte un nombre (son poids).</p>
<p></p><figure class="wikimage figure"><picture>
			  <source type="image/webp" srcset="/img/EHapR54Vlp-300.webp 300w, /img/EHapR54Vlp-430.webp 430w" sizes="100vw">
  <source type="image/png" srcset="/img/EHapR54Vlp-300.png 300w, /img/EHapR54Vlp-430.png 430w" sizes="100vw">
				<img class="img-fluid figure-img" src="https://www.lyceum.fr/2023-2024/img/EHapR54Vlp-300.webp" width="430" height="195" alt="An example of a weighted network." loading="lazy" decoding="async">
			</picture>
<figcaption id="caption"></figcaption><figcaption id="credit">&nbsp;Public domain&nbsp;<a id="image-description" href="//commons.wikimedia.org/wiki/File:Weighted_network.png">via Wikimedia Commons</a></figcaption></figure><p></p>
<p>Ces poids peuvent représenter par exemple des coûts, des longueurs ou des capacités, en fonction du problème traité. Ces graphes sont fréquents dans divers contextes, comme le problème de plus court chemin ou le problème du voyageur de commerce.</p>
</div>
</dd>
</dl>
</section>
<section id="vocabulaire-des-graphes" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="vocabulaire-des-graphes"><span class="header-section-number">2</span> Vocabulaire des graphes</h2>
<dl>
<dt>
Sommets adjacents
</dt>
<dd>
<div>
<p>Deux sommets reliés par une arête sont dits adjacents.</p>
</div>
</dd>
<dt>
Graphe complet
</dt>
<dd>
<div>
<p>Un graphe est dit complet lorsque tous ses sommets sont adjacents.</p>
</div>
</dd>
<dt>
Ordre d’un graphe
</dt>
<dd>
<div>
<p>L’ordre d’un graphe est le nombre de sommets de ce graphe.</p>
</div>
</dd>
<dt>
Degré d’un sommet
</dt>
<dd>
<div>
<p>Le degré d’un sommet est le nombre d’arêtes dont ce sommet est une extrémité.</p>
</div>
</dd>
</dl>
<p><a href="lexique">Lexique de la théorie des graphes</a></p>
</section>
<section id="quelques-exemples-de-graphes" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="quelques-exemples-de-graphes"><span class="header-section-number">3</span> Quelques exemples de graphes</h2>
<p>En fait les graphes sont omniprésents, car il est rare que l’information puisse être réduite à une structure linéaire comme les listes ou encore à un arbre dans lequel la descendance est parfaitement établie.</p>
<section id="internet" class="level3" data-number="3.1">
<h3 data-number="3.1" class="anchored" data-anchor-id="internet"><span class="header-section-number">3.1</span> Internet</h3>
<div class="clearfix">
<p></p><figure class="wikimage figure"><picture>
			  <source type="image/webp" srcset="/img/c0IkLaPZaG-300.webp 300w, /img/c0IkLaPZaG-600.webp 600w, /img/c0IkLaPZaG-1280.webp 1280w" sizes="100vw">
  <source type="image/jpeg" srcset="/img/c0IkLaPZaG-300.jpeg 300w, /img/c0IkLaPZaG-600.jpeg 600w, /img/c0IkLaPZaG-1280.jpeg 1280w" sizes="100vw">
				<img class="img-fluid figure-img" src="https://www.lyceum.fr/2023-2024/img/c0IkLaPZaG-300.webp" width="1280" height="1280" alt="Partial map of the Internet based on the January 15, 2005 data found on <a rel=" nofollow"="" href="http://www.opte.org/maps/">opte.org. Each line is drawn between two nodes, representing two <a href="https://en.wikipedia.org/wiki/IP_address" class="extiw" title="en:IP address">IP addresses</a>. The length of the lines are indicative of the delay between those two nodes. This graph represents less than 30% of the <a href="https://en.wikipedia.org/wiki/Classful_network" class="extiw" title="en:Classful network">Class C</a> networks reachable by the data collection program in early 2005. Lines are color-coded according to their corresponding <a rel="nofollow" class="external text" href="https://tools.ietf.org/html/rfc1918">RFC&nbsp;1918</a> allocation as follows:
<ul><li>Dark blue: net, ca, us</li>
<li>Green: com, org</li>
<li>Red: mil, gov, edu</li>
<li>Yellow: jp, cn, tw, au, de</li>
<li>Magenta: uk, it, pl, fr</li>
<li>Gold: br, kr, nl</li>
<li>White: unknown</li></ul>"
					loading="lazy"
					decoding="async"&gt;
			</picture>
<figcaption id="caption"></figcaption><figcaption id="credit">©&nbsp;&nbsp;CC BY 2.5&nbsp;<a id="image-description" href="//commons.wikimedia.org/wiki/File:Internet_map_1024.jpg">via Wikimedia Commons</a></figcaption></figure><p></p>
<p>Prenons l’exemple d’internet, le réseau internet est un ensemble de machines sont identifiées par leur adresse IP. Elles sont reliées entre elles <em>sans une machine mère</em> qui centralise les échanges et dans lequel le chemin des paquets n’est pas unique entre deux machines grâce aux protocoles de routage.</p>
<p>Lorsque nous cliquons entre des sites Web et que nous naviguons entre les URL, nous naviguons vraiment à travers un graphe. Parfois, ces graphiques ont des sommets avec des bords non orientés - je peux aller et venir d’une page Web à une autre - et d’autres qui sont dirigés - je ne peux que passer de la page Web A à la page Web B, et jamais l’inverse.</p>
<p>Mais il y a un meilleur exemple qui illustre magnifiquement nos interactions quotidiennes avec les graphes: les <em>réseaux sociaux</em>.</p>
</div>
</section>
<section id="réseaux-sociaux" class="level3" data-number="3.2">
<h3 data-number="3.2" class="anchored" data-anchor-id="réseaux-sociaux"><span class="header-section-number">3.2</span> Réseaux sociaux</h3>
<p>Prenons l’exemple des réseaux sociaux tels sur Facebook ou son alternative libre <a href="https://diasporafoundation.org/">Diaspora</a>.</p>
<p>Dans ce type de réseau social:</p>
<ul>
<li>les sommets sont les utilisateurs</li>
<li>les arêtes sont les liens d’amitié entre ces utilisateurs.</li>
</ul>
<p><picture>
			  <source type="image/webp" srcset="/img/8QhMFUVZ0Z-300.webp 300w, /img/8QhMFUVZ0Z-600.webp 600w, /img/8QhMFUVZ0Z-1400.webp 1400w" sizes="100vw">
  <source type="image/jpeg" srcset="/img/8QhMFUVZ0Z-300.jpeg 300w, /img/8QhMFUVZ0Z-600.jpeg 600w, /img/8QhMFUVZ0Z-1400.jpeg 1400w" sizes="100vw">
				<img class="img-fluid" src="https://www.lyceum.fr/2023-2024/img/8QhMFUVZ0Z-300.webp" width="1400" height="761" alt="Réseau social d’amis" loading="lazy" decoding="async">
			</picture>
<a href="https://medium.com/basecs/a-gentle-introduction-to-graph-theory-77969829ead8" class="cite-source">A gentle introduction to graph theory</a></p>
<p>L’amitié se veut être un lien bidirectionnel, on ne peut être ami de quelqu’un qui n’est pas votre ami: <strong>C’est un graphe non-orienté</strong>.</p>
<p>Au contraire dans les réseaux de microblogging comme Twiter ou son alternative libre <a href="https://mastodon.social/about">Mastodon</a>, les liens ne sont pas de la même nature.</p>
<p>On peut suivre une personne, mais il n’est pas obligatoire que cette personne vous suivre en retour.</p>
<p><picture>
			  <source type="image/webp" srcset="/img/CYOAK76j1h-300.webp 300w, /img/CYOAK76j1h-600.webp 600w, /img/CYOAK76j1h-1400.webp 1400w" sizes="100vw">
  <source type="image/jpeg" srcset="/img/CYOAK76j1h-300.jpeg 300w, /img/CYOAK76j1h-600.jpeg 600w, /img/CYOAK76j1h-1400.jpeg 1400w" sizes="100vw">
				<img class="img-fluid" src="https://www.lyceum.fr/2023-2024/img/CYOAK76j1h-300.webp" width="1400" height="816" alt="Réseau social d’amis avec suivi" loading="lazy" decoding="async">
			</picture>
<a href="https://medium.com/basecs/a-gentle-introduction-to-graph-theory-77969829ead8" class="cite-source">A gentle introduction to graph theory</a></p>
<p>Le suivi est un lien directionnel : <strong>C’est un graphe non-orienté</strong>.</p>
</section>
<section id="graphes-routiers" class="level3" data-number="3.3">
<h3 data-number="3.3" class="anchored" data-anchor-id="graphes-routiers"><span class="header-section-number">3.3</span> Graphes routiers</h3>
<div class="clearfix">
<p></p><figure class="wikimage figure"><picture>
			  <source type="image/webp" srcset="/img/2vNifcLnzt-300.webp 300w, /img/2vNifcLnzt-600.webp 600w, /img/2vNifcLnzt-1000.webp 1000w" sizes="100vw">
  <source type="image/svg+xml" srcset="/img/2vNifcLnzt-1000.svg 1000w" sizes="100vw">
				<img class="img-fluid figure-img" src="https://www.lyceum.fr/2023-2024/img/2vNifcLnzt-300.webp" width="1000" height="1056" alt="Carte du réseau ferroviare des TGV" loading="lazy" decoding="async">
			</picture>
<figcaption id="caption">Carte du réseau ferroviare des TGV</figcaption><figcaption id="credit">©&nbsp;&nbsp;CC BY-SA 3.0&nbsp;<a id="image-description" href="//commons.wikimedia.org/wiki/File:Carte_TGV.svg">via Wikimedia Commons</a></figcaption></figure><p></p>
<p>Les graphes routiers sont un bel exemple de graphes <strong>pondérés non-orientés</strong>. On peut utiliser le temps ou la distance pour la pondération.</p>
<p>On place souvent les sommets à leur position réelle sur une carte sur ce type de graphes.</p>
</div>
</section>
</section>
<section id="comment-implémenter-un-graphe" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="comment-implémenter-un-graphe"><span class="header-section-number">4</span> Comment implémenter un graphe?</h2>
<p>Il existe deux façons d’implémenter un graphe:</p>
<ul>
<li>La matrice d’adjacence,</li>
<li>la liste de successeurs/prédécesseurs.</li>
</ul>
<p>Nous allons voir comment réaliser ces deux implémentations, et comment passer de l’une à l’autre.</p>
<section id="la-liste-de-successeursprédécesseurs" class="level3" data-number="4.1">
<h3 data-number="4.1" class="anchored" data-anchor-id="la-liste-de-successeursprédécesseurs"><span class="header-section-number">4.1</span> La liste de successeurs/prédécesseurs</h3>
<dl>
<dt>
Liste d’adjacence
</dt>
<dd>
<div>
<p>La liste d’adjacence d’un graphe non orienté, est la liste des voisins de chaque sommet.</p>
</div>
</dd>
</dl>
<p><a href="https://fr.wikipedia.org/wiki/Liste_d%27adjacence" class="cite-source">Article Wikipédia sur la liste d’adjacence</a></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><picture>
			  <source type="image/webp" srcset="/img/RIOiHCBOHz-300.webp 300w, /img/RIOiHCBOHz-600.webp 600w, /img/RIOiHCBOHz-722.webp 722w" sizes="100vw">
  <source type="image/png" srcset="/img/RIOiHCBOHz-300.png 300w, /img/RIOiHCBOHz-600.png 600w, /img/RIOiHCBOHz-722.png 722w" sizes="100vw">
				<img class="img-fluid figure-img" src="https://www.lyceum.fr/2023-2024/img/RIOiHCBOHz-300.webp" width="722" height="311" alt="" loading="lazy" decoding="async">
			</picture>
</p>
<figcaption>Liste d’adjacence d’un graphe orienté</figcaption>
</figure>
</div>
</section>
<section id="la-matrice-dadjacence" class="level3" data-number="4.2">
<h3 data-number="4.2" class="anchored" data-anchor-id="la-matrice-dadjacence"><span class="header-section-number">4.2</span> La matrice d’adjacence</h3>
<dl>
<dt>
Matrice d’adjacence
</dt>
<dd>
<div>
<p>On représente les liens entre les <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mi>n</mi><annotation encoding="application/x-tex">n</annotation></semantics></math> sommets du graphe par une matrice de dimension <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mi>n</mi><annotation encoding="application/x-tex">n</annotation></semantics></math> dont l’élément non diagonal <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><msub><mi>a</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><annotation encoding="application/x-tex">a_{ij}</annotation></semantics></math> est le nombre d’arêtes (ou son poids pour un graphe pondéré) liant le sommet <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mi>i</mi><annotation encoding="application/x-tex">i</annotation></semantics></math> au sommet <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mi>j</mi><annotation encoding="application/x-tex">j</annotation></semantics></math>.</p>
</div>
</dd>
</dl>
<p>L’élément diagonal <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><msub><mi>a</mi><mrow><mi>i</mi><mi>i</mi></mrow></msub><annotation encoding="application/x-tex">a_{ii}</annotation></semantics></math> est le nombre de boucles au sommet i.</p>
<p>Dans le cas d’un graphe non orienté, la matrice d’adjacence est <em>symétrique</em>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><picture>
			  <source type="image/webp" srcset="/img/N1NQhjcCZB-300.webp 300w, /img/N1NQhjcCZB-600.webp 600w, /img/N1NQhjcCZB-1453.webp 1453w" sizes="100vw">
  <source type="image/png" srcset="/img/N1NQhjcCZB-300.png 300w, /img/N1NQhjcCZB-600.png 600w, /img/N1NQhjcCZB-1453.png 1453w" sizes="100vw">
				<img class="img-fluid figure-img" src="https://www.lyceum.fr/2023-2024/img/N1NQhjcCZB-300.webp" width="1453" height="517" alt="" loading="lazy" decoding="async">
			</picture>
</p>
<figcaption>Matrice d’adjacence d’un graphe non orienté</figcaption>
</figure>
</div>
<p>Pour un graphe orienté, elle est quelconque.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><picture>
			  <source type="image/webp" srcset="/img/dvub5fEacm-300.webp 300w, /img/dvub5fEacm-600.webp 600w, /img/dvub5fEacm-1220.webp 1220w" sizes="100vw">
  <source type="image/png" srcset="/img/dvub5fEacm-300.png 300w, /img/dvub5fEacm-600.png 600w, /img/dvub5fEacm-1220.png 1220w" sizes="100vw">
				<img class="img-fluid figure-img" src="https://www.lyceum.fr/2023-2024/img/dvub5fEacm-300.webp" width="1220" height="386" alt="" loading="lazy" decoding="async">
			</picture>
</p>
<figcaption>Matrice d’adjacence d’un graphe orienté</figcaption>
</figure>
</div>
<p><a href="https://fr.wikipedia.org/wiki/Matrice_d%27adjacence" class="cite-source">Article Wikipédia sur les matrices d’adjacence</a></p>
<div class="plus">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
En plus: Quelle implémentation choisir?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="plus" data-titre="Quelle implémentation choisir?">
<p>Cette représentation est particulièrement adaptée aux graphes creux (c’est-à-dire peu denses), contrairement à la matrice d’adjacence adaptée aux graphes denses.</p>
<table class="table table-bordered table-hover">
<thead class="table-warning">
<tr class="header">
<th>Implémentation</th>
<th>Accès à une arête</th>
<th>Accès à un voisin</th>
<th>Utilisation préférée</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>matrice d’adjacence</td>
<td><math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo stretchy="true" form="prefix">(</mo><mn>1</mn><mo stretchy="true" form="postfix">)</mo></mrow></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></td>
<td><math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo stretchy="true" form="prefix">(</mo><mi>n</mi><mo stretchy="true" form="postfix">)</mo></mrow></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></td>
<td>Graphe dense</td>
</tr>
<tr class="even">
<td>liste de successeurs</td>
<td><math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo stretchy="true" form="prefix">(</mo><mi>n</mi><mo stretchy="true" form="postfix">)</mo></mrow></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></td>
<td><math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo stretchy="true" form="prefix">(</mo><mn>1</mn><mo stretchy="true" form="postfix">)</mo></mrow></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></td>
<td>Graphe creux</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="implémentations-en-python" class="level3" data-number="4.3">
<h3 data-number="4.3" class="anchored" data-anchor-id="implémentations-en-python"><span class="header-section-number">4.3</span> Implémentations en Python</h3>
<p>Le créateur de Python Guido Von Rossum, proposa une implémentation de graphe en Python utilisant la <strong>liste d’adjacence</strong>(https://www.python.org/doc/essays/graphs/):</p>
<blockquote class="blockquote">
<p>Few programming languages provide direct support for graphs as a data type, and Python is no exception. However, graphs are easily built out of lists and dictionaries. For instance, here’s a simple graph (I can’t use drawings in these columns, so I write down the graph’s arcs):</p>
</blockquote>
<pre><code>A -&gt; B
A -&gt; C
B -&gt; C
B -&gt; D
C -&gt; D
D -&gt; C
E -&gt; F
F -&gt; C</code></pre>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1">graph <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'B'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C'</span>],</span>
<span id="cb2-2">         <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'B'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'D'</span>],</span>
<span id="cb2-3">         <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'D'</span>],</span>
<span id="cb2-4">         <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'D'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C'</span>],</span>
<span id="cb2-5">         <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'E'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F'</span>],</span>
<span id="cb2-6">         <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C'</span>]}</span></code></pre></div>
<p>En ce qui concerne les <strong>matrices</strong>, on les représente généralement sous forme de tableaux de tableaux, comme vu en <a href="../../../../1g/nsi/3-representation-des-donnees-types-construits/2-usages-avances-des-tableaux#tableaux-à-deux-dimensions-les-matrices">première</a>.</p>
<p><math display="block" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="true" form="prefix">(</mo><mtable><mtr><mtd columnalign="center" style="text-align: center"><mn>1</mn></mtd><mtd columnalign="center" style="text-align: center"><mn>2</mn></mtd><mtd columnalign="center" style="text-align: center"><mn>3</mn></mtd></mtr><mtr><mtd columnalign="center" style="text-align: center"><mn>4</mn></mtd><mtd columnalign="center" style="text-align: center"><mn>5</mn></mtd><mtd columnalign="center" style="text-align: center"><mn>6</mn></mtd></mtr><mtr><mtd columnalign="center" style="text-align: center"><mn>7</mn></mtd><mtd columnalign="center" style="text-align: center"><mn>8</mn></mtd><mtd columnalign="center" style="text-align: center"><mn>9</mn></mtd></mtr></mtable><mo stretchy="true" form="postfix">)</mo></mrow><annotation encoding="application/x-tex">
\begin{pmatrix}
   1 &amp; 2 &amp; 3\\
   4 &amp; 5 &amp; 6\\
   7 &amp; 8 &amp; 9 
\end{pmatrix}
</annotation></semantics></math></p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1">M <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>],</span>
<span id="cb3-2">     [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>],</span>
<span id="cb3-3">     [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>]]</span></code></pre></div>
<div class="appli">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Application
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="appli">
<ol type="1">
<li>Dessiner une représentation conventionnelle du graphe proposé par Guido Von Rossum.</li>
<li>Écrire la matrice d’adjacence correspondante.</li>
<li>Proposer une implémentation de la matrice d’adjacence de ce graphe en Python en utilisant une liste de liste.</li>
</ol>
</div>
</div>
</div>
</div>
</div>
<div class="ref">
<ul>
<li><a href="https://medium.com/basecs/a-gentle-introduction-to-graph-theory-77969829ead8" class="cite-source">A gentle introduction to graph theory</a></li>
<li><a href="https://fr.wikipedia.org/wiki/Graphe_(math%C3%A9matiques_discr%C3%A8tes)" class="cite-source">Article wikipedia sur les graphes</a></li>
<li><a href="lexique">Lexique de la théorie des graphes sur Wikipédia</a></li>
</ul>
</div>


</section>
</section>

 ]]></description>
  <category>TNSI</category>
  <guid>https://www.lyceum.fr/2023-2024/tg/nsi/1-structures-de-donnees/5-graphes/</guid>
  <pubDate>Thu, 16 May 2024 13:21:00 GMT</pubDate>
</item>
<item>
  <title>Chapitre 1: Les bases de données relationnelles</title>
  <link>https://www.lyceum.fr/2023-2024/tg/nsi/2-bases-de-donnees/1-les-bases-de-donnees-relationnelles/</link>
  <description><![CDATA[ 




<div class="programme">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Programme
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="programme">
<table class="table table-bordered table-hover">
<thead class="table-warning">
<tr class="header">
<th>Contenus</th>
<th>Capacités attendues</th>
<th>Commentaires</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Modèle relationnel : relation, attribut, domaine, clef primaire, clef étrangère, schéma relationnel.</td>
<td>Identifier les concepts définissant le modèle relationnel.</td>
<td>Ces concepts permettent d’exprimer les contraintes d’intégrité (domaine, relation et référence).</td>
</tr>
<tr class="even">
<td>Système de gestion de bases de données relationnelles.</td>
<td>Identifier les services rendus par un système de gestion de bases de données relationnelles : persistance des données, gestion des accès concurrents, efficacité de traitement des requêtes, sécurisation des accès.</td>
<td>Il s’agit de comprendre le rôle et les enjeux des différents services sans en détailler le fonctionnement.</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</div>
<blockquote class="blockquote">
<p>Les bases de données sont aujourd’hui incontournables, car très peu d’informations restent encore stockées sur du papier. Nous avons vu en <a href="../../../../1g/nsi/4-traitement-de-donnees-en-tables/1-tables-de-donnees">première</a> comment utiliser des données comme celle d’un tableur avec notamment l’utilisation du format <code>csv</code>. Cependant l’utilisation de simples tableaux a ses limites et c’est pour cela que l’on utilise les <strong>bases de données relationnelles</strong> qui ont été formalisées en 1970 par <a href="https://fr.wikipedia.org/wiki/Edgar_F._Codd">Edgar F.Codd</a> qui recevra le prix Turing en 1981 pour son travail.</p>
</blockquote>
<section id="définition" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="définition"><span class="header-section-number">1</span> Définition</h2>
<dl>
<dt>
Base de données
</dt>
<dd>
<div>
<p>En informatique, une base de données est une collection organisée de données stockées et consultées électroniquement.</p>
</div>
</dd>
</dl>
<p>Il existe divers modèles de bases de données:</p>
<ul>
<li>Les <strong>bases données relationnelles</strong> utilisent des tableaux de données organisés en lignes et colonnes auxquelles on accède grâce au langage <code>SQL</code>.</li>
<li>Les <strong>bases de données non relationnelles</strong> dites <code>noSQL</code> qui peuvent stocker des données de formes diverses graphes, documents…</li>
</ul>
<p>Cette année, nous nous intéresserons uniquement aux bases de données relationnelles et au langage <code>SQL</code> dont on peut voir ci-dessous un exemple de requête et de résultats sur une base de données de location de DVD.</p>
<p></p><figure class="wikimage figure"><picture>
			  <source type="image/webp" srcset="/img/dU3DiZcJI8-300.webp 300w, /img/dU3DiZcJI8-600.webp 600w, /img/dU3DiZcJI8-968.webp 968w" sizes="100vw">
  <source type="image/png" srcset="/img/dU3DiZcJI8-300.png 300w, /img/dU3DiZcJI8-600.png 600w, /img/dU3DiZcJI8-968.png 968w" sizes="100vw">
				<img class="img-fluid figure-img" src="https://www.lyceum.fr/2023-2024/img/dU3DiZcJI8-300.webp" width="968" height="839" alt="Requête SQL sur une base de données de locations de DVD" loading="lazy" decoding="async">
			</picture>
<figcaption id="caption">Requête SQL sur une base de données de locations de DVD</figcaption><figcaption id="credit">©&nbsp;&nbsp;CC BY-SA 4.0&nbsp;<a id="image-description" href="//commons.wikimedia.org/wiki/File:DVD_Rental_Query.png">via Wikimedia Commons</a></figcaption></figure><p></p>
</section>
<section id="motivations" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="motivations"><span class="header-section-number">2</span> Motivations</h2>
<p>Tout d’abord l’utilisation de fichiers <code>csv</code> pose des problèmes d’accès aux données dans le cas des accès concurrentiels:</p>
<ul>
<li>Tous les utilisateurs doivent charger le fichier pour l’utiliser.</li>
<li>Que faire si plusieurs utilisateurs modifient en même temps le fichier?</li>
</ul>
<p><picture>
			  <source type="image/webp" srcset="/img/PmREm2esIY-300.webp 300w, /img/PmREm2esIY-597.webp 597w" sizes="100vw">
  <source type="image/png" srcset="/img/PmREm2esIY-300.png 300w, /img/PmREm2esIY-597.png 597w" sizes="100vw">
				<img class="img-fluid" src="https://www.lyceum.fr/2023-2024/img/PmREm2esIY-300.webp" width="597" height="432" alt="Approche simpliste avec accès direct aux fichiers" loading="lazy" decoding="async">
			</picture>
<a href="http://sql.bdpedia.fr/intro.html#donnees-bases-de-donnees-et-sgbd" class="cite-source">Image CC-BY-NC-SA Philippe Rigaux sur sql.dbpedia.fr</a></p>
<p>D’autre part, l’organisation même des données au sein d’un seul tableau n’est pas optimale.</p>
<p>Prenons l’exemple d’un tableau donnant les récompenses aux oscars. <a href="https://query.wikidata.org/" class="cite-source">wikdata.org</a></p>
<div class="too-long">
<table class="table table-bordered table-hover">
<thead class="table-warning">
<tr class="header">
<th>humanLabel</th>
<th>awardEditionLabel</th>
<th>awardLabel</th>
<th>awardWorkLabel</th>
<th>directorLabel</th>
<th>time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Bong Joon-ho</td>
<td>92e cérémonie des Oscars</td>
<td>Oscar du meilleur réalisateur</td>
<td>Parasite</td>
<td>Bong Joon-ho</td>
<td>2020-02-09T00:00:00Z</td>
</tr>
<tr class="even">
<td>Brad Pitt</td>
<td>92e cérémonie des Oscars</td>
<td>Oscar du meilleur acteur dans un second rôle</td>
<td>Once Upon a Time in… Hollywood</td>
<td>Quentin Tarantino</td>
<td>2020-02-09T00:00:00Z</td>
</tr>
<tr class="odd">
<td>Guillaume Rocheron</td>
<td>92e cérémonie des Oscars</td>
<td>Oscar des meilleurs effets visuels</td>
<td>1917</td>
<td>Sam Mendes</td>
<td>2020-02-09T00:00:00Z</td>
</tr>
<tr class="even">
<td>Joaquin Phoenix</td>
<td>92e cérémonie des Oscars</td>
<td>Oscar du meilleur acteur</td>
<td>Joker</td>
<td>Todd Phillips</td>
<td>2020-02-09T00:00:00Z</td>
</tr>
<tr class="odd">
<td>Julia Reichert</td>
<td>92e cérémonie des Oscars</td>
<td>Oscar du meilleur film documentaire</td>
<td>American Factory</td>
<td>Julia Reichert</td>
<td>2020-02-09T00:00:00Z</td>
</tr>
<tr class="even">
<td>Laura Dern</td>
<td>92e cérémonie des Oscars</td>
<td>Oscar de la meilleure actrice dans un second rôle</td>
<td>Marriage Story</td>
<td>Noah Baumbach</td>
<td>2020-02-09T00:00:00Z</td>
</tr>
<tr class="odd">
<td>Renée Zellweger</td>
<td>92e cérémonie des Oscars</td>
<td>Oscar de la meilleure actrice</td>
<td>Judy</td>
<td>Rupert Goold</td>
<td>2020-02-09T00:00:00Z</td>
</tr>
<tr class="even">
<td>Olivia Colman</td>
<td>91e cérémonie des Oscars</td>
<td>Oscar de la meilleure actrice</td>
<td>The Favourite</td>
<td>Yórgos Lánthimos</td>
<td>2019-02-24T00:00:00Z</td>
</tr>
<tr class="odd">
<td>Rami Malek</td>
<td>91e cérémonie des Oscars</td>
<td>Oscar du meilleur acteur</td>
<td>Bohemian Rhapsody</td>
<td>Bryan Singer</td>
<td>2019-02-24T00:00:00Z</td>
</tr>
<tr class="even">
<td>Ruth E. Carter</td>
<td>91e cérémonie des Oscars</td>
<td>Oscar de la meilleure création de costumes</td>
<td>Black Panther</td>
<td>Ryan Coogler</td>
<td>2019-02-24T00:00:00Z</td>
</tr>
<tr class="odd">
<td>Alexandre Desplat</td>
<td>90e cérémonie des Oscars</td>
<td>Oscar de la meilleure musique de film</td>
<td>La Forme de l’eau</td>
<td>Guillermo del Toro</td>
<td>2018-03-04T00:00:00Z</td>
</tr>
<tr class="even">
<td>Allison Janney</td>
<td>90e cérémonie des Oscars</td>
<td>Oscar de la meilleure actrice dans un second rôle</td>
<td>Moi, Tonya</td>
<td>Craig Gillespie</td>
<td>2018-03-04T00:00:00Z</td>
</tr>
<tr class="odd">
<td>Frances McDormand</td>
<td>90e cérémonie des Oscars</td>
<td>Oscar de la meilleure actrice</td>
<td>Trois Billboards : Les Panneaux de la vengeance</td>
<td>Martin McDonagh</td>
<td>2018-03-04T00:00:00Z</td>
</tr>
<tr class="even">
<td>Frank Stiefel</td>
<td>90e cérémonie des Oscars</td>
<td>Oscar du meilleur court métrage documentaire</td>
<td>Heaven Is a Traffic Jam on the 405</td>
<td>Frank Stiefel</td>
<td>2018-03-04T00:00:00Z</td>
</tr>
<tr class="odd">
<td>Gary Oldman</td>
<td>90e cérémonie des Oscars</td>
<td>Oscar du meilleur acteur</td>
<td>Les Heures sombres</td>
<td>Joe Wright</td>
<td>2018-03-04T00:00:00Z</td>
</tr>
<tr class="even">
<td>Gregg Landaker</td>
<td>90e cérémonie des Oscars</td>
<td>Oscar du meilleur mixage de son</td>
<td>Dunkerque</td>
<td>Christopher Nolan</td>
<td>2018-03-04T00:00:00Z</td>
</tr>
<tr class="odd">
<td>Guillermo del Toro</td>
<td>90e cérémonie des Oscars</td>
<td>Oscar du meilleur réalisateur</td>
<td>La Forme de l’eau</td>
<td>Guillermo del Toro</td>
<td>2018-03-04T00:00:00Z</td>
</tr>
<tr class="even">
<td>James Ivory</td>
<td>90e cérémonie des Oscars</td>
<td>Oscar du meilleur scénario adapté</td>
<td>Call Me by Your Name</td>
<td>Luca Guadagnino</td>
<td>2018-03-04T00:00:00Z</td>
</tr>
<tr class="odd">
<td>Jordan Peele</td>
<td>90e cérémonie des Oscars</td>
<td>Oscar du meilleur scénario original</td>
<td>Get Out</td>
<td>Jordan Peele</td>
<td>2018-03-04T00:00:00Z</td>
</tr>
<tr class="even">
<td>Lee Smith</td>
<td>90e cérémonie des Oscars</td>
<td>Oscar du meilleur montage</td>
<td>Dunkerque</td>
<td>Christopher Nolan</td>
<td>2018-03-04T00:00:00Z</td>
</tr>
<tr class="odd">
<td>Lucy Sibbick</td>
<td>90e cérémonie des Oscars</td>
<td>Oscar du meilleur maquillage</td>
<td>Les Heures sombres</td>
<td>Joe Wright</td>
<td>2018-03-04T00:00:00Z</td>
</tr>
<tr class="even">
<td>Mark Bridges</td>
<td>90e cérémonie des Oscars</td>
<td>Oscar de la meilleure création de costumes</td>
<td>Phantom Thread</td>
<td>Paul Thomas Anderson</td>
<td>2018-03-04T00:00:00Z</td>
</tr>
<tr class="odd">
<td>Richard King</td>
<td>90e cérémonie des Oscars</td>
<td>Oscar du meilleur montage de son</td>
<td>Dunkerque</td>
<td>Christopher Nolan</td>
<td>2018-03-04T00:00:00Z</td>
</tr>
<tr class="even">
<td>Richard R. Hoover</td>
<td>90e cérémonie des Oscars</td>
<td>Oscar des meilleurs effets visuels</td>
<td>Blade Runner 2049</td>
<td>Denis Villeneuve</td>
<td>2018-03-04T00:00:00Z</td>
</tr>
<tr class="odd">
<td>Roger Deakins</td>
<td>90e cérémonie des Oscars</td>
<td>Oscar de la meilleure photographie</td>
<td>Blade Runner 2049</td>
<td>Denis Villeneuve</td>
<td>2018-03-04T00:00:00Z</td>
</tr>
<tr class="even">
<td>Sam Rockwell</td>
<td>90e cérémonie des Oscars</td>
<td>Oscar du meilleur acteur dans un second rôle</td>
<td>Trois Billboards : Les Panneaux de la vengeance</td>
<td>Martin McDonagh</td>
<td>2018-03-04T00:00:00Z</td>
</tr>
<tr class="odd">
<td>Adam Valdez</td>
<td>89e cérémonie des Oscars</td>
<td>Oscar des meilleurs effets visuels</td>
<td>Le Livre de la jungle</td>
<td>Jon Favreau</td>
<td>2017-02-26T00:00:00Z</td>
</tr>
<tr class="even">
<td>Anna Udvardy</td>
<td>89e cérémonie des Oscars</td>
<td>Oscar du meilleur court métrage de fiction</td>
<td>Sing</td>
<td>Kristóf Deák</td>
<td>2017-02-26T00:00:00Z</td>
</tr>
<tr class="odd">
<td>Barry Jenkins</td>
<td>89e cérémonie des Oscars</td>
<td>Oscar du meilleur scénario adapté</td>
<td>Moonlight</td>
<td>Barry Jenkins</td>
<td>2017-02-26T00:00:00Z</td>
</tr>
<tr class="even">
<td>Casey Affleck</td>
<td>89e cérémonie des Oscars</td>
<td>Oscar du meilleur acteur</td>
<td>Manchester by the Sea</td>
<td>Kenneth Lonergan</td>
<td>2017-02-26T00:00:00Z</td>
</tr>
<tr class="odd">
<td>Clark Spencer</td>
<td>89e cérémonie des Oscars</td>
<td>Oscar du meilleur film d’animation</td>
<td>Zootopie</td>
<td>Byron Howard</td>
<td>2017-02-26T00:00:00Z</td>
</tr>
<tr class="even">
<td>Colleen Atwood</td>
<td>89e cérémonie des Oscars</td>
<td>Oscar de la meilleure création de costumes</td>
<td>Les Animaux fantastiques</td>
<td>David Yates</td>
<td>2017-02-26T00:00:00Z</td>
</tr>
<tr class="odd">
<td>Damien Chazelle</td>
<td>89e cérémonie des Oscars</td>
<td>Oscar du meilleur réalisateur</td>
<td>La La Land</td>
<td>Damien Chazelle</td>
<td>2017-02-26T00:00:00Z</td>
</tr>
<tr class="even">
<td>Emma Stone</td>
<td>89e cérémonie des Oscars</td>
<td>Oscar de la meilleure actrice</td>
<td>La La Land</td>
<td>Damien Chazelle</td>
<td>2017-02-26T00:00:00Z</td>
</tr>
<tr class="odd">
<td>Jeremy Kleiner</td>
<td>89e cérémonie des Oscars</td>
<td>Oscar du meilleur film</td>
<td>Moonlight</td>
<td>Barry Jenkins</td>
<td>2017-02-26T00:00:00Z</td>
</tr>
<tr class="even">
<td>John Gilbert</td>
<td>89e cérémonie des Oscars</td>
<td>Oscar du meilleur montage</td>
<td>Tu ne tueras point</td>
<td>Mel Gibson</td>
<td>2017-02-26T00:00:00Z</td>
</tr>
<tr class="odd">
<td>Justin Hurwitz</td>
<td>89e cérémonie des Oscars</td>
<td>Oscar de la meilleure musique de film</td>
<td>La La Land</td>
<td>Damien Chazelle</td>
<td>2017-02-26T00:00:00Z</td>
</tr>
<tr class="even">
<td>Kenneth Lonergan</td>
<td>89e cérémonie des Oscars</td>
<td>Oscar du meilleur scénario original</td>
<td>Manchester by the Sea</td>
<td>Kenneth Lonergan</td>
<td>2017-02-26T00:00:00Z</td>
</tr>
<tr class="odd">
<td>Linus Sandgren</td>
<td>89e cérémonie des Oscars</td>
<td>Oscar de la meilleure photographie</td>
<td>La La Land</td>
<td>Damien Chazelle</td>
<td>2017-02-26T00:00:00Z</td>
</tr>
<tr class="even">
<td>Mahershalalhashbaz Ali</td>
<td>89e cérémonie des Oscars</td>
<td>Oscar du meilleur acteur dans un second rôle</td>
<td>Moonlight</td>
<td>Barry Jenkins</td>
<td>2017-02-26T00:00:00Z</td>
</tr>
<tr class="odd">
<td>Robert Mackenzie</td>
<td>89e cérémonie des Oscars</td>
<td>Oscar du meilleur mixage de son</td>
<td>Tu ne tueras point</td>
<td>Mel Gibson</td>
<td>2017-02-26T00:00:00Z</td>
</tr>
<tr class="even">
<td>Sylvain Bellemare</td>
<td>89e cérémonie des Oscars</td>
<td>Oscar du meilleur montage de son</td>
<td>Premier Contact</td>
<td>Denis Villeneuve</td>
<td>2017-02-26T00:00:00Z</td>
</tr>
<tr class="odd">
<td>Viola Davis</td>
<td>89e cérémonie des Oscars</td>
<td>Oscar de la meilleure actrice dans un second rôle</td>
<td>Fences</td>
<td>Denzel Washington</td>
<td>2017-02-26T00:00:00Z</td>
</tr>
<tr class="even">
<td>Alejandro González Iñárritu</td>
<td>88e cérémonie des Oscars</td>
<td>Oscar du meilleur réalisateur</td>
<td>The Revenant</td>
<td>Alejandro González Iñárritu</td>
<td>2016-02-28T00:00:00Z</td>
</tr>
<tr class="odd">
<td>Alicia Vikander</td>
<td>88e cérémonie des Oscars</td>
<td>Oscar de la meilleure actrice dans un second rôle</td>
<td>The Danish Girl</td>
<td>Tom Hooper</td>
<td>2016-02-28T00:00:00Z</td>
</tr>
<tr class="even">
<td>Benjamin Cleary</td>
<td>88e cérémonie des Oscars</td>
<td>Oscar du meilleur court métrage de fiction</td>
<td>Stutterer</td>
<td>Benjamin Cleary</td>
<td>2016-02-28T00:00:00Z</td>
</tr>
<tr class="odd">
<td>Brie Larson</td>
<td>88e cérémonie des Oscars</td>
<td>Oscar de la meilleure actrice</td>
<td>Room</td>
<td>Lenny Abrahamson</td>
<td>2016-02-28T00:00:00Z</td>
</tr>
<tr class="even">
<td>Charles Randolph</td>
<td>88e cérémonie des Oscars</td>
<td>Oscar du meilleur scénario adapté</td>
<td>The Big Short</td>
<td>Adam McKay</td>
<td>2016-02-28T00:00:00Z</td>
</tr>
<tr class="odd">
<td>Damian Martin</td>
<td>88e cérémonie des Oscars</td>
<td>Oscar du meilleur maquillage</td>
<td>Mad Max: Fury Road</td>
<td>George Miller</td>
<td>2016-02-28T00:00:00Z</td>
</tr>
<tr class="even">
<td>David White</td>
<td>88e cérémonie des Oscars</td>
<td>Oscar du meilleur montage de son</td>
<td>Mad Max: Fury Road</td>
<td>George Miller</td>
<td>2016-02-28T00:00:00Z</td>
</tr>
<tr class="odd">
<td>Emmanuel Lubezki</td>
<td>88e cérémonie des Oscars</td>
<td>Oscar de la meilleure photographie</td>
<td>The Revenant</td>
<td>Alejandro González Iñárritu</td>
<td>2016-02-28T00:00:00Z</td>
</tr>
<tr class="even">
<td>Ennio Morricone</td>
<td>88e cérémonie des Oscars</td>
<td>Oscar de la meilleure musique de film</td>
<td>The Hateful Eight</td>
<td>Quentin Tarantino</td>
<td>2016-02-28T00:00:00Z</td>
</tr>
<tr class="odd">
<td>Gregg Rudloff</td>
<td>88e cérémonie des Oscars</td>
<td>Oscar du meilleur mixage de son</td>
<td>Mad Max: Fury Road</td>
<td>George Miller</td>
<td>2016-02-28T00:00:00Z</td>
</tr>
<tr class="even">
<td>James Gay-Rees</td>
<td>88e cérémonie des Oscars</td>
<td>Oscar du meilleur film documentaire</td>
<td>Amy</td>
<td>Asif Kapadia</td>
<td>2016-02-28T00:00:00Z</td>
</tr>
<tr class="odd">
<td>Jenny Beavan</td>
<td>88e cérémonie des Oscars</td>
<td>Oscar de la meilleure création de costumes</td>
<td>Mad Max: Fury Road</td>
<td>George Miller</td>
<td>2016-02-28T00:00:00Z</td>
</tr>
<tr class="even">
<td>Jonas Rivera</td>
<td>88e cérémonie des Oscars</td>
<td>Oscar du meilleur film d’animation</td>
<td>Vice-Versa</td>
<td>Pete Docter</td>
<td>2016-02-28T00:00:00Z</td>
</tr>
<tr class="odd">
<td>Josh Singer</td>
<td>88e cérémonie des Oscars</td>
<td>Oscar du meilleur scénario original</td>
<td>Spotlight</td>
<td>Tom McCarthy</td>
<td>2016-02-28T00:00:00Z</td>
</tr>
<tr class="even">
<td>Leonardo DiCaprio</td>
<td>88e cérémonie des Oscars</td>
<td>Oscar du meilleur acteur</td>
<td>The Revenant</td>
<td>Alejandro González Iñárritu</td>
<td>2016-02-28T00:00:00Z</td>
</tr>
<tr class="odd">
<td>Lisa Thompson</td>
<td>88e cérémonie des Oscars</td>
<td>Oscar de la meilleure direction artistique</td>
<td>Mad Max: Fury Road</td>
<td>George Miller</td>
<td>2016-02-28T00:00:00Z</td>
</tr>
<tr class="even">
<td>Margaret Sixel</td>
<td>88e cérémonie des Oscars</td>
<td>Oscar du meilleur montage</td>
<td>Mad Max: Fury Road</td>
<td>George Miller</td>
<td>2016-02-28T00:00:00Z</td>
</tr>
<tr class="odd">
<td>Mark Rylance</td>
<td>88e cérémonie des Oscars</td>
<td>Oscar du meilleur acteur dans un second rôle</td>
<td>Le pont des espions</td>
<td>Steven Spielberg</td>
<td>2016-02-28T00:00:00Z</td>
</tr>
<tr class="even">
<td>Mark Williams Ardington</td>
<td>88e cérémonie des Oscars</td>
<td>Oscar des meilleurs effets visuels</td>
<td>Ex Machina</td>
<td>Alex Garland</td>
<td>2016-02-28T00:00:00Z</td>
</tr>
<tr class="odd">
<td>Pato Escala Pierart</td>
<td>88e cérémonie des Oscars</td>
<td>Oscar du meilleur court métrage d’animation</td>
<td>Historia de un oso</td>
<td>Gabriel Osorio Vargas</td>
<td>2016-02-28T00:00:00Z</td>
</tr>
<tr class="even">
<td>Sharmeen Obaid-Chinoy</td>
<td>88e cérémonie des Oscars</td>
<td>Oscar du meilleur court métrage documentaire</td>
<td>A Girl in the River: The Price of Forgiveness</td>
<td>Sharmeen Obaid-Chinoy</td>
<td>2016-02-28T00:00:00Z</td>
</tr>
<tr class="odd">
<td>Steve Golin</td>
<td>88e cérémonie des Oscars</td>
<td>Oscar du meilleur film</td>
<td>Spotlight</td>
<td>Tom McCarthy</td>
<td>2016-02-28T00:00:00Z</td>
</tr>
<tr class="even">
<td>Adam Stockhausen</td>
<td>87e cérémonie des Oscars</td>
<td>Oscar de la meilleure direction artistique</td>
<td>The Grand Budapest Hotel</td>
<td>Wes Anderson</td>
<td>2015-02-22T00:00:00Z</td>
</tr>
<tr class="odd">
<td>Alan Robert Murray</td>
<td>87e cérémonie des Oscars</td>
<td>Oscar du meilleur montage de son</td>
<td>American Sniper</td>
<td>Clint Eastwood</td>
<td>2015-02-22T00:00:00Z</td>
</tr>
<tr class="even">
<td>Alejandro González Iñárritu</td>
<td>87e cérémonie des Oscars</td>
<td>Oscar du meilleur réalisateur</td>
<td>Birdman</td>
<td>Alejandro González Iñárritu</td>
<td>2015-02-22T00:00:00Z</td>
</tr>
<tr class="odd">
<td>Alexander Dinelaris Jr.</td>
<td>87e cérémonie des Oscars</td>
<td>Oscar du meilleur scénario original</td>
<td>Birdman</td>
<td>Alejandro González Iñárritu</td>
<td>2015-02-22T00:00:00Z</td>
</tr>
<tr class="even">
<td>Alexandre Desplat</td>
<td>87e cérémonie des Oscars</td>
<td>Oscar de la meilleure musique de film</td>
<td>The Grand Budapest Hotel</td>
<td>Wes Anderson</td>
<td>2015-02-22T00:00:00Z</td>
</tr>
<tr class="odd">
<td>Craig Mann</td>
<td>87e cérémonie des Oscars</td>
<td>Oscar du meilleur mixage de son</td>
<td>Whiplash</td>
<td>Damien Chazelle</td>
<td>2015-02-22T00:00:00Z</td>
</tr>
<tr class="even">
<td>Eddie Redmayne</td>
<td>87e cérémonie des Oscars</td>
<td>Oscar du meilleur acteur</td>
<td>Une merveilleuse histoire du temps</td>
<td>James Marsh</td>
<td>2015-02-22T00:00:00Z</td>
</tr>
<tr class="odd">
<td>Ellen Goosenberg Kent</td>
<td>87e cérémonie des Oscars</td>
<td>Oscar du meilleur court métrage documentaire</td>
<td>Crisis Hotline: Veterans Press 1</td>
<td>Ellen Goosenberg Kent</td>
<td>2015-02-22T00:00:00Z</td>
</tr>
<tr class="even">
<td>Emmanuel Lubezki</td>
<td>87e cérémonie des Oscars</td>
<td>Oscar de la meilleure photographie</td>
<td>Birdman</td>
<td>Alejandro González Iñárritu</td>
<td>2015-02-22T00:00:00Z</td>
</tr>
<tr class="odd">
<td>Graham Moore</td>
<td>87e cérémonie des Oscars</td>
<td>Oscar du meilleur scénario adapté</td>
<td>Imitation Game</td>
<td>Morten Tyldum</td>
<td>2015-02-22T00:00:00Z</td>
</tr>
<tr class="even">
<td>Ian Hunter</td>
<td>87e cérémonie des Oscars</td>
<td>Oscar des meilleurs effets visuels</td>
<td>Interstellar</td>
<td>Christopher Nolan</td>
<td>2015-02-22T00:00:00Z</td>
</tr>
<tr class="odd">
<td>J. K. Simmons</td>
<td>87e cérémonie des Oscars</td>
<td>Oscar du meilleur acteur dans un second rôle</td>
<td>Whiplash</td>
<td>Damien Chazelle</td>
<td>2015-02-22T00:00:00Z</td>
</tr>
<tr class="even">
<td>James Lucas</td>
<td>87e cérémonie des Oscars</td>
<td>Oscar du meilleur court métrage de fiction</td>
<td>The Phone Call</td>
<td>Mat Kirkby</td>
<td>2015-02-22T00:00:00Z</td>
</tr>
<tr class="odd">
<td>John Lesher</td>
<td>87e cérémonie des Oscars</td>
<td>Oscar du meilleur film</td>
<td>Birdman</td>
<td>Alejandro González Iñárritu</td>
<td>2015-02-22T00:00:00Z</td>
</tr>
<tr class="even">
<td>Julianne Moore</td>
<td>87e cérémonie des Oscars</td>
<td>Oscar de la meilleure actrice</td>
<td>Still Alice</td>
<td>Wash Westmoreland</td>
<td>2015-02-22T00:00:00Z</td>
</tr>
<tr class="odd">
<td>Kristina Reed</td>
<td>87e cérémonie des Oscars</td>
<td>Oscar du meilleur court métrage d’animation</td>
<td>Feast</td>
<td>Patrick Osborne</td>
<td>2015-02-22T00:00:00Z</td>
</tr>
<tr class="even">
<td>Mark Coulier</td>
<td>87e cérémonie des Oscars</td>
<td>Oscar du meilleur maquillage</td>
<td>The Grand Budapest Hotel</td>
<td>Wes Anderson</td>
<td>2015-02-22T00:00:00Z</td>
</tr>
<tr class="odd">
<td>Milena Canonero</td>
<td>87e cérémonie des Oscars</td>
<td>Oscar de la meilleure création de costumes</td>
<td>The Grand Budapest Hotel</td>
<td>Wes Anderson</td>
<td>2015-02-22T00:00:00Z</td>
</tr>
<tr class="even">
<td>Patricia Arquette</td>
<td>87e cérémonie des Oscars</td>
<td>Oscar de la meilleure actrice dans un second rôle</td>
<td>Boyhood</td>
<td>Richard Linklater</td>
<td>2015-02-22T00:00:00Z</td>
</tr>
<tr class="odd">
<td>Roy Conli</td>
<td>87e cérémonie des Oscars</td>
<td>Oscar du meilleur film d’animation</td>
<td>Big Hero 6</td>
<td>Chris Williams</td>
<td>2015-02-22T00:00:00Z</td>
</tr>
<tr class="even">
<td>Tom Cross</td>
<td>87e cérémonie des Oscars</td>
<td>Oscar du meilleur montage</td>
<td>Whiplash</td>
<td>Damien Chazelle</td>
<td>2015-02-22T00:00:00Z</td>
</tr>
<tr class="odd">
<td>Alexandre Espigares</td>
<td>86e cérémonie des Oscars</td>
<td>Oscar du meilleur court métrage d’animation</td>
<td>Mr Hublot</td>
<td>Laurent Witz</td>
<td>2014-03-02T00:00:00Z</td>
</tr>
<tr class="even">
<td>Alfonso Cuarón</td>
<td>86e cérémonie des Oscars</td>
<td>Oscar du meilleur réalisateur</td>
<td>Gravity</td>
<td>Alfonso Cuarón</td>
<td>2014-03-02T00:00:00Z</td>
</tr>
<tr class="odd">
<td>Anders Walter</td>
<td>86e cérémonie des Oscars</td>
<td>Oscar du meilleur court métrage de fiction</td>
<td>Helium</td>
<td>Kim Magnusson</td>
<td>2014-03-02T00:00:00Z</td>
</tr>
<tr class="even">
<td>Beverley Dunn</td>
<td>86e cérémonie des Oscars</td>
<td>Oscar de la meilleure direction artistique</td>
<td>Gatsby le Magnifique</td>
<td>Baz Luhrmann</td>
<td>2014-03-02T00:00:00Z</td>
</tr>
<tr class="odd">
<td>Cate Blanchett</td>
<td>86e cérémonie des Oscars</td>
<td>Oscar de la meilleure actrice</td>
<td>Blue Jasmine</td>
<td>Woody Allen</td>
<td>2014-03-02T00:00:00Z</td>
</tr>
<tr class="even">
<td>Catherine Martin</td>
<td>86e cérémonie des Oscars</td>
<td>Oscar de la meilleure création de costumes</td>
<td>Gatsby le Magnifique</td>
<td>Baz Luhrmann</td>
<td>2014-03-02T00:00:00Z</td>
</tr>
<tr class="odd">
<td>Chris Lawrence</td>
<td>86e cérémonie des Oscars</td>
<td>Oscar des meilleurs effets visuels</td>
<td>Gravity</td>
<td>Alfonso Cuarón</td>
<td>2014-03-02T00:00:00Z</td>
</tr>
<tr class="even">
<td>Emmanuel Lubezki</td>
<td>86e cérémonie des Oscars</td>
<td>Oscar de la meilleure photographie</td>
<td>Gravity</td>
<td>Alfonso Cuarón</td>
<td>2014-03-02T00:00:00Z</td>
</tr>
<tr class="odd">
<td>Glenn Freemantle</td>
<td>86e cérémonie des Oscars</td>
<td>Oscar du meilleur montage de son</td>
<td>Gravity</td>
<td>Alfonso Cuarón</td>
<td>2014-03-02T00:00:00Z</td>
</tr>
<tr class="even">
<td>Jared Leto</td>
<td>86e cérémonie des Oscars</td>
<td>Oscar du meilleur acteur dans un second rôle</td>
<td>The Dallas Buyers Club</td>
<td>Jean-Marc Vallée</td>
<td>2014-03-02T00:00:00Z</td>
</tr>
<tr class="odd">
<td>Jeremy Kleiner</td>
<td>86e cérémonie des Oscars</td>
<td>Oscar du meilleur film</td>
<td>Twelve Years a Slave</td>
<td>Steve McQueen</td>
<td>2014-03-02T00:00:00Z</td>
</tr>
<tr class="even">
<td>John Ridley</td>
<td>86e cérémonie des Oscars</td>
<td>Oscar du meilleur scénario adapté</td>
<td>Twelve Years a Slave</td>
<td>Steve McQueen</td>
<td>2014-03-02T00:00:00Z</td>
</tr>
<tr class="odd">
<td>Lupita Nyong’o</td>
<td>86e cérémonie des Oscars</td>
<td>Oscar de la meilleure actrice dans un second rôle</td>
<td>Twelve Years a Slave</td>
<td>Steve McQueen</td>
<td>2014-03-02T00:00:00Z</td>
</tr>
<tr class="even">
<td>Malcolm Clarke</td>
<td>86e cérémonie des Oscars</td>
<td>Oscar du meilleur court métrage documentaire</td>
<td>La Dame du 6</td>
<td>Malcolm Clarke</td>
<td>2014-03-02T00:00:00Z</td>
</tr>
<tr class="odd">
<td>Mark Sanger</td>
<td>86e cérémonie des Oscars</td>
<td>Oscar du meilleur montage</td>
<td>Gravity</td>
<td>Alfonso Cuarón</td>
<td>2014-03-02T00:00:00Z</td>
</tr>
<tr class="even">
<td>Matthew McConaughey</td>
<td>86e cérémonie des Oscars</td>
<td>Oscar du meilleur acteur</td>
<td>The Dallas Buyers Club</td>
<td>Jean-Marc Vallée</td>
<td>2014-03-02T00:00:00Z</td>
</tr>
<tr class="odd">
<td>Niv Adiri</td>
<td>86e cérémonie des Oscars</td>
<td>Oscar du meilleur mixage de son</td>
<td>Gravity</td>
<td>Alfonso Cuarón</td>
<td>2014-03-02T00:00:00Z</td>
</tr>
<tr class="even">
<td>Peter Del Vecho</td>
<td>86e cérémonie des Oscars</td>
<td>Oscar du meilleur film d’animation</td>
<td>La Reine des neiges</td>
<td>Chris Buck</td>
<td>2014-03-02T00:00:00Z</td>
</tr>
<tr class="odd">
<td>Robin Mathews</td>
<td>86e cérémonie des Oscars</td>
<td>Oscar du meilleur maquillage</td>
<td>The Dallas Buyers Club</td>
<td>Jean-Marc Vallée</td>
<td>2014-03-02T00:00:00Z</td>
</tr>
<tr class="even">
<td>Spike Jonze</td>
<td>86e cérémonie des Oscars</td>
<td>Oscar du meilleur scénario original</td>
<td>Her</td>
<td>Spike Jonze</td>
<td>2014-03-02T00:00:00Z</td>
</tr>
<tr class="odd">
<td>Steven Price</td>
<td>86e cérémonie des Oscars</td>
<td>Oscar de la meilleure musique de film</td>
<td>Gravity</td>
<td>Alfonso Cuarón</td>
<td>2014-03-02T00:00:00Z</td>
</tr>
<tr class="even">
<td>Christoph Waltz</td>
<td>85e cérémonie des Oscars</td>
<td>Oscar du meilleur acteur dans un second rôle</td>
<td>Django Unchained</td>
<td>Quentin Tarantino</td>
<td>2013-02-24T00:00:00Z</td>
</tr>
<tr class="odd">
<td>Mark Andrews</td>
<td>85e cérémonie des Oscars</td>
<td>Oscar du meilleur film d’animation</td>
<td>Rebelle</td>
<td>Brenda Chapman</td>
<td>2013-02-24T00:00:00Z</td>
</tr>
<tr class="even">
<td>Quentin Tarantino</td>
<td>85e cérémonie des Oscars</td>
<td>Oscar du meilleur scénario original</td>
<td>Django Unchained</td>
<td>Quentin Tarantino</td>
<td>2013-02-24T00:00:00Z</td>
</tr>
</tbody>
</table>
</div>
<p>Vous voyez déjà sur cet extrait que certaines données sont redondantes comme les dates des cérémonies, les noms des réalisateurs de films.</p>
<p>Si on doit modifier une information sur un acteur on doit le faire sur toute la table, et pas seulement à un endroit.</p>
<p><em>On le voit bien, il serait préférable de stocker les informations sur les films, les acteurs les cérémonies séparément, puis établir des liens entre elles pour éviter toutes ces redondances</em>. <strong>C’est pourquoi on parle de base de données relationnelles.</strong></p>
</section>
<section id="modèle-relationnel" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="modèle-relationnel"><span class="header-section-number">3</span> Modèle relationnel</h2>
<p>Dans une base de données, plutôt que de stocker toutes les données dans une table, on les stocke dans plusieurs tables reliées entre elles par des clés.</p>
<p>Une base de données est définie par son <strong>schéma relationnel</strong> qui spécifie:</p>
<ul>
<li><p>La liste des tables avec pour chaque table:</p>
<ul>
<li>Le nom de la table(<em>relation</em>).</li>
<li>La liste des colonnes(<em>attributs</em>) avec leur nom et le domaine de valeurs des données qui y sont stockées(Chaînes de caractères, entiers, dates…).</li>
<li>Les identifiants (<em>uniques</em>) de chaque ligne.</li>
</ul>
<p><a title="Puerto01 at French Wikipedia, CC BY-SA 3.0 <http://creativecommons.org/licenses/by-sa/3.0/>, via Wikimedia Commons" href="https://commons.wikimedia.org/wiki/File:Table_relationnel.png"><img width="512" alt="Table relationnel" src="https://upload.wikimedia.org/wikipedia/commons/f/fd/Table_relationnel.png"></a></p></li>
<li><p>Les tables doivent être reliées entre elles grâce à des identifiants secondaires.</p>
<p>
</p><p><a href="https://commons.wikimedia.org/wiki/File:Relation.png#/media/File:Relation.png"><img src="https://upload.wikimedia.org/wikipedia/commons/5/59/Relation.png" alt="Relation.png"></a><br>By <a href="https://en.wikipedia.org/wiki/fr:User:Puerto01" class="extiw" title="w:fr:User:Puerto01">Puerto01</a> at <a href="https://en.wikipedia.org/wiki/fr:" class="extiw" title="w:fr:">French Wikipedia</a>, <a href="https://creativecommons.org/licenses/by/2.5" title="Creative Commons Attribution 2.5">CC BY 2.5</a>, <a href="https://commons.wikimedia.org/w/index.php?curid=16455198">Link</a></p>
<p></p></li>
</ul>
</section>
<section id="système-de-gestion-de-base-de-données-sgbd" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="système-de-gestion-de-base-de-données-sgbd"><span class="header-section-number">4</span> Système de gestion de base de données: <em>SGBD</em> *</h2>
<p><strong>Cette partie ne pourra pas faire l’objet d’une évaluation lors de l’épreuve terminale écrite et pratique de l’enseignement de spécialité.</strong> <a href="https://www.education.gouv.fr/bo/21/Hebdo30/MENE2121274N.htm" class="cite-source">BO MENE2121274N</a></p>
<p>Comme nous l’avons vu l’utilisation d’un modèle relationnel, permet d’éviter des redondances dans les données ce qui permet <strong>d’économiser de la place</strong>, mais aussi de ne garder qu’une seule source de vérité et éviter par exemple les noms orthographiés de plusieurs façons différentes.</p>
<p>Mais ce n’est pas tout, la base de données est gérée par un programme appelé système de gestion de base de données(SGBD).</p>
<p><picture>
			  <source type="image/webp" srcset="/img/Bfg5IMTgAi-300.webp 300w, /img/Bfg5IMTgAi-600.webp 600w, /img/Bfg5IMTgAi-1243.webp 1243w" sizes="100vw">
  <source type="image/png" srcset="/img/Bfg5IMTgAi-300.png 300w, /img/Bfg5IMTgAi-600.png 600w, /img/Bfg5IMTgAi-1243.png 1243w" sizes="100vw">
				<img class="img-fluid" src="https://www.lyceum.fr/2023-2024/img/Bfg5IMTgAi-300.webp" width="1243" height="578" alt="Approche classique avec serveur SGBD" loading="lazy" decoding="async">
			</picture>
<a href="http://sql.bdpedia.fr/intro.html#donnees-bases-de-donnees-et-sgbd" class="cite-source">Image CC-BY-NC-SA Philippe Rigaux sur sql.dbpedia.fr</a></p>
<p>Le SGBD veille à ce que les données dans la table restent conformes au schéma qui la définit, mais aussi:</p>
<ul>
<li>La <strong>gestion des accès concurrents</strong>: que faire si deux personnes accèdent et modifient en me temps la base de données?</li>
<li><strong>Efficacité de traitement des requêtes</strong>: les bases de données pouvant être très volumineuse(jusqu’au pétaoctet), il faut pouvoir rechercher dedans efficacement.</li>
<li><strong>Sécurisation des accès</strong>: qui a le droit de lire, d’écrire dans la base de données.</li>
</ul>
<div class="plus">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
En plus: Propriétés ACID
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="plus" data-titre="Propriétés ACID">
<p>En informatique, les propriétés ACID (atomicité, cohérence, isolation et durabilité) sont un ensemble de propriétés qui garantissent qu’une transaction informatique est exécutée de façon fiable.</p>
<p>Jim Gray a défini les propriétés qui garantissent des transactions fiables à la fin des années 1970 et a développé des technologies pour les mettre en œuvre automatiquement.</p>
<p><a href="https://fr.wikipedia.org/wiki/Propri%C3%A9t%C3%A9s_ACID" class="cite-source">Article Wikipédia ACID</a></p>
</div>
</div>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>TNSI</category>
  <guid>https://www.lyceum.fr/2023-2024/tg/nsi/2-bases-de-donnees/1-les-bases-de-donnees-relationnelles/</guid>
  <pubDate>Thu, 16 May 2024 13:21:00 GMT</pubDate>
</item>
<item>
  <title>Chapitre 2: Schéma relationnel</title>
  <link>https://www.lyceum.fr/2023-2024/tg/nsi/2-bases-de-donnees/2-schema-relationnel/</link>
  <description><![CDATA[ 




<div class="programme">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Programme
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="programme">
<table class="table table-bordered table-hover">
<thead class="table-warning">
<tr class="header">
<th>Contenus</th>
<th>Capacités attendues</th>
<th>Commentaires</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Base de données relationnelle.</td>
<td><p>Savoir distinguer la structure d’une base de données de son contenu.</p>
<p>Repérer des anomalies dans le schéma d’une base de données.</p></td>
<td><p>La structure est un ensemble de schémas relationnels qui respecte les contraintes du modèle relationnel.</p>
<p>Les anomalies peuvent être des redondances de données ou des anomalies d’insertion, de suppression, de mise à jour.</p>
<p>On privilégie la manipulation de données nombreuses et réalistes.</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</div>
<blockquote class="blockquote">
<p>Nous allons voir plus en détail ce que sont les bases de données relationnelles et mettre en évidence quelques anomalies qui peuvent être rencontrées.</p>
</blockquote>
<section id="vocabulaire" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="vocabulaire"><span class="header-section-number">1</span> Vocabulaire</h2>
<p>Nous allons définir le vocabulaire de l’algèbre relationnelle inventée en 1970 par Edgar Frank Codd, et le mettre en relation avec le vocabulaire plus abordable des tableaux.</p>
<p></p><figure class="wikimage figure"><picture>
			  <source type="image/webp" srcset="/img/euQ9MTwIoU-300.webp 300w, /img/euQ9MTwIoU-600.webp 600w, /img/euQ9MTwIoU-684.webp 684w" sizes="100vw">
  <source type="image/png" srcset="/img/euQ9MTwIoU-300.png 300w, /img/euQ9MTwIoU-600.png 600w, /img/euQ9MTwIoU-684.png 684w" sizes="100vw">
				<img class="img-fluid figure-img" src="https://www.lyceum.fr/2023-2024/img/euQ9MTwIoU-300.webp" width="684" height="339" alt="Le vocabulaire des bases de données." loading="lazy" decoding="async">
			</picture>
<figcaption id="caption">Le vocabulaire des bases de données.</figcaption><figcaption id="credit">©&nbsp;<a href="https://en.wikipedia.org/wiki/fr:User:Puerto01" class="extiw" title="w:fr:User:Puerto01">Puerto01</a> at <a href="https://en.wikipedia.org/wiki/fr:" class="extiw" title="w:fr:">French Wikipedia</a>&nbsp;CC BY 2.5&nbsp;<a id="image-description" href="//commons.wikimedia.org/wiki/File:Table_relationnel.png">via Wikimedia Commons</a></figcaption></figure><p></p>
<dl>
<dt>
Relation
</dt>
<dd>
<div>
<p>Dans le modèle relationnel, les données sont stockées dans des tables, aussi appelées <strong>relations</strong>.</p>
</div>
</dd>
</dl>
<p>L’illustration ci-dessus présente une relation appelée <code>voiture</code>.</p>
<dl>
<dt>
Attribut
</dt>
<dd>
<div>
<p>Le nom d’une colonne d’une relation est appelé <strong>attribut</strong>.</p>
</div>
</dd>
</dl>
<p>La relation <code>voiture</code> possède trois attributs: <code>marque</code>, <code>couleur</code> et <code>plaque</code>.</p>
<dl>
<dt>
n-uplet
</dt>
<dd>
<div>
<p>Un enregistrement (ligne) d’une relation est appelé <strong>n-uplet</strong>.</p>
</div>
</dd>
</dl>
<div class="examples">
<ul>
<li><code>ID voiture</code>, <code>marque</code> de la table voiture.</li>
<li><code>ID carburant</code>, <code>type</code> de la table carburant.</li>
</ul>
</div>
<dl>
<dt>
Domaine
</dt>
<dd>
<div>
<p>Le <strong>domaine</strong> d’un attribut est l’ensemble des valeurs qui peuvent être prises par cet attribut.</p>
</div>
</dd>
</dl>
<div class="examples">
<p>Une base de donnée <a href="https://www.sqlite.org/datatype3.html#storage_classes_and_datatypes">sqlite</a> il n’y a que cinq domaines de valeurs possibles:</p>
<ul>
<li><code>NULL</code>. La valeur est une valeur NULL.</li>
<li><code>INTEGER</code>. La valeur est un entier signé, stocké dans 1, 2, 3, 4, 6 ou 8 octets en fonction de l’amplitude de la valeur.</li>
<li><code>REAL</code>. La valeur est une valeur à virgule flottante, stockée sous forme de nombre à virgule flottante IEEE de 8 octets.</li>
<li><code>TEXT</code>. La valeur est une chaîne de texte, stockée à l’aide du codage de la base de données (UTF-8, UTF-16BE ou UTF-16LE).</li>
<li><code>BLOB</code>. La valeur est une donnée binaire brute, stocké exactement comme elle a été entrée.</li>
</ul>
<p>Dans le SGBD MariaDB il y a beaucoup plus de types avec notamment des formats pour les dates <a href="https://mariadb.com/kb/en/data-types/">(voir doc)</a>.</p>
</div>
<p>Pour résumer, le tableau suivant montre celui, rigoureux, issu de l’algèbre relationnelle et celui, plus vague, correspondant à la représentation par table. Les termes de chaque ligne seront considérés comme équivalents, mais on privilégiera les premiers qui sont plus précis.</p>
<table class="table table-bordered table-hover">
<thead class="table-warning">
<tr class="header">
<th>Terme de l’algèbre relationnelle</th>
<th>Terme de la représentation par table</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Relation</td>
<td>Table</td>
</tr>
<tr class="even">
<td>n-uplet</td>
<td>ligne</td>
</tr>
<tr class="odd">
<td>Nom d’attribut</td>
<td>Nom de colonne</td>
</tr>
<tr class="even">
<td>Valeur d’attribut</td>
<td>Cellule</td>
</tr>
<tr class="odd">
<td>Domaine</td>
<td>Type</td>
</tr>
</tbody>
</table>
<p><a href="http://sql.bdpedia.fr/relationnel.html#le-schema" class="cite-source">Philippe Rigaux sur sql.dbpedia.fr CC-BY-NC-SA</a></p>
</section>
<section id="clés-primaire-et-secondaire" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="clés-primaire-et-secondaire"><span class="header-section-number">2</span> Clés primaire et secondaire</h2>
<dl>
<dt>
Clé primaire
</dt>
<dd>
<div>
<p>Chaque ligne de la table doit comporter un attribut qui l’identifie de façon <strong>unique</strong>, on l’appelle la <strong>clé primaire</strong>.</p>
</div>
</dd>
</dl>
<div class="examples">
<ul>
<li>Dans la table <code>voiture</code> l’attribut <code>plaque</code> pourrait constituer la clé primaire.</li>
<li>En s’inscrivant sur un site, on vous impose d’utiliser un <code>identifiant</code> unique pour créer votre ligne dans la base de données.</li>
<li>L’email d’un utilisateur peut servir de clé primaire, mais ce n’est pas conseillé.</li>
</ul>
</div>
<div class="plus">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
En plus
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="plus">
<p>On préférera utiliser une clé primaire complètement indépendante des données métier, afin de s’assurer que le champ est toujours rempli et n’évolue pas dans le temps.</p>
<p>Toutes les bases de données proposent des mécanismes prenant en charge une numérotation utilisable pour les clés primaires.</p>
</div>
</div>
</div>
</div>
</div>
<dl>
<dt>
Clé secondaire
</dt>
<dd>
<div>
<p>Une clé secondaire ou <em>clé étrangère</em> est une clé utilisée dans une table pour faire référence à un enregistrement d’une autre table.</p>
</div>
</dd>
</dl>
<div class="example">
<p></p><figure class="wikimage figure"><picture>
			  <source type="image/webp" srcset="/img/r5MFdUcvPR-300.webp 300w, /img/r5MFdUcvPR-320.webp 320w" sizes="100vw">
  <source type="image/png" srcset="/img/r5MFdUcvPR-300.png 300w, /img/r5MFdUcvPR-320.png 320w" sizes="100vw">
				<img class="img-fluid figure-img" src="https://www.lyceum.fr/2023-2024/img/r5MFdUcvPR-300.webp" width="320" height="257" alt="La clé primaire ID carburant de la relation carburant sert de clé secondaire dans la relation voiture." loading="lazy" decoding="async">
			</picture>
<figcaption id="caption">La clé primaire ID carburant de la relation carburant sert de clé secondaire dans la relation voiture.</figcaption><figcaption id="credit">©&nbsp;<a href="https://en.wikipedia.org/wiki/fr:User:Puerto01" class="extiw" title="w:fr:User:Puerto01">Puerto01</a> at <a href="https://en.wikipedia.org/wiki/fr:" class="extiw" title="w:fr:">French Wikipedia</a>&nbsp;CC BY 2.5&nbsp;<a id="image-description" href="//commons.wikimedia.org/wiki/File:Relation.png">via Wikimedia Commons</a></figcaption></figure><p></p>
</div>
<div class="prop">
<p>L’ensemble constitué d’une <em>clé primaire</em> et d’une <em>clé étrangère</em> sert à établir des <em>relations</em> entre tables.</p>
</div>
</section>
<section id="contraintes-dintégrité" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="contraintes-dintégrité"><span class="header-section-number">3</span> Contraintes d’intégrité</h2>
<p>Les SGBD modernes permettent de garder les données conformes au modèle relationnel. <strong>Trois types de contraintes d’intégrité</strong> font partie intégrante du modèle de données relationnel:</p>
<ul>
<li><strong>L’intégrité de clé primaire</strong>: cette règle stipule que chaque table doit avoir une clé primaire et que la ou les colonnes choisies pour être la clé primaire doivent être uniques et non nulles.</li>
</ul>
<div class="example">
<p>Dans la table <code>voiture</code> essayez d’ajouter la troisième voiture avec l’ID 2, l’ajout sera refusé, car <code>ID voiture</code> a été déclaré comme clé primaire</p>
</div>
<ul>
<li><strong>L’intégrité référentielle</strong> est une situation dans laquelle pour chaque information d’une table A qui fait référence à une information d’une table B, l’information référencée existe dans la table B.</li>
</ul>
<div class="examples">
<p>Si vous tentez de supprimer la ligne 2 de la table <code>carburant</code>, le SGBD vous le refusera en raison de sa présence dans la table des voitures à la ligne de la BMW.</p>
<p>Il est aussi impossible d’ajouter dans la table <code>voitures</code> un <code>id carburant</code> qui n’existe pas dans la relation <code>carburant</code>.</p>
</div>
<ul>
<li><strong>L’intégrité du domaine</strong> spécifie que toutes les colonnes d’une base de données relationnelle doivent être déclarées sur un domaine défini.</li>
</ul>
<div class="example">
<p>S’assurer qu’une valeur est bien un email, un numéro de téléphone ou un code postal.</p>
<p>Le support des types dans sqlite étant relativement limité, vous pouvez par exemple vérifier qu’on ne peut ajouter un <code>id voiture</code> qui ne soit pas un entier comme <code>A</code> par exemple.</p>
</div>
<div class="prop">
<p>Une fois la contrainte déclarée, le SGBD refusera toute modification du contenu de la base de données qui violerait une de ces règles et casserait l’intégrité.</p>
</div>
<div class="appli">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Application
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="appli">
<p>Télécharger la base de données sqlite <code>voitures.db</code> à l’adresse suivante: https://apps.lyceum.fr/sqlite/dbs/voitures.db.</p>
<p>L’ouvrir dans sqliteBrowser et vérifier que les trois contraintes d’intégrité sont bien gérées par le SGBD sqlite.</p>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="exemples-danomalies" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="exemples-danomalies"><span class="header-section-number">4</span> Exemples d’anomalies</h2>
<p>Nous allons montrer sur un l’exemple d’une base de donnée de DVD <em>mal construite</em> quels types d’anomalies peuvent apparaître.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><picture>
			  <source type="image/webp" srcset="/img/XzVfDbL8x4-300.webp 300w, /img/XzVfDbL8x4-600.webp 600w, /img/XzVfDbL8x4-1173.webp 1173w" sizes="100vw">
  <source type="image/png" srcset="/img/XzVfDbL8x4-300.png 300w, /img/XzVfDbL8x4-600.png 600w, /img/XzVfDbL8x4-1173.png 1173w" sizes="100vw">
				<img class="img-fluid figure-img" src="https://www.lyceum.fr/2023-2024/img/XzVfDbL8x4-300.webp" width="1173" height="484" alt="" loading="lazy" decoding="async">
			</picture>
</p>
<figcaption>exemple de table de DVDs</figcaption>
</figure>
</div>
<p><a href="https://www.univ-orleans.fr/lifo/Members/Mirian.Halfeld/Cours/BD/iutA2-intro.pdf" class="cite-source">Mirian Halfeld-Ferrari Université d’Orléans</a></p>
<p>Comme vous le voyez cette table est mal construite:</p>
<ul>
<li>Les données sont <em>redondantes</em>: À chaque fois qu’un film apparaît, les valeurs pour le genre, length et rating apparaissent aussi.</li>
<li>Les attributs concernent à la fois le DVD et le film, il <strong>faudrait créer des tables séparées</strong>.</li>
</ul>
<p>Maintenant, intéressons-nous aux anomalies qui pourraient se présenter:</p>
<ul>
<li><strong>Anomalie de mise à jour</strong>: Que se passe-t-il si le film <code>Elisabeth</code> est renommé <code>Élisabeth</code> pour satisfaire les clients francophones?</li>
<li><strong>Anomalie d’insertion</strong>: Que se passe-t-il avec l’insertion du n-uplet : <code>〈102,1/1/99,   Elisabeth, drama,110, PG13〉</code></li>
<li><strong>Anomalie de suppression</strong>: Que se passe-t-il lors de la suppression du DVD numéro <code>123</code>?</li>
</ul>
</section>
<section id="comment-concevoir-une-base-de-données-bien-structurée" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="comment-concevoir-une-base-de-données-bien-structurée"><span class="header-section-number">5</span> Comment concevoir une base de données bien structurée?</h2>
<p>Une base de données bien structurée:</p>
<ul>
<li>Économise de l’espace disque en éliminant les données redondantes.</li>
<li>Maintient l’exactitude et l’intégrité des données.</li>
<li>Fournit un accès facile aux données utiles.</li>
</ul>
<p>Le processus de conception peut-être scindé comme suit:</p>
<ol type="1">
<li>Analyse des besoins ou identification de l’objectif de votre base de données.</li>
<li>Organisation des données en tableaux.</li>
<li>Spécification des clés primaires et analyse des relations.</li>
</ol>
<p>L’utilisation d’un diagramme relationnel aide à visualiser les relations entre les données.</p>
<p>Voici l’exemple de la base de données «<a href="https://apps.lyceum.fr/sqlite">Rock60</a>» qui rassemble des données sur les albums de rock des années 60 ainsi que les musiciens et producteurs qui y ont participé.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><picture>
			  <source type="image/webp" srcset="/img/Rn596G99Tt-300.webp 300w, /img/Rn596G99Tt-600.webp 600w, /img/Rn596G99Tt-653.webp 653w" sizes="100vw">
  <source type="image/png" srcset="/img/Rn596G99Tt-300.png 300w, /img/Rn596G99Tt-600.png 600w, /img/Rn596G99Tt-653.png 653w" sizes="100vw">
				<img class="img-fluid figure-img" src="https://www.lyceum.fr/2023-2024/img/Rn596G99Tt-300.webp" width="653" height="606" alt="" loading="lazy" decoding="async">
			</picture>
</p>
<figcaption>Schéma relationnel de la base de données rock60</figcaption>
</figure>
</div>
<p>Outre l’utilisation de clés primaires et secondaires, on a ajouté des tables particulières qui permettent de relier deux tables lorsque qu’on a une relation dite N:N.</p>
<div class="example">
<p>Une personne peut jouer dans plusieurs groupes et un groupe est constitué de plusieurs personnes.</p>
<p>La table <code>Joue Dans</code> permet d’exprimer cette relation en utilisant deux clés étrangères.</p>
</div>
<div class="appli">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Application
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="appli">
<p>En étudiant le schéma ci-dessus:</p>
<ul>
<li>Donner le nom de toutes les clés primaires.</li>
<li>Donner le nom de toutes les clés secondaires.</li>
<li>Donner le nom de toutes les tables exprimant les relations N:N comme la table <code>Joue Dans</code>.</li>
</ul>
</div>
</div>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>TNSI</category>
  <guid>https://www.lyceum.fr/2023-2024/tg/nsi/2-bases-de-donnees/2-schema-relationnel/</guid>
  <pubDate>Thu, 16 May 2024 13:21:00 GMT</pubDate>
</item>
<item>
  <title>Chapitre 3: Langage SQL</title>
  <link>https://www.lyceum.fr/2023-2024/tg/nsi/2-bases-de-donnees/3-langage-sql/</link>
  <description><![CDATA[ 




<div class="programme">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Programme
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="programme">
<table class="table table-bordered table-hover">
<thead class="table-warning">
<tr class="header">
<th>Contenus</th>
<th>Capacités attendues</th>
<th>Commentaires</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Langage SQL : requêtes d’interrogation et de mise à jour d’une base de données.</td>
<td><p>Identifier les composants d’une requête.</p>
<p>Construire des requêtes d’interrogation à l’aide des clauses du langage SQL : <code>SELECT</code>, <code>FROM</code>, <code>WHERE</code>, <code>JOIN</code>.</p>
<p>Construire des requêtes d’insertion et de mise à jour à l’aide de : <code>UPDATE</code>, <code>INSERT</code>, <code>DELETE</code>.</p></td>
<td>On peut utiliser <code>DISTINCT</code>, <code>ORDER BY</code> ou les fonctions d’agrégation sans utiliser les clauses <code>GROUP BY</code> et <code>HAVING</code>.</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</div>
<!-- A VOIR https://fr.wikipedia.org/wiki/Alg%C3%A8bre_relationnelle pour les fondements algébriques du sql 

-->
<div class="intro">
<p></p><figure class="wikimage figure"><picture>
			  <source type="image/webp" srcset="/img/eHyPTxmfGo-300.webp 300w, /img/eHyPTxmfGo-600.webp 600w, /img/eHyPTxmfGo-1052.svg 1052w" sizes="100vw">
  <source type="image/svg+xml" srcset="/img/eHyPTxmfGo-1052.svg 1052w" sizes="100vw">
				<img class="img-fluid figure-img" src="https://www.lyceum.fr/2023-2024/img/eHyPTxmfGo-300.webp" width="1052" height="744" alt="The different types of SQL join and their outputs as determined by sets" loading="lazy" decoding="async">
			</picture>
<figcaption id="caption"></figcaption><figcaption id="credit">©&nbsp;&nbsp;CC BY 3.0&nbsp;<a id="image-description" href="//commons.wikimedia.org/wiki/File:SQL_Joins.svg">via Wikimedia Commons</a></figcaption></figure><p></p>
<blockquote class="blockquote">
<p>Maintenant que nous avons vu comment étaient organisées les bases de données, et comment elles étaient maintenues conformes, nous allons interagir avec elles en utilisant le langage <code>SQL</code>(<em>Structured Query Language</em>) pour interroger ou écrire dans une base de données.</p>
</blockquote>
</div>
<p>Dans ce cours, nous allons utiliser le SGBD <code>sqlite3</code> qui permet de stocker des petites bases de données dans des fichiers.</p>
<p>Il existe de nombreuses façons d’écrire des requêtes SQL avec une base de données <code>sqlite</code>:</p>
<ul>
<li>En interface graphique avec <a href="https://sqlitebrowser.org/">sqlitebrowser</a>,</li>
<li>En console, en lançant: <code>sqlite3 nom_de_ma_bdd.db</code>.</li>
<li>Dans le navigateur grâce à <a href="https://github.com/sql-js/sql.js"><code>sql.js</code></a> voir https://apps.lyceum.fr/sqlite par exemple.</li>
<li>Via un langage de programmation comme Python grâce au module <a href="https://docs.python.org/3/library/sqlite3.html"><code>sqlite3</code></a></li>
</ul>
<p>Pour illustrer ce cours, nous allons étudier des données situées dans la base de données peinture de la page https://apps.lyceum.fr/sqlite.</p>
<section id="le-langage-sql" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="le-langage-sql"><span class="header-section-number">1</span> Le langage SQL</h2>
<p>Les instructions SQL s’écrivent d’une manière qui ressemble à celle de phrases ordinaires en anglais. C’est un langage <strong>déclaratif</strong>, c’est-à-dire qu’il permet de décrire le résultat escompté, sans décrire la manière de l’obtenir.</p>
<p>Le langage <code>SQL</code> n’est pas sensible à la casse, mais a l’<em>habitude d’écrire les instructions en majuscules</em>, on peut écrire les instructions sur plusieurs lignes avec ou sans indentation et chaque instruction doit être terminée par un <em>point-virgule</em>.</p>
<p>Nous verrons cette année les instructions de manipulation du contenu de la base de données qui commencent par les mots clés:</p>
<ul>
<li><code>SELECT</code>: recherche de contenu;</li>
<li><code>UPDATE</code>: modification,</li>
<li><code>INSERT</code>: ajout,</li>
<li><code>DELETE</code> suppression.</li>
</ul>
<div class="example">
<p>Étudions dans la console les tables contenues dans la base de données <code>peintures</code>.</p>
<p>Dont le schéma est le suivant:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><picture>
			  <source type="image/webp" srcset="/img/1pDl9Z09w9-300.webp 300w, /img/1pDl9Z09w9-503.webp 503w" sizes="100vw">
  <source type="image/png" srcset="/img/1pDl9Z09w9-300.png 300w, /img/1pDl9Z09w9-503.png 503w" sizes="100vw">
				<img class="img-fluid figure-img" src="https://www.lyceum.fr/2023-2024/img/1pDl9Z09w9-300.webp" width="503" height="347" alt="" loading="lazy" decoding="async">
			</picture>
</p>
<figcaption>Schéma relationnel de la bdd peinture.db</figcaption>
</figure>
</div>
<p>Ouvrir la page https://apps.lyceum.fr/sqlite puis sélectionner la base de données <code>peinture</code>.</p>
<p>Maintenant dans l’éditeur <code>sql</code>, on peut interagir avec la bdd, par exemple en affichant tous les peintres de la table <code>peintres</code>.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">SELECT</span> peintre <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> peintres;</span></code></pre></div>
<p>Pour exécuter une commande <code>sql</code>, vous pouvez utiliser <code>CTRL+Entrée</code>.</p>
</div>
</section>
<section id="construire-des-requêtes-dinterrogation" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="construire-des-requêtes-dinterrogation"><span class="header-section-number">2</span> Construire des requêtes d’interrogation</h2>
<p>Pour afficher tous les enregistrements d’une table on utilise:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">SELECT</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> tablename;</span></code></pre></div>
<div class="examples">
<p>On va commencer par afficher toutes les entrées de:</p>
<ul>
<li>La table <code>peintres</code>: <code>SELECT * FROM peintres;</code>,</li>
<li>puis <code>peintures</code>: <code>SELECT * FROM peintures;</code>.</li>
</ul>
<p>On peut limiter le nombre de lignes affichées avec <code>LIMIT</code>, par exemple pour n’afficher que trois enregistrements de la sélection: <code>SELECT * FROM peintres LIMIT 3;</code>,</p>
</div>
<section id="choisir-les-colonnes-à-afficher-avec-select" class="level3" data-number="2.1">
<h3 data-number="2.1" class="anchored" data-anchor-id="choisir-les-colonnes-à-afficher-avec-select"><span class="header-section-number">2.1</span> Choisir les colonnes à afficher avec <code>SELECT</code></h3>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">SELECT</span> col1, col2 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> tablename;</span></code></pre></div>
<div class="example">
<p>On va récupérer le nom et le sexe du peintre:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">SELECT</span> nom, sexe <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> peintres;</span></code></pre></div>
</div>
</section>
<section id="restreindre-les-lignes-avec-where" class="level3" data-number="2.2">
<h3 data-number="2.2" class="anchored" data-anchor-id="restreindre-les-lignes-avec-where"><span class="header-section-number">2.2</span> Restreindre les lignes avec <code>WHERE</code></h3>
<p>On sélectionne les tableaux peints en 1503.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">SELECT</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> peintures <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">WHERE</span> annee<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"1503"</span>;</span></code></pre></div>
</section>
<section id="jointure-de-deux-tables-avec-join" class="level3" data-number="2.3">
<h3 data-number="2.3" class="anchored" data-anchor-id="jointure-de-deux-tables-avec-join"><span class="header-section-number">2.3</span> Jointure de deux tables avec <code>JOIN</code></h3>
<p>Dans cette base de données, les informations sur les peintres et sur les peintures ont été séparées, ce qui est bien pour éviter la redondance et les risques d’anomalies.</p>
<div class="prop">
<p>La jointure permet d’utiliser les clés secondaires pour aller rechercher les données d’une autre table grâce à la clé étrangère.</p>
</div>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">SELECT</span> colonne1, colonne2 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> table1</span>
<span id="cb6-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">JOIN</span> table2 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">ON</span> table1.attribut <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> table2.attribut</span></code></pre></div>
<div class="example">
<p>Par exemple, la requête: <code>SELECT * FROM peintures WHERE titre="La Joconde";</code></p>
<p>renvoie:</p>
<pre><code>12418|La Joconde|1503|762|Haute Renaissance|http://commons.wikimedia.org/wiki/Special:FilePath/Mona%20Lisa%2C%20by%20Leonardo%20da%20Vinci%2C%20from%20C2RMF%20retouched.jpg</code></pre>
<p>Ainsi le peintre est identifié par son id <code>762</code>, c’est bien pour la base de données, mais pas pour l’utilisateur qui veut connaitre le nom du peintre.</p>
<p>Il va falloir aller chercher cette information dans la deuxième table: <code>peintres</code> et faire une jointure pour afficher toutes les informations souhaitées.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">SELECT</span> titre, annee, peintre, pays, date_naissance, date_mort <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> peintures </span>
<span id="cb8-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">JOIN</span> peintres <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">ON</span> peintures.id_peintre<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>peintres.<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">id</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">WHERE</span> titre<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"La Joconde"</span>;</span></code></pre></div>
<p>Qui renvoie:</p>
<pre><code>La Joconde  |   1503    |   Léonard de Vinci    |   République florentine   |   1452-04-24T00:00:00Z    |   1519-05-12T00:00:00Z</code></pre>
<p>Comme vous le voyez il est possible ou nécessaire de préciser d’où vient la colonne sélectionnée avec une notation pointée comme: <code>peintures.id</code> de la forme <code>nom_de_la_table.nom_de_la_colonne</code></p>
</div>
</section>
<section id="les-clauses-distinct-order-by-et-group-by" class="level3" data-number="2.4">
<h3 data-number="2.4" class="anchored" data-anchor-id="les-clauses-distinct-order-by-et-group-by"><span class="header-section-number">2.4</span> Les clauses <code>DISTINCT</code> <code>ORDER BY</code> et <code>GROUP BY</code></h3>
<p>Voici deux instructions supplémentaires qui peuvent être utiles:</p>
<ul>
<li><p><code>DISTINCT</code>: Ne pas renvoyer les doublons.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb10-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">SELECT</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">DISTINCT</span> ma_colonne</span>
<span id="cb10-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> nom_du_tableau;</span></code></pre></div>
<div class="example">
<p>De nombreux peintres proviennent du même pays. Ainsi la requête suivante va renvoyer des doublons.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">SELECT</span> pays <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> peintres;</span></code></pre></div>
<p>On ajoute <code>DISTINCT</code> pour n’afficher que des valeurs distinctes.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb12-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">SELECT</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">DISTINCT</span> pays <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> peintres;</span></code></pre></div>
</div></li>
</ul>
<p>Cette requête sélectionne le champ <code>ma_colonne</code> de la table <code>nom_du_tableau</code> en évitant de retourner des doublons.</p>
<ul>
<li><p><code>ORDER BY</code>: Permet d’ordonner les résultats selon la colonne de votre choix.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb13-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">SELECT</span> colonne1, colonne2</span>
<span id="cb13-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">table</span></span>
<span id="cb13-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">ORDER</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">BY</span> colonne1 [<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">ASC</span>|<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">DESC</span>];</span></code></pre></div>
<p>Cette requête sélectionne les champs <code>colonne1</code> et <code>colonne2</code> de la table <code>table</code> et classe la sélection par ordre croissant sur la <code>colonne1</code>.</p>
<div class="example">
<p>On classe les tableaux par date croissante.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">SELECT</span> titre, annee</span>
<span id="cb14-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> peintures</span>
<span id="cb14-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">ORDER</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">BY</span> annee;</span></code></pre></div>
<p>On ajoute <code>DISTINCT</code> pour n’afficher que des valeurs distinctes.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb15-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">SELECT</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">DISTINCT</span> pays <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> peintres;</span></code></pre></div>
</div></li>
<li><p><code>GROUP BY</code>: grouper plusieurs résultats et utiliser une fonction d’agrégation (<code>SUM</code>, <code>AVG</code>, <code>COUNT</code>, <code>MAX</code>, <code>MIN</code>) sur un groupe de résultat.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb16-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">SELECT</span> colonne1, colonne2</span>
<span id="cb16-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">table</span></span>
<span id="cb16-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">GROUP</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">BY</span> colonne1;</span></code></pre></div>
<div class="example">
<p>On regroupe les peintres par pays en comptant le nombre de peintres par pays.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb17-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">SELECT</span> pays, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">COUNT</span>(pays) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> peintres</span>
<span id="cb17-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">GROUP</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">BY</span> pays</span>
<span id="cb17-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">ORDER</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">BY</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">COUNT</span>(pays) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">DESC</span>;</span></code></pre></div>
</div></li>
</ul>
</section>
</section>
<section id="construire-des-requêtes-dinsertion-et-de-mise-à-jour" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="construire-des-requêtes-dinsertion-et-de-mise-à-jour"><span class="header-section-number">3</span> Construire des requêtes d’insertion et de mise à jour</h2>
<section id="ajouter-des-entrées-avec-insert" class="level3" data-number="3.1">
<h3 data-number="3.1" class="anchored" data-anchor-id="ajouter-des-entrées-avec-insert"><span class="header-section-number">3.1</span> Ajouter des entrées avec <code>INSERT</code></h3>
<p>Grâce au SQL, nous pouvons aussi ajouter des informations dans une table avec la commande <code>INSERT INTO</code>. Pour ce faire, il faut indiquer la table dans laquelle on souhaite intégrer une ligne ainsi que la liste des champs pour lesquels on spécifie une valeur, et enfin la liste des valeurs correspondantes.</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb18-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">INSERT</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">INTO</span> table1 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">VALUES</span></span>
<span id="cb18-2">(val1, val2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span>., valN)</span></code></pre></div>
<div class="example">
<p>Ajout d’un tableau La Joconde 2.</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb19-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">INSERT</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">INTO</span> peintures <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">VALUES</span></span>
<span id="cb19-2">(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">124181</span>, <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"La Joconde 2 Le retour"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1504</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">762</span>, <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"Haute Renaissance"</span>, <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">NULL</span>);</span></code></pre></div>
</div>
</section>
<section id="mettre-à-jour-des-informations-avec-update" class="level3" data-number="3.2">
<h3 data-number="3.2" class="anchored" data-anchor-id="mettre-à-jour-des-informations-avec-update"><span class="header-section-number">3.2</span> Mettre à jour des informations avec <code>UPDATE</code></h3>
<p>On peut modifier certains champs d’enregistrements existants grâce au mot-clé <code>UPDATE</code> : cette instruction permet de mettre à jour plusieurs champs de plusieurs enregistrements d’une table, à partir des expressions qui lui sont fournies.</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb20-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">UPDATE</span> table1 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">SET</span> col1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>val1</span>
<span id="cb20-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">WHERE</span> coli<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"valeur"</span>;</span></code></pre></div>
<div class="example">
<p>Mise à jour de la Joconde 2.</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb21-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">UPDATE</span> peintures <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">SET</span> annee<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1505</span>  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">WHERE</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">124181</span>;</span></code></pre></div>
<p>On peut vérifier la mise à jour avec: <code>SELECT * FROM peintures WHERE id=124181;</code></p>
</div>
</section>
<section id="supprimer-des-entrées-avec-delete" class="level3" data-number="3.3">
<h3 data-number="3.3" class="anchored" data-anchor-id="supprimer-des-entrées-avec-delete"><span class="header-section-number">3.3</span> Supprimer des entrées avec <code>DELETE</code></h3>
<p>Il se peut que l’on soit amené à supprimer un ou plusieurs enregistrements d’une table, il existe pour cela l’instruction <code>DELETE FROM</code>.</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb22-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">DELETE</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> table1</span>
<span id="cb22-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">WHERE</span> coli<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"valeur"</span>;</span></code></pre></div>
<div class="example">
<p>On va supprimer la Joconde 2.</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb23-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">DELETE</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> peintures <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">WHERE</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">124181</span>;</span></code></pre></div>
<p>On peut vérifier la suppression avec: <code>SELECT * FROM peintures WHERE id=124181;</code></p>
</div>
<div class="ref">
<ul>
<li><a href="https://openclassrooms.com/fr/courses/993975-apprenez-a-programmer-en-vb-net/992711-introduction-au-langage-sql">Cours OpenClassRoom de Thomas Martinet sous licence CC-BY-NC-SA</a></li>
</ul>
</div>


</section>
</section>

 ]]></description>
  <category>TNSI</category>
  <guid>https://www.lyceum.fr/2023-2024/tg/nsi/2-bases-de-donnees/3-langage-sql/</guid>
  <pubDate>Thu, 16 May 2024 13:21:00 GMT</pubDate>
</item>
<item>
  <title>Chapitre 1: Système sur puce</title>
  <link>https://www.lyceum.fr/2023-2024/tg/nsi/3-architectures-materielles-systemes-dexploitation-et-reseaux/1-systeme-sur-puce/</link>
  <description><![CDATA[ 




<div class="programme">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Programme
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="programme">
<table class="table table-bordered table-hover">
<thead class="table-warning">
<tr class="header">
<th>Contenus</th>
<th>Capacités attendues</th>
<th>Commentaires</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Composants intégrés d’un système sur puce.</td>
<td>Identifier les principaux composants sur un schéma de circuit et les avantages de leur intégration en termes de vitesse et de consommation.</td>
<td>Le circuit d’un téléphone peut être pris comme un exemple : microprocesseurs, mémoires locales, interfaces radio et filaires, gestion d’énergie, contrôleurs vidéo, accélérateur graphique, réseaux sur puce, etc.</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</div>
<div>
<!-- 

> Nous avons vu en
> [première](/1g/nsi/6-architectures-materielles-et-systemes-dexploitation/1-architecture-dun-ordinateur/)
> quelques éléments de l'architecture d'un ordinateur actuel dans lequel les composants sont reliés
> par l'intermédiaire d'une _carte mère_. Cependant avec les progrès dans la miniaturisation de
> l'électronique et l'essor des objets connectés, on se tourne de plus en vers des systèmes sur
> puce (_soc_ en anglais) qui regroupent dans un seul circuit nombre des fonctions autrefois
> effectuées par des circuits séparés.


<table class="table table-bordered table-hover" data-quarto-postprocess="true">
<thead class="table-warning">
<tr class="header">
<th data-quarto-table-cell-role="th"><p>AVANT</p></th>
<th data-quarto-table-cell-role="th"><p>APRES</p></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><div class="quarto-figure quarto-figure-center">
<figure>
<p><a href="https://commons.wikimedia.org/wiki/File:2010-01-26-technikkrempel-by-RalfR-05.jpg#/media/File:2010-01-26-technikkrempel-by-RalfR-05.jpg" target="not_lyceum"><picture>
			  <source type="image/webp" srcset="/img/Bdr8-oSyK_-300.webp 300w, /img/Bdr8-oSyK_-600.webp 600w, /img/Bdr8-oSyK_-1200.webp 1200w" sizes="100vw">
  <source type="image/jpeg" srcset="/img/Bdr8-oSyK_-300.jpeg 300w, /img/Bdr8-oSyK_-600.jpeg 600w, /img/Bdr8-oSyK_-1200.jpeg 1200w" sizes="100vw">
				<img
				    class="img-fluid" 
					src="/img/Bdr8-oSyK_-300.webp"
					width="1200"
					height="797"
					alt="2010-01-26-technikkrempel-by-RalfR-05.jpg"
					loading="lazy"
					decoding="async">
			</picture>
</a></p>
<figcaption>2010-01-26-technikkrempel-by-RalfR-05.jpg</figcaption>
</figure>
</div>
<p>Cartes mères d'ordinateurs</p>
By <a href="https://www.wikidata.org/wiki/Q15080600" target="not_lyceum" title="d:Q15080600">Ralf Roletschek</a> - <span class="int-own-work" lang="en">Own work</span>, <a href="http://www.gnu.org/licenses/old-licenses/fdl-1.2.html" target="not_lyceum" title="GNU Free Documentation License 1.2">GFDL 1.2</a>, <a href="https://commons.wikimedia.org/w/index.php?curid=9088826" target="not_lyceum">Link</a>
</p></td>
<td><div class="quarto-figure quarto-figure-center">
<figure>
<p><a href="https://commons.wikimedia.org/wiki/File:Samsung-Exynos-3110-Hummingbird_Nexus_S_GT-I9023.jpg#/media/File:Samsung-Exynos-3110-Hummingbird_Nexus_S_GT-I9023.jpg" target="not_lyceum"><picture>
			  <source type="image/webp" srcset="/img/HNg6thtqRF-300.webp 300w, /img/HNg6thtqRF-600.webp 600w, /img/HNg6thtqRF-1200.webp 1200w" sizes="100vw">
  <source type="image/jpeg" srcset="/img/HNg6thtqRF-300.jpeg 300w, /img/HNg6thtqRF-600.jpeg 600w, /img/HNg6thtqRF-1200.jpeg 1200w" sizes="100vw">
				<img
				    class="img-fluid" 
					src="/img/HNg6thtqRF-300.webp"
					width="1200"
					height="900"
					alt="Samsung-Exynos-3110-Hummingbird Nexus S GT-I9023.jpg"
					loading="lazy"
					decoding="async">
			</picture>
</a></p>
<figcaption>Samsung-Exynos-3110-Hummingbird Nexus S GT-I9023.jpg</figcaption>
</figure>
</div>
<p>Système sur puce d'un smartphone</p>
By <a href="/commons.wikimedia.org/wiki/User:K%C3%B6f3" target="not_lyceum" title="User:Köf3">Köf3</a> - <span class="int-own-work" lang="en">Own work</span>, <a href="https://creativecommons.org/licenses/by-sa/3.0" target="not_lyceum" title="Creative Commons Attribution-Share Alike 3.0">CC BY-SA 3.0</a>,
</p></td>
</tr>
</tbody>
</table>


## Composants d'un système sur puce

Bien que les composants soient beaucoup plus petits, on retrouve une architecture comparable à
celle des ordinateurs. Prenons l'exemple du nano-ordinateur Raspberry-pi.

<p><a href="https://commons.wikimedia.org/wiki/File:Raspberry_Pi_4_Model_B_-_Side.jpg#/media/File:Raspberry_Pi_4_Model_B_-_Side.jpg"><img class="half right" src="https://upload.wikimedia.org/wikipedia/commons/f/f1/Raspberry_Pi_4_Model_B_-_Side.jpg" alt="Raspberry Pi 4 Model B - Side.jpg" ></a><br>By M<span style="color:#ffffff">i</span>i<span style="color:#ffffff">i</span>c<span style="color:#ffffff">i</span>h<span style="color:#ffffff">i</span>a<span style="color:#ffffff">i</span>e<span style="color:#ffffff">i</span>l&nbsp;&nbsp;H<span style="color:#ffffff">i</span>e<span style="color:#ffffff">i</span>n<span style="color:#ffffff">i</span>z<span style="color:#ffffff">i</span>l<span style="color:#ffffff">i</span>e<span style="color:#ffffff">i</span>r&nbsp;/&nbsp;<a href="//commons.wikimedia.org/wiki/Main_Page" title="Main Page">Wikimedia Commons</a>, <a href="https://creativecommons.org/licenses/by-sa/4.0" title="Creative Commons Attribution-Share Alike 4.0">CC BY-SA 4.0</a>, <a href="https://commons.wikimedia.org/w/index.php?curid=80140656">Link</a></p>

<p><a href="https://commons.wikimedia.org/wiki/File:RaspberryPi_Model_4B.svg#/media/File:RaspberryPi_Model_4B.svg"><img class="full" src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/51/RaspberryPi_Model_4B.svg/1200px-RaspberryPi_Model_4B.svg.png" alt="RaspberryPi Model 4B.svg"></a><br>By <a href="//commons.wikimedia.org/w/index.php?title=User:Jstrom99&amp;action=edit&amp;redlink=1" title="User:Jstrom99 (page does not exist)">Jstrom99</a> - <span class="int-own-work" lang="en">Own work</span>, <a href="https://creativecommons.org/licenses/by-sa/4.0" title="Creative Commons Attribution-Share Alike 4.0">CC BY-SA 4.0</a>, <a href="https://commons.wikimedia.org/w/index.php?curid=83463602">Link</a></p>


::: appli

1. Retrouver les éléments de l'architecture de Von Neumann sur la vue schématique du Raspberry pi.
2. Quels autres éléments ont été rajoutés ? Dans quel but ?

:::

## Avantages des systèmes sur puces

La diminution de la taille des machines, et leur type d'utilisation implique des contraintes de
conception du système qui requièrent de nombreuses optimisations.

### Objectifs d'optimisation

Les SoC doivent optimiser la consommation d'énergie, la taille de la puce, la communication, le
positionnement entre les unités modulaires et d'autres facteurs. 

En général, l'optimisation de l'ensemble de ces contraintes est un problème d'optimisation
combinatoire difficile, et peut en effet être de complexité *NP$.

Souvent, les objectifs d'optimisation de certaines de ces quantités sont directement en désaccord,
ce qui ajoute de la complexité à l'optimisation de la conception des SoC et introduit des compromis
dans la conception du système.

### Consommation d'énergie

La plupart des SoC doivent utiliser une faible puissance. Les systèmes SoC nécessitent souvent une
longue durée de vie de la batterie (comme les smartphones), peuvent potentiellement passer des mois
ou des années sans être alimentés (capteurs autonomes).

De plus, la chaleur perdue provenant d'une consommation d'énergie élevée peut endommager d'autres
composants du circuit. La puissance dissipée par un composant est donnée par la formule de l'effet Joule:

$$
P = UI = \frac{U^{2}}{R} = R I ^ {2}
$$

Les SoC sont souvent intégrés dans des appareils portables tels que les smartphones, les appareils
de navigation GPS, les montres numériques (y compris les smartwatches) et les netbooks. Les clients
souhaitent une longue durée de vie de la batterie pour les appareils informatiques mobiles, une
autre raison pour laquelle la consommation d'énergie doit être minimisée dans les SoC.


![Puissance consommée par les raspberry Pi](../../images/2019-06-21-15_44_14-Window.png)[Raspberry Pi benchmarks sur MagPi.raspberrypi.org](https://magpi.raspberrypi.org/articles/raspberry-pi-specs-benchmarks){.cite-source}

### Performance par watt

Les SoC sont optimisés pour maximiser l'efficacité énergétique en termes de performances par watt:
maximisez les performances du SoC compte tenu d'un budget d'utilisation de l'énergie. De nombreuses
applications telles que l'informatique périphérique, le traitement distribué et l'intelligence
ambiante nécessitent un certain niveau de performances de calcul, mais la puissance est limitée
dans la plupart des environnements SoC.

L'architecture ARM a de meilleures performances par watt
que x86 dans les systèmes embarqués, elle est donc préférée à x86 pour la plupart des applications
SoC nécessitant un processeur intégré.

+-----------------------------------------------------------------------------------+-----------------------------------------------------------------------------------+
|                                 Performances CPU                                  |                                 Performances RAM                                  |
+===================================================================================+===================================================================================+
| ![Performances CPU des raspberry Pi](../../images/2019-06-21-15_40_11-Window.png) | ![Performances RAM des raspberry Pi](../../images/2019-06-21-15_43_09-Window.png) |
+-----------------------------------------------------------------------------------+-----------------------------------------------------------------------------------+
[Raspberry Pi benchmarks sur MagPi.raspberrypi.org](https://magpi.raspberrypi.org/articles/raspberry-pi-specs-benchmarks){.cite-source}

### Chaleur perdue

Les conceptions SoC sont optimisées pour minimiser la production de chaleur perdue sur la puce.
Comme pour les autres circuits intégrés, la chaleur générée en raison de la forte densité de
puissance est le goulot d'étranglement pour une miniaturisation accrue des composants. Trop de
chaleur perdue peut endommager les circuits et éroder la fiabilité du circuit au fil du temps. Les
températures élevées et les contraintes thermiques ont un impact négatif sur la fiabilité, la
diminution du temps moyen entre les pannes.

En particulier, la plupart des SoC se trouvent dans une petite zone physique ou un petit volume et,
par conséquent, les effets de la chaleur perdue sont aggravés car il y a peu de place pour qu'elle
se diffuse hors du système.

![Image thermique du raspberry pi 4](../../images/raspberrypi4-rpi4bthermal-redux.jpg)

[Raspberry Pi benchmarks sur MagPi.raspberrypi.org](https://magpi.raspberrypi.org/articles/raspberry-pi-specs-benchmarks){.cite-source}

Ces effets thermiques obligent SoC et d'autres concepteurs de puces à appliquer des marges de
conception conservatrices, créant des dispositifs moins performants pour atténuer le risque de
défaillance catastrophique. En raison de l'augmentation de la densité des transistors à mesure que
les échelles de longueur diminuent, chaque génération de processus produit plus de chaleur que la
précédente. Pour aggraver ce problème, les architectures SoC sont généralement hétérogènes, créant
des flux de chaleur spatialement inhomogènes, qui ne peuvent pas être efficacement atténués par un
refroidissement passif uniforme.

### Latence

Les SoC sont optimisés pour minimiser la latence pour tout ou partie de leurs fonctions. Cela peut
être accompli en disposant des éléments avec une proximité et une localisation appropriées les uns
aux autres pour minimiser les retards d'interconnexion et maximiser la vitesse à laquelle les
données sont communiquées entre les modules, les unités fonctionnelles et les mémoires.

Pour les tâches exécutées sur des cœurs de processeur, la latence et le débit peuvent être
améliorés avec la planification des tâches. Cependant, certaines tâches s'exécutent dans des unités
matérielles spécifiques à l'application, et même la planification des tâches peut ne pas être
suffisante pour optimiser toutes les tâches logicielles afin de respecter les contraintes de temps
et de débit.

[Article Wikipedia anglais SoC](https://en.wikipedia.org/wiki/System_on_a_chip#Design_flow{.cite-source} -->
</div>



 ]]></description>
  <category>TNSI</category>
  <guid>https://www.lyceum.fr/2023-2024/tg/nsi/3-architectures-materielles-systemes-dexploitation-et-reseaux/1-systeme-sur-puce/</guid>
  <pubDate>Thu, 16 May 2024 13:21:00 GMT</pubDate>
</item>
<item>
  <title>Chapitre 2: Gestion des processus par un système d’exploitation</title>
  <link>https://www.lyceum.fr/2023-2024/tg/nsi/3-architectures-materielles-systemes-dexploitation-et-reseaux/2-gestion-des-processus-par-un-systeme-dexploitation/</link>
  <description><![CDATA[ 




<div class="programme">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Programme
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="programme">
<table class="table table-bordered table-hover">
<thead class="table-warning">
<tr class="header">
<th>Contenus</th>
<th>Capacités attendues</th>
<th>Commentaires</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Gestion des processus et des ressources par un système d’exploitation.</td>
<td><p>Décrire la création d’un processus, l’ordonnancement de plusieurs processus par le système.</p>
<p>Mettre en évidence le risque de l’interblocage (deadlock).</p></td>
<td>À l’aide d’outils standard, il s’agit d’observer les processus actifs ou en attente sur une machine. Une présentation débranchée de l’interblocage peut être proposée.</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</div>
<blockquote class="blockquote">
<p>Comme nous l’avons vu en première, le <a href="../../../../1g/nsi/6-architectures-materielles-et-systemes-dexploitation/3-systemes-dexploitation/">système d’exploitation</a>(Linux, Windows, MacOs…) est un programme particulier situé entre le matériel et les applications qui a pour de rôle de coordonner l’ensemble des tâches qui sont exécutées par l’ordinateur. Cette année, nous allons voir comment le système d’exploitation charge les programmes dans la mémoire de masse et lance leur <em>exécution</em> en leur créant des <strong>processus</strong> afin de pouvoir les gérer lors de leur exécution.</p>
</blockquote>
<section id="différence-entre-programme-et-processus" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="différence-entre-programme-et-processus"><span class="header-section-number">1</span> Différence entre programme et processus</h2>
<dl>
<dt>
Programme
</dt>
<dd>
<div>
<p>Un <strong>programme est statique</strong>: c’est un fichier contenant une suite d’instructions qui lorsqu’elles sont exécutées modifient l’état du processeur et de la mémoire afin de réaliser une tâche donnée.</p>
</div>
</dd>
</dl>
<p>Un même programme peut-être exécuté <em>plusieurs fois</em> sur une même machine, il faut alors allouer à chacune de ces exécutions des ressources de mémoire et de processeur distinctes au cours de ces exécutions. C’est le système d’exploitation qui gère l’allocation de ces ressources.</p>
<dl>
<dt>
Processus
</dt>
<dd>
<div>
<p>Un <strong>processus est dynamique</strong>: c’est une instance d’exécution d’un programme sur une machine de son lancement jusqu’à sa fin.</p>
</div>
</dd>
</dl>
<p>Les systèmes d’exploitation permettent à l’utilisateur de visualiser et gérer les processus grâce à un <strong>gestionnaire de processus</strong>.</p>
<div class="appli">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Application: Programmes et processus sous linux
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="appli" data-titre="Programmes et processus sous linux">
<!-- TODO personnaliser image docker de binder -->
<p>Si vous êtes sous linux ou OSX, vous pouvez simplement lancer un terminal pour ouvrir une console. Sinon vous pouvez lancer une instance jupyterlab en ligne grâce à Binder.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://mybinder.org/v2/gh/binder-examples/jupyterlab/master?urlpath=lab/tree/index.ipynb"><picture>
			  <source type="image/webp" srcset="/img/uHoQlpMV1Y-109.webp 109w, /img/uHoQlpMV1Y-300.webp 300w, /img/uHoQlpMV1Y-109.svg 109w" sizes="100vw">
  <source type="image/svg+xml" srcset="/img/uHoQlpMV1Y-109.svg 109w" sizes="100vw">
				<img class="img-fluid figure-img" src="https://www.lyceum.fr/2023-2024/img/uHoQlpMV1Y-109.webp" width="109" height="20" alt="Binder" loading="lazy" decoding="async">
			</picture>
</a></p>
<figcaption>Binder</figcaption>
</figure>
</div>
<p>Sous linux, les programmes sont par <a href="https://fr.wikipedia.org/wiki/Filesystem_Hierarchy_Standard">convention</a> situées dans les dossiers <code>bin</code> pour binaries en anglais:</p>
<ul>
<li><code>/bin/</code>: commandes de base nécessaires au démarrage et à l’utilisation d’un système minimaliste.</li>
<li><code>/sbin/</code>: Exécutables pour les administrateurs (abréviation de system binaries, soit binaires système en français).</li>
<li><code>/usr/bin/</code>: Binaires exécutables qui ne sont pas déjà présents dans <code>/bin</code> et donc pas indispensables à un système minimaliste.</li>
</ul>
<p>On peut <strong>lister les programmes</strong> avec la commande <code>ls</code> et les exécuter en tapant leur nom dans une console.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># la commande ls vue en première (abbréviation de list en anglais)</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span> /bin</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span> /sbin</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span> /usr/bin</span></code></pre></div>
<p>Vous pouvez <strong>afficher un programme</strong> en particulier grâce à la commande <code>cat</code>.</p>
<p><code>cat /bin/ls</code></p>
<p>Comme vous le voyez c’est un fichier binaire car ce programme a été compilé pour s’exécuter plus rapidement.</p>
<p>Vous pouvez <strong>lancer un programme</strong> en particulier en écrivant son <code>nom</code> (sans préciser son chemin s’il appartient au <code>PATH</code>).</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># affichage sortie</span></span>
<span id="cb2-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Voulez-vous continuer"</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># lecture entrée</span></span>
<span id="cb2-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">read</span> </span></code></pre></div>
<p>Maintenant si vous voulez <strong>lister les processus</strong> en cours d’exécution on utilise la commande <code>ps</code>.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource shell number-lines code-with-copy"><code class="sourceCode"><span id="cb3-1"># affiche mes processus en exécution</span>
<span id="cb3-2">ps</span>
<span id="cb3-3"># affiche tous les processus</span>
<span id="cb3-4">ps -A</span>
<span id="cb3-5"># affiche une aide simple</span>
<span id="cb3-6">ps --help s</span></code></pre></div>
<p>Voici un exemple de sortie avec l’option <code>-l</code> pour obtenir plus détails:</p>
<pre><code>jovyan@jupyter-jupyterlab-2djupyterlab-2ddemo-2dgmyobfo6:~$ ps -lA
F S   UID     PID    PPID  C PRI  NI ADDR SZ WCHAN  TTY          TIME CMD
4 S  1000       1       0  0  80   0 - 137942 epoll_ ?       00:00:45 jupyter-noteboo
0 Z  1000    2293       1  0  80   0 -     0 -      ?        00:00:00 dash &lt;defunct&gt;
4 S  1000    4031       1  0  80   0 -  5116 wait   pts/0    00:00:00 bash
4 S  1000    4900    4031  0  80   0 -  5083 select pts/0    00:00:00 bash
4 S  1000    5105       1  0  80   0 -  5116 wait   pts/1    00:00:00 bash
0 R  1000    5984    5105  0  80   0 -  6910 -      pts/1    00:00:00 ps</code></pre>
<p>On peut créer des affichages particuliers par exemple pour voir quels processus sont les plus gourmands en mémoire: <code>ps -eo pid,ppid,cmd,%mem,%cpu --sort=-%mem | head</code></p>
<pre><code>PID    PPID CMD                         %MEM %CPU
  1       0 /srv/conda/envs/notebook/bi  0.1 17.0
122       1 /srv/conda/envs/notebook/bi  0.0  4.6
 84       1 /bin/bash -l                 0.0  1.7
137      84 ps -eo pid,ppid,cmd,%mem,%c  0.0  0.0
138      84 head                         0.0  0.0</code></pre>
<p>Enfin on peut <strong>tuer un processus</strong> avec la commande <code>kill</code>.</p>
<pre><code># tuer avec le PID processus id
kill 122
# tuer par le nom du programme ATTENTION cela tue votre instance binder
# pkill jupyter </code></pre>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="les-états-dun-processus" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="les-états-dun-processus"><span class="header-section-number">2</span> Les états d’un processus</h2>
<p>Un processus n’a pas seulement besoin d’accéder au processeur, mais il a souvent besoin d’accéder à des <em>ressources</em> autres comme:</p>
<ul>
<li>La mémoire vive: RAM,</li>
<li>La mémoire de masse: disques durs, clés USB, mémoire flash…</li>
<li>La lecture ou l’écriture d’un fichier…</li>
<li>Les périphériques d’entrée et de sortie: clavier, souris, écran, imprimante…</li>
</ul>
<p>Ces <em>ressources</em> externes étant beaucoup moins rapides que le processeur, elles <strong>bloquent</strong> les processus lors de leur exécution.</p>
<p>Ainsi, lors de la vie d’un processus, celui-ci peut passer par trois états:</p>
<ul>
<li><strong>PRÊT</strong>: le processus est lancé et <em>attend l’accès au processeur</em>.</li>
<li><strong>ÉLU</strong>: le processus a obtenu l’accès au processeur: il peut s’exécuter.</li>
<li><strong>BLOQUÉ</strong>: le processus est en cours d’exécution, mais <em>attend une ressource</em> en mémoire par exemple, il quitte le processeur pour libérer les ressources.</li>
</ul>
<p></p><figure class="wikimage figure"><picture>
			  <source type="image/webp" srcset="/img/lX9az-L_8S-300.webp 300w, /img/lX9az-L_8S-600.webp 600w" sizes="100vw">
  <source type="image/png" srcset="/img/lX9az-L_8S-300.png 300w, /img/lX9az-L_8S-600.png 600w" sizes="100vw">
				<img class="img-fluid figure-img" src="https://www.lyceum.fr/2023-2024/img/lX9az-L_8S-300.webp" width="600" height="646" alt="Les trois états d'un processus, et le passage d'un état à un autre." loading="lazy" decoding="async">
			</picture>
<figcaption id="caption">Les trois états d'un processus, et le passage d'un état à un autre.</figcaption><figcaption id="credit">&nbsp;Public domain&nbsp;<a id="image-description" href="//commons.wikimedia.org/wiki/File:Diagrammedétatdunprocessus_1.png">via Wikimedia Commons</a></figcaption></figure><p></p>
</section>
<section id="ordonnancement" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="ordonnancement"><span class="header-section-number">3</span> Ordonnancement</h2>
<p>À un instant donné, il y a souvent davantage de processus à exécuter que de processeurs.</p>
<p>Lors de leur lacement les processus sont placés dans une <a href="../../../../tg/nsi/1-structures-de-donnees/3-structures-lineaires-piles-files">file</a> d’attente.</p>
<p>L’ordonnanceur désigne le composant du noyau du système d’exploitation choisissant l’ordre d’exécution des processus sur les processeurs d’un ordinateur.</p>
<p>Il existe divers algorithmes d’ordonnancement:</p>
<ul>
<li><strong>La méthode du tourniquet</strong> (<em>Round Robin</em>): l’ordonnanceur traite la file d’attente comme une file circulaire et alloue successivement un temps processeur à chacun des processus de la file.</li>
<li><strong>FIFO</strong>: First In First Out (voir le <a href="../../../../tg/nsi/1-structures-de-donnees/3-structures-lineaires-piles-files">cours sur les files</a>)</li>
<li><strong>SJF</strong> Shortest job first (SJF, ou SJN -Shortest Job Next-).</li>
<li>…</li>
</ul>
<p><a href="https://fr.wikipedia.org/wiki/Ordonnancement_dans_les_systèmes_d'exploitation" class="cite-source">Article Wikipédia sur l’ordonnancement</a></p>
</section>
<section id="interblocage" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="interblocage"><span class="header-section-number">4</span> Interblocage</h2>
<dl>
<dt>
interblocage
</dt>
<dd>
<div>
<p>Un interblocage (ou étreinte fatale, <em>deadlock</em> en anglais pour impasse) est un phénomène qui peut se produire en programmation concurrente lorsque des processus s’attendent mutuellement.</p>
</div>
</dd>
</dl>
<div class="example">
<p>Un exemple concret d’interblocage peut se produire lorsque deux processus essayent d’acquérir deux ressources dans un ordre différent.</p>
<p><a href="https://commons.wikimedia.org/wiki/File:Process_deadlock.svg#/media/File:Process_deadlock.svg"> <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/2/28/Process_deadlock.svg/1200px-Process_deadlock.svg.png" alt="Process deadlock.svg"></a></p>
<ul>
<li>P1 acquiert R1.</li>
<li>P2 acquiert R2.</li>
<li>P1 attend pour acquérir R2 (qui est détenu par P2).</li>
<li>P2 attend pour acquérir R1 (qui est détenu par P1).</li>
</ul>
<p>Dans cette situation, les deux processus sont définitivement bloqués.</p>
</div>
<div class="example">
<p>Deux processus en concurrence pour deux ressources dans un ordre opposé.</p>
<p>
<a href="https://commons.wikimedia.org/wiki/File:Two_processes,_two_resources.gif#/media/File:Two_processes,_two_resources.gif"><img src="https://upload.wikimedia.org/wikipedia/commons/d/df/Two_processes%2C_two_resources.gif" alt="Two processes, two resources.gif"></a><br>By <a href="//commons.wikimedia.org/w/index.php?title=User:Abacoo&amp;amp;action=edit&amp;amp;redlink=1" class="new" title="User:Abacoo (page does not exist)">Abacoo</a> - <span class="int-own-work" lang="en">Own work</span>, <a href="https://creativecommons.org/licenses/by-sa/4.0" title="Creative Commons Attribution-Share Alike 4.0">CC BY-SA 4.0</a>, <a href="https://commons.wikimedia.org/w/index.php?curid=47971211">Link</a>
</p>
<ul>
<li><strong>A</strong> Un seul processus se déroule.</li>
<li><strong>B</strong> Le processus ultérieur doit attendre.</li>
<li><strong>C</strong> Un blocage se produit lorsque le premier processus verrouille la première ressource en même temps que le second processus verrouille la seconde ressource.</li>
<li><strong>D</strong> Le blocage peut être résolu en annulant et en redémarrant le premier processus.</li>
</ul>
</div>
<p>Il existe plusieurs façons de gérer les interblocages:</p>
<ul>
<li>les <em>ignorer</em> ce qui était fait initialement par UNIX qui supposait que la fréquence des interblocages était faible et que la perte de données encourue à chaque fois est tolérable.</li>
<li>les <em>détecter</em>: Un algorithme est utilisé pour suivre l’allocation des ressources et les états des processus, il annule et redémarre un ou plusieurs processus afin de supprimer le blocage détecté</li>
<li>les <em>éviter</em>: des <a href="https://en.wikipedia.org/wiki/Deadlock_prevention_algorithms">algorithmes</a> sont utilisés pour supprimer une des quatre conditions nécessaires à la possibilité de l’interblocage(<a href="https://fr.wikipedia.org/wiki/Interblocage#Conditions_n%C3%A9cessaires">Conditions de Coffman</a>)</li>
</ul>
<div class="plus">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
En plus: Conditions de Coffman
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="plus" data-titre="Conditions de Coffman">
<p>Coffman a prouvé en 1971 qu’il y a quatre conditions nécessaires pour qu’un blocage puisse avoir lieu.</p>
<p>Voir l’article Wikipédia <a href="https://fr.wikipedia.org/wiki/Interblocage#Conditions_n%C3%A9cessaires">Conditions de Coffman</a> pour plus de détails.</p>
</div>
</div>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>TNSI</category>
  <guid>https://www.lyceum.fr/2023-2024/tg/nsi/3-architectures-materielles-systemes-dexploitation-et-reseaux/2-gestion-des-processus-par-un-systeme-dexploitation/</guid>
  <pubDate>Thu, 16 May 2024 13:21:00 GMT</pubDate>
</item>
<item>
  <title>Chapitre 3: Protocoles de routage</title>
  <link>https://www.lyceum.fr/2023-2024/tg/nsi/3-architectures-materielles-systemes-dexploitation-et-reseaux/3-protocoles-de-routage/</link>
  <description><![CDATA[ 




<div class="programme">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Programme
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="programme">
<table class="table table-bordered table-hover">
<thead class="table-warning">
<tr class="header">
<th>Contenus</th>
<th>Capacités attendues</th>
<th>Commentaires</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Protocoles de routage.</td>
<td>Identifier, suivant le protocole de routage utilisé, la route empruntée par un paquet.</td>
<td><p>En mode débranché, les tables de routage étant données, on se réfère au nombre de sauts (protocole RIP) ou au coût des routes (protocole OSPF).</p>
<p>Le lien avec les algorithmes de recherche de chemin sur un graphe est mis en évidence.</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</div>
<blockquote class="blockquote">
<p>Dans ce chapitre, nous poursuivons l’étude des réseaux entamée en seconde et en première par l’étude des <strong>protocoles de routage</strong>. Nous allons voir comment l’information trouve un chemin à l’intérieur d’internet.</p>
</blockquote>
<p>On commence par une vidéo qui rappelle le vocabulaire essentiel des réseaux:</p>
<ul>
<li>Commutateur ou <em>switch</em> en anglais.</li>
<li>Réseau local (<em>LAN</em>)</li>
<li>Routeur</li>
<li>Internet (<em>WAN</em>)</li>
</ul>
<p></p><div class="yt-embend"><div><iframe width="560" height="315" src="https://yewtu.be/embed/JqweQE6TDTc" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe><p><a href="https://www.youtube.com/watch?v=JqweQE6TDTc">Vidéo</a> servie sans cookie via <a href="https://yewtu.be/">yewtu.be</a></p></div></div><p></p>
<p><a href="https://www.youtube.com/channel/UCKpQL4XedlNqInF6AORB90Q" class="cite-source">Mr.Techno via youtube sous licence CC-BY</a></p>
<div class="appli">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Application
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="appli">
<p>Définir les termes cités ci-dessus.</p>
</div>
</div>
</div>
</div>
</div>
<section id="comment-se-frayer-un-chemin-à-travers-le-réseau" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="comment-se-frayer-un-chemin-à-travers-le-réseau"><span class="header-section-number">1</span> Comment se «frayer» un chemin à travers le réseau ?</h2>
<p>Avant d’aborder dans le détail les techniques et algorithmes utilisés, nous allons commencer par étudier un exemple pour comprendre ce qui se passe.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><picture>
			  <source type="image/webp" srcset="/img/E0vFqb60FN-300.webp 300w, /img/E0vFqb60FN-600.webp 600w, /img/E0vFqb60FN-921.webp 921w" sizes="100vw">
  <source type="image/png" srcset="/img/E0vFqb60FN-300.png 300w, /img/E0vFqb60FN-600.png 600w, /img/E0vFqb60FN-921.png 921w" sizes="100vw">
				<img class="img-fluid figure-img" src="https://www.lyceum.fr/2023-2024/img/E0vFqb60FN-300.webp" width="921" height="717" alt="" loading="lazy" decoding="async">
			</picture>
</p>
<figcaption>Diagramme d’un réseau</figcaption>
</figure>
</div>
<p><a href="https://pixees.fr/informatiquelycee/n_site/nsi_term_archi_routage.html" class="cite-source">David Roche via pixees.fr CC-BY-SA</a></p>
<div class="appli">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Application
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="appli">
<ol type="1">
<li>Combien y a-t-il de réseaux locaux?</li>
<li>Quel chemin sur le réseau doit parcourir l’information pour relier deux machines d’un même réseau local comme M13 -&gt; M15?</li>
<li>Montrer qu’il existe plusieurs chemins possibles pour communiquer entre deux machines appartenant à des réseaux locaux différents comme M1 -&gt; M9.</li>
</ol>
</div>
</div>
</div>
</div>
</div>
<p>Sur cet exemple on a pu montrer qu’il existe plusieurs chemins possibles pour relier deux machines appartenant à des réseaux locaux différents. Certains seront certainement plus efficaces que d’autres, mais n’étant jamais à l’abri de problèmes techniques sur certains routeurs ou certaines liaisons, l’existence de plusieurs routes rend le réseau internet plus résilient aux pannes.</p>
</section>
<section id="le-protocole-tcpip" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="le-protocole-tcpip"><span class="header-section-number">2</span> Le protocole TCP/IP</h2>
<p>On a vu en <a href="../../../../1g/nsi/6-architectures-materielles-et-systemes-dexploitation/4-reseaux">première</a> que la communication sur le réseau était basée sur le modèle TCP/IP à quatre couches.</p>
<p></p><figure class="wikimage figure"><picture>
			  <source type="image/webp" srcset="/img/6yqqAn5XNx-300.webp 300w, /img/6yqqAn5XNx-425.webp 425w" sizes="100vw">
  <source type="image/png" srcset="/img/6yqqAn5XNx-300.png 300w, /img/6yqqAn5XNx-425.png 425w" sizes="100vw">
				<img class="img-fluid figure-img" src="https://www.lyceum.fr/2023-2024/img/6yqqAn5XNx-300.webp" width="425" height="438" alt="Le modèle TCP/IP ne possède que quatre couches alors que le modèle OSI (Open System Interconnection) en a sept." loading="lazy" decoding="async">
			</picture>
<figcaption id="caption">Le modèle TCP/IP ne possède que quatre couches alors que le modèle OSI (Open System Interconnection) en a sept.</figcaption><figcaption id="credit">©&nbsp;&nbsp;CC BY-SA 3.0&nbsp;<a id="image-description" href="//commons.wikimedia.org/wiki/File:Comparaison_des_modèles_OSI_et_TCP_IP.png">via Wikimedia Commons</a></figcaption></figure><p></p>
<p>Dans ce protocole, on a vu en <a href="../../../../2gt/snt/2-internet">seconde</a>.</p>
<ul>
<li>Le protocole IP(COUCHE RÉSEAU) qui permet d’attribuer à chaque machine une adresse IP unique pour l’identifier sur le réseau.</li>
<li>Le protocole TCP(COUCHE TRANSPORT) qui permet d’assurer la communication de l’information en la découpant en paquets, et en s’assurant que tous les paquets sont reçus et conformes à l’information envoyée.</li>
</ul>
<p>On utilise deux versions d’adresses IP.</p>
<ul>
<li>IPv4: avec des adresses de 4 octets = 32 bits.</li>
<li>IPv6: avec des adresses de 16 octets = 128 bits.</li>
</ul>
<p></p><figure class="wikimage figure"><picture>
			  <source type="image/webp" srcset="/img/FQwaAgFbKN-300.webp 300w, /img/FQwaAgFbKN-600.webp 600w, /img/FQwaAgFbKN-750.svg 750w" sizes="100vw">
  <source type="image/svg+xml" srcset="/img/FQwaAgFbKN-750.svg 750w" sizes="100vw">
				<img class="img-fluid figure-img" src="https://www.lyceum.fr/2023-2024/img/FQwaAgFbKN-300.webp" width="750" height="450" alt="Avec 32 bits on ne peut avoir que 4 milliards d'adresses." loading="lazy" decoding="async">
			</picture>
<figcaption id="caption">Avec 32 bits on ne peut avoir que 4 milliards d'adresses.</figcaption><figcaption id="credit">&nbsp;Public domain&nbsp;<a id="image-description" href="//commons.wikimedia.org/wiki/File:Adresse_Ipv4.svg">via Wikimedia Commons</a></figcaption></figure><p></p>
<p></p><figure class="wikimage figure"><picture>
			  <source type="image/webp" srcset="/img/APz7XaLqav-300.webp 300w, /img/APz7XaLqav-750.svg 750w" sizes="100vw">
  <source type="image/svg+xml" srcset="/img/APz7XaLqav-750.svg 750w" sizes="100vw">
				<img class="img-fluid figure-img" src="https://www.lyceum.fr/2023-2024/img/APz7XaLqav-300.webp" width="750" height="450" alt="Avec 128 bits on passe à 340 sextillons d'adresses, ça devrait suffir pour quelques temps!" loading="lazy" decoding="async">
			</picture>
<figcaption id="caption">Avec 128 bits on passe à 340 sextillons d'adresses, ça devrait suffir pour quelques temps!</figcaption><figcaption id="credit">&nbsp;CC0&nbsp;<a id="image-description" href="//commons.wikimedia.org/wiki/File:Ipv6_address-fr.svg">via Wikimedia Commons</a></figcaption></figure><p></p>
</section>
<section id="les-tables-de-routage" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="les-tables-de-routage"><span class="header-section-number">3</span> Les tables de routage</h2>
<p>Lorsqu’un routeur reçoit un paquet celui-ci comporte une adresse IP de destination. Pour savoir dans quelle direction envoyer le paquet, chaque routeur possède une <em>table de routage</em>.</p>
<p>Une table de routage est un tableau indiquant pour chaque réseau de destination(connu à partir de l’IP de la destination), quelle interface réseau on peut utiliser en lui associant également une métrique qui mesure la «distance» séparant le routeur du réseau de destination.</p>
<div class="plus">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
En plus: Afficher une table de routage
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="plus" data-titre="Afficher une table de routage">
<ul>
<li>Sous Windows : <code>route print</code> ou <code>netsh int ipv4/ipv6 sh route</code></li>
<li>Sous Unix/OS X : <code>netstat -rn</code></li>
<li>Sous Linux : <code>ip -4/-6 route</code></li>
</ul>
<table class="table table-bordered table-hover">
<thead class="table-warning">
<tr class="header">
<th>Réseau destination (format CIDR)</th>
<th>Masque</th>
<th>Passerelle</th>
<th>Interface</th>
<th>Métrique</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0.0.0.0/0</td>
<td>0.0.0.0</td>
<td>192.168.0.1</td>
<td>192.168.0.100</td>
<td>1</td>
</tr>
<tr class="even">
<td>127.0.0.0/8</td>
<td>255.0.0.0</td>
<td>127.0.0.1</td>
<td>127.0.0.1</td>
<td>1</td>
</tr>
<tr class="odd">
<td>192.168.0.0/24</td>
<td>255.255.255.0</td>
<td>192.168.0.100</td>
<td>192.168.0.100</td>
<td>1</td>
</tr>
<tr class="even">
<td>192.168.0.100/32</td>
<td>255.255.255.255</td>
<td>127.0.0.1</td>
<td>127.0.0.1</td>
<td>1</td>
</tr>
<tr class="odd">
<td>192.168.0.1/32</td>
<td>255.255.255.255</td>
<td>192.168.0.100</td>
<td>192.168.0.100</td>
<td>1</td>
</tr>
</tbody>
</table>
<p><a href="https://fr.wikipedia.org/wiki/Table_de_routage" class="cite-source">Article Wikipédia sur les tables de routage</a></p>
</div>
</div>
</div>
</div>
</div>
<p>Encore une fois, nous allons utiliser un exemple pour illustrer cette notion.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><picture>
			  <source type="image/webp" srcset="/img/3h7l3N3rBz-300.webp 300w, /img/3h7l3N3rBz-600.webp 600w, /img/3h7l3N3rBz-656.webp 656w" sizes="100vw">
  <source type="image/png" srcset="/img/3h7l3N3rBz-300.png 300w, /img/3h7l3N3rBz-600.png 600w, /img/3h7l3N3rBz-656.png 656w" sizes="100vw">
				<img class="img-fluid figure-img" src="https://www.lyceum.fr/2023-2024/img/3h7l3N3rBz-300.webp" width="656" height="424" alt="" loading="lazy" decoding="async">
			</picture>
</p>
<figcaption>Diagramme d’un réseau</figcaption>
</figure>
</div>
<p><a href="https://pixees.fr/informatiquelycee/n_site/nsi_term_archi_routage.html" class="cite-source">David Roche via pixees.fr CC-BY-SA</a></p>
<p>Ce réseau contient:</p>
<ul>
<li><p><strong>Trois réseaux locaux</strong>:</p>
<ul>
<li><strong>R1</strong> dont l’adresse est <code>172.168.0.0/16</code> avec trois machines M1 à M3.</li>
<li><strong>R2</strong> dont l’adresse est <code>10.0.0.0/8</code> avec trois machines M4 à M6.</li>
<li><strong>R3</strong> dont l’adresse est <code>172.169.0.0/16</code> avec deux machines M7 et M8.</li>
</ul></li>
<li><p><strong>Deux routeurs</strong>:</p>
<ul>
<li><strong>Routeur A</strong> qui possède 3 interfaces réseau que l’on nomme eth0, eth1 et eth2. Les adresses IP liées à ces interfaces réseau sont : 172.168.255.254/16 (eth0), 172.169.255.254/16 (eth2) et 192.168.7.1/24 (eth1).</li>
<li><strong>Routeur G</strong> qui possède 2 interfaces réseau que l’on nomme eth0 et eth1. Les adresses IP liées à ces interfaces réseau sont : 10.255.255.254/8 (eth0) et 192.168.7.2/24 (eth1).</li>
</ul></li>
</ul>
<p>Voici la table de routage simplifiée du routeur A:</p>
<table class="table table-bordered table-hover">
<tbody>
<tr class="odd">
<td><pre><code>Réseau</code></pre></td>
<td>Moyen de l’atteindre(Passerelle ou _Gateway)</td>
<td>Métrique</td>
</tr>
<tr class="even">
<td>172.168.0.0/16</td>
<td>eth0</td>
<td>0</td>
</tr>
<tr class="odd">
<td>192.168.7.2/24</td>
<td>eth1</td>
<td>0</td>
</tr>
<tr class="even">
<td>172.169.0.0/16</td>
<td>eth2</td>
<td>0</td>
</tr>
<tr class="odd">
<td>10.0.0.0/8</td>
<td>192.168.7.2/24</td>
<td>1</td>
</tr>
</tbody>
</table>
<div class="appli">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Application
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="appli">
<p>Établir la table de routage du routeur G.</p>
</div>
</div>
</div>
</div>
</div>
<blockquote class="blockquote">
<p>Comment un routeur arrive à remplir sa table de routage ? &nbsp; La réponse est simple pour les réseaux qui sont directement reliés au routeur (métrique = 0), mais comment cela se passe-t-il pour les autres réseaux (métrique supérieure à zéro) ? &nbsp; Il existe 2 méthodes : &nbsp; - le <strong>routage statique</strong> : chaque ligne doit être renseignée “à la main”. Cette solution est seulement envisageable pour des très petits réseaux de réseaux - le <strong>routage dynamique</strong> : tout se fait “automatiquement”, on utilise des protocoles qui vont permettre de “découvrir” les différentes routes automatiquement afin de pouvoir remplir la table de routage tout aussi automatiquement.</p>
</blockquote>
<p><a href="https://pixees.fr/informatiquelycee/n_site/nsi_term_archi_routage.html" class="cite-source">David Roche via pixees.fr CC-BY-SA</a></p>
</section>
<section id="les-protocoles-de-routage" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="les-protocoles-de-routage"><span class="header-section-number">4</span> Les protocoles de routage</h2>
<p>Nous allons étudier deux algorithmes de routage:</p>
<ul>
<li>RIP (<em>Routing Information Protocol</em>)</li>
<li>et OSPF (<em>Open Shortest Path First</em>).</li>
</ul>
<p>Voici le réseau sur lequel nous allons illustrer ces algorithmes.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><picture>
			  <source type="image/webp" srcset="/img/mA_iKGvcSu-300.webp 300w, /img/mA_iKGvcSu-600.webp 600w, /img/mA_iKGvcSu-791.webp 791w" sizes="100vw">
  <source type="image/png" srcset="/img/mA_iKGvcSu-300.png 300w, /img/mA_iKGvcSu-600.png 600w, /img/mA_iKGvcSu-791.png 791w" sizes="100vw">
				<img class="img-fluid figure-img" src="https://www.lyceum.fr/2023-2024/img/mA_iKGvcSu-300.webp" width="791" height="398" alt="" loading="lazy" decoding="async">
			</picture>
</p>
<figcaption>Exemple de réseau</figcaption>
</figure>
</div>
<p><a href="https://pixees.fr/informatiquelycee/n_site/nsi_term_archi_routage.html" class="cite-source">David Roche via pixees.fr CC-BY-SA</a></p>
<section id="le-protocole-rip" class="level3" data-number="4.1">
<h3 data-number="4.1" class="anchored" data-anchor-id="le-protocole-rip"><span class="header-section-number">4.1</span> Le protocole <em>RIP</em></h3>
<p>C’était le premier protocole utilisé, il associe à chaque le nombre de sauts minimal, c’est-à-dire le nombre minimal de routeurs à traverser.</p>
<p></p><figure class="wikimage figure"><picture>
			  <source type="image/webp" srcset="/img/tTooPw03gg-300.webp 300w, /img/tTooPw03gg-600.webp 600w, /img/tTooPw03gg-972.webp 972w" sizes="100vw">
  <source type="image/png" srcset="/img/tTooPw03gg-300.png 300w, /img/tTooPw03gg-600.png 600w, /img/tTooPw03gg-972.png 972w" sizes="100vw">
				<img class="img-fluid figure-img" src="https://www.lyceum.fr/2023-2024/img/tTooPw03gg-300.webp" width="972" height="269" alt="En supposant un nombre de sauts d'origine 0. Le nombre de sauts entre les ordinateurs dans ce cas est de 2." loading="lazy" decoding="async">
			</picture>
<figcaption id="caption">En supposant un nombre de sauts d'origine 0. Le nombre de sauts entre les ordinateurs dans ce cas est de 2.</figcaption><figcaption id="credit">©&nbsp;&nbsp;CC BY-SA 3.0&nbsp;<a id="image-description" href="//commons.wikimedia.org/wiki/File:Hop-count-trans.png">via Wikimedia Commons</a></figcaption></figure><p></p>
<p>Au départ chaque routeur ne connait que les réseaux directement accessibles, avec une distance nulle.</p>
<p>Ensuite, toutes les 30 secondes, les réseaux envoient leurs tables de routages à <strong>leurs voisins directement accessibles</strong>, à la réception chaque routeur met à jour sa table de routage en associant à chaque destination la passerelle avec la plus courte distance en saut.</p>
<div class="appli">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Application
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="appli">
<ol type="1">
<li><p>En vous basant sur le protocole <em>RIP</em> (métrique = nombre de sauts), déterminez la table de routage du routeur A</p></li>
<li><p>Quel est, d’après la table de routage construite ci-dessus, le chemin qui sera emprunté par un paquet pour aller d’une machine ayant pour adresse IP 172.18.1.1/16 à une machine ayant pour adresse IP 172.16.5.3/16 ?</p></li>
</ol>
</div>
</div>
</div>
</div>
</div>
<p>Ce protocole n’est plus utilisé, car sur de grands réseaux il provoque un trafic important, et de plus il possède des failles de sécurité rendant ces réseaux vulnérables à certaines attaques.</p>
</section>
<section id="le-protocole-ospf" class="level3" data-number="4.2">
<h3 data-number="4.2" class="anchored" data-anchor-id="le-protocole-ospf"><span class="header-section-number">4.2</span> Le protocole <em>OSPF</em></h3>
<p>Dans le protocole <em>OSPF</em>, <em>les routeurs ont une vision globale du réseau</em> et pas seulement de leurs voisins directs.</p>
<p>De plus, la <em>métrique</em> utilisée n’est plus le nombre de sauts, mais le coût de la liaison. Celui-ci tient compte du <strong>débit binaire de chaque liaison en bits par seconde</strong>.</p>
<p>On définit le coût par l’expression:</p>
<p><math display="block" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>o</mi><mi>û</mi><mi>t</mi><mo>=</mo><mfrac><msup><mn>10</mn><mn>8</mn></msup><mrow><mi>d</mi><mi>é</mi><mi>b</mi><mi>i</mi><mi>t</mi><mspace width="0.222em"></mspace><mi>e</mi><mi>n</mi><mspace width="0.222em"></mspace><mi>M</mi><mi>b</mi><mi>i</mi><mi>t</mi><mi>/</mi><mi>s</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">
coût  = \frac{10^8}{débit\ en\ Mbit/s}
</annotation></semantics></math></p>
<p>On peut représenter le réseau par un graphe dans laquelle les routeurs et les switchs sont des <em>noeuds</em> et les liaisons des arêtes étiquetées avec des coûts.</p>
<p>On applique alors l’<a href="https://fr.wikipedia.org/wiki/Algorithme_de_Dijkstra">algorithme de Djikistra</a> pour trouver le plus court chemin.</p>
<p></p><figure class="wikimage figure"><picture>
			  <source type="image/webp" srcset="/img/WLCATgRQyQ-283.webp 283w" sizes="100vw">
  <source type="image/gif" srcset="/img/WLCATgRQyQ-283.gif 283w" sizes="100vw">
				<img class="img-fluid figure-img" src="https://www.lyceum.fr/2023-2024/img/WLCATgRQyQ-283.webp" width="283" height="222" alt="L'algorithme de Dijkstra pour trouver le chemin le plus court entre a et b. Il choisit le sommet non visité avec la distance la plus faible, calcule la distance à travers lui à chaque voisin non visité, et met à jour la distance du voisin si elle est plus petite. Il marque le sommet visité (en rouge) lorsque il a terminé avec les voisins." loading="lazy" decoding="async">
			</picture>
<figcaption id="caption">L'algorithme de Dijkstra pour trouver le chemin le plus court entre a et b. Il choisit le sommet non visité avec la distance la plus faible, calcule la distance à travers lui à chaque voisin non visité, et met à jour la distance du voisin si elle est plus petite. Il marque le sommet visité (en rouge) lorsque il a terminé avec les voisins.</figcaption><figcaption id="credit">&nbsp;Public domain&nbsp;<a id="image-description" href="//commons.wikimedia.org/wiki/File:Dijkstra_Animation.gif">via Wikimedia Commons</a></figcaption></figure><p></p>
<div class="appli">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-7-contents" aria-controls="callout-7" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Application
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-7" class="callout-7-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="appli">
<ol type="1">
<li><p>En vous basant sur le protocole OSPF (métrique = somme des coûts), déterminez la table de routage du routeur A.</p>
<p>On donne les débits suivants :</p>
<ul>
<li>liaison routeur A - routeur B : 1 Mbps</li>
<li>liaison routeur A - routeur C : 10 Mbps</li>
<li>liaison routeur C - routeur B : 10 Mbps</li>
</ul></li>
<li><p>Quel est, d’après la table de routage construite ci-dessus, le chemin qui sera emprunté par un paquet pour aller d’une machine ayant pour adresse IP 172.18.1.1/16 à une machine ayant pour adresse IP 172.16.5.3/16 ?</p></li>
</ol>
</div>
</div>
</div>
</div>
</div>
<div class="ref">
<ul>
<li><a href="https://pixees.fr/informatiquelycee/n_site/nsi_term_archi_routage.html">Protocoles de routage sur pixees.fr</a></li>
</ul>
</div>


</section>
</section>

 ]]></description>
  <category>TNSI</category>
  <guid>https://www.lyceum.fr/2023-2024/tg/nsi/3-architectures-materielles-systemes-dexploitation-et-reseaux/3-protocoles-de-routage/</guid>
  <pubDate>Thu, 16 May 2024 13:21:00 GMT</pubDate>
</item>
<item>
  <title>Chapitre 4: Sécurisation des communications*</title>
  <link>https://www.lyceum.fr/2023-2024/tg/nsi/3-architectures-materielles-systemes-dexploitation-et-reseaux/4-securisation-des-communications/</link>
  <description><![CDATA[ 




<p><strong>Ce chapitre ne pourra pas faire l’objet d’une évaluation lors de l’épreuve terminale écrite et pratique de l’enseignement de spécialité.</strong> <a href="https://www.education.gouv.fr/bo/21/Hebdo30/MENE2121274N.htm" class="cite-source">BO MENE2121274N</a></p>
<div class="programme">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Programme
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="programme">
<table class="table table-bordered table-hover">
<thead class="table-warning">
<tr class="header">
<th>Contenus</th>
<th>Capacités attendues</th>
<th>Commentaires</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Sécurisation des communications.</td>
<td><p>Décrire les principes de chiffrement symétrique (clef partagée) et asymétrique (avec clef privée/clef publique).</p>
<p>Décrire l’échange d’une clef symétrique en utilisant un protocole asymétrique pour sécuriser une communication HTTPS.</p></td>
<td><p>Les protocoles symétriques et asymétriques peuvent être illustrés en mode débranché, éventuellement avec description d’un chiffrement particulier.</p>
<p>La négociation de la méthode chiffrement du protocole SSL (Secure Sockets Layer) n’est pas abordée.</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</div>
<p>&nbsp;</p>
<div class="intro">
<p></p><figure class="wikimage figure"><picture>
			  <source type="image/webp" srcset="/img/ikyL6mOz9_-300.webp 300w, /img/ikyL6mOz9_-600.webp 600w, /img/ikyL6mOz9_-1600.webp 1600w" sizes="100vw">
  <source type="image/jpeg" srcset="/img/ikyL6mOz9_-300.jpeg 300w, /img/ikyL6mOz9_-600.jpeg 600w, /img/ikyL6mOz9_-1600.jpeg 1600w" sizes="100vw">
				<img class="img-fluid figure-img" src="https://www.lyceum.fr/2023-2024/img/ikyL6mOz9_-300.webp" width="1600" height="1288" alt="La cryptographie est à la base de la sécurité des échanges d'information sur internet." loading="lazy" decoding="async">
			</picture>
<figcaption id="caption">La cryptographie est à la base de la sécurité des échanges d'information sur internet.</figcaption><figcaption id="credit">©&nbsp;&nbsp;CC BY-SA 4.0&nbsp;<a id="image-description" href="//commons.wikimedia.org/wiki/File:Internet2.jpg">via Wikimedia Commons</a></figcaption></figure><p></p>
<p>Sécuriser l’échange de données est un aspect crucial lors de l’échange d’informations par exemple lors d’un paiement sur internet. Il existe deux principaux types de <em>chiffrement</em> de données qui permettent de rendre un message lisible uniquement par son destinataire:</p>
<ul>
<li>le chiffrement <em>symétrique</em> à clé partagée,</li>
<li>le chiffrement <em>asymétrique</em> avec une paire clé publique clé privée.</li>
</ul>
</div>
<section id="cryptographie-symétrique" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="cryptographie-symétrique"><span class="header-section-number">1</span> Cryptographie symétrique</h2>
<blockquote class="blockquote">
<p>La cryptographie symétrique, également dite à clé secrète (par opposition à la cryptographie asymétrique), est la plus ancienne forme de chiffrement. Elle permet à la fois de chiffrer et de déchiffrer des messages à l’aide d’un même mot clé. On a des traces de son utilisation par les Égyptiens vers 2000 av. J.-C.</p>
</blockquote>
<p><a href="https://fr.wikipedia.org/wiki/Cryptographie_sym%C3%A9trique" class="cite-source">Article Wikipédia sur la cryptographie symétrique</a></p>
<p>Cette technique repose sur l’utilisation d’une <strong>clé unique</strong> qui doit être connue par l’expéditeur et le destinataire.</p>
<p>Il existe de nombreux chiffrements de ce type qui ont évolué en complexité au cours du temps.</p>
<section id="le-chiffrement-césar" class="level3" data-number="1.1">
<h3 data-number="1.1" class="anchored" data-anchor-id="le-chiffrement-césar"><span class="header-section-number">1.1</span> Le <a href="https://fr.wikipedia.org/wiki/Chiffrement_par_d%C3%A9calage">chiffrement César</a></h3>
<p></p><figure class="wikimage figure"><picture>
			  <source type="image/webp" srcset="/img/figKIygXqo-300.webp 300w, /img/figKIygXqo-600.webp 600w, /img/figKIygXqo-856.webp 856w" sizes="100vw">
  <source type="image/svg+xml" srcset="/img/figKIygXqo-856.svg 856w" sizes="100vw">
				<img class="img-fluid figure-img" src="https://www.lyceum.fr/2023-2024/img/figKIygXqo-300.webp" width="856" height="361" alt="Exemple d'un chifrement Cesar par décalage de trois lettres." loading="lazy" decoding="async">
			</picture>
<figcaption id="caption">Exemple d'un chifrement Cesar par décalage de trois lettres.</figcaption><figcaption id="credit">&nbsp;Public domain&nbsp;<a id="image-description" href="//commons.wikimedia.org/wiki/File:Caesar3.svg">via Wikimedia Commons</a></figcaption></figure><p></p>
<p>On décale les lettres de <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mi>n</mi><annotation encoding="application/x-tex">n</annotation></semantics></math> rangs la clé est tout simplement <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mi>n</mi><annotation encoding="application/x-tex">n</annotation></semantics></math>: le décalage.</p>
<p>Par exemple, César utilisait un décalage de 3 lettres:</p>
<p>Si on connait le décalage, on déchiffre le message en réalisant le décalage opposé, <em>moins trois lettres dans note exemple</em>.</p>
<p>Si on utilise 26 lettres majuscules, il n’existe que 26 clés possibles!</p>
</section>
<section id="chiffrement-par-substitution" class="level3" data-number="1.2">
<h3 data-number="1.2" class="anchored" data-anchor-id="chiffrement-par-substitution"><span class="header-section-number">1.2</span> <a href="https://fr.wikipedia.org/wiki/Chiffrement_par_substitution">Chiffrement par substitution</a></h3>
<p>On remplace une lettre par une autre de l’alphabet, on a donc <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>26</mn><mi>!</mi><mo>≈</mo><mn>4</mn><mo>×</mo><msup><mn>10</mn><mn>26</mn></msup></mrow><annotation encoding="application/x-tex">26!\approx 4\times 10^{26}</annotation></semantics></math> clés possibles.</p>
<div class="example">
<p>Avec la clé suivante:</p>
<pre><code>ABCDEFGHIJKLMNOPQRSTUVWXYZ
AZERTYUIOPQSDFGHJKLMWXCVBN</code></pre>
<p>le message <code>SUBSTITUTION</code> devient <code>LWZLMOMWMOGF</code></p>
</div>
</section>
<section id="chiffrement-de-vigenère-xvie-siècle" class="level3" data-number="1.3">
<h3 data-number="1.3" class="anchored" data-anchor-id="chiffrement-de-vigenère-xvie-siècle"><span class="header-section-number">1.3</span> <a href="https://fr.wikipedia.org/wiki/Chiffre_de_Vigen%C3%A8re">Chiffrement de Vigenère</a> (XVI<sup>e</sup> siècle)</h3>
<p>Cette méthode a été mise au point durant la renaissance pour contrer la cryptanalyse par la méthode des fréquences de lettres qui permettait de “casser” les clés de cryptage assez facilement.</p>
<p>On choisit une clé sous la forme d’un mot ou d’une phrase qui donne le décalage à appliquer qui devient alors <em>variable</em>.</p>
<p>Supposons que la clé soit <code>ABC</code>, les décalages successifs seront 0, 1, 2, 0, 1, 2, 0…</p>
<div class="example">
<p>Avec la clé <code>ABC</code></p>
<p>Le message <code>SUBSTITUTION</code> devient: <code>SVDSUKTVVIPP</code></p>
<pre><code>SUBSTITUTION
ABCABCABCABC
------------
SVDSUKTVVIPP</code></pre>
</div>
</section>
<section id="chiffrement-de-vernam-xxe-siècle" class="level3" data-number="1.4">
<h3 data-number="1.4" class="anchored" data-anchor-id="chiffrement-de-vernam-xxe-siècle"><span class="header-section-number">1.4</span> <a href="https://fr.wikipedia.org/wiki/Masque_jetable">Chiffrement de Vernam</a> (XXe siècle)</h3>
<p>Il s’agit d’un système parfaitement sûr, le mathématicien C.Shannon a montré que si on respecte bien les 3 règles de Vernam, ce système est inviolable.</p>
<ul>
<li>La clé doit être une suite de caractères au moins aussi longue que le message à chiffrer.</li>
<li>Les caractères composant la clé doivent être choisis de façon totalement aléatoire.</li>
<li>Chaque clé, ou « masque », ne doit être utilisée qu’une seule fois (d’où le nom de masque jetable).</li>
</ul>
<p>Une méthode particulièrement efficace pour traiter le chiffrement et le déchiffrement de messages à partir de la clé est d’utiliser la fonction logique <code>XOR</code>, le ou exclusif qui a une particularité très intéressante dans notre cas.</p>
<p>On note <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mi>M</mi><annotation encoding="application/x-tex">M</annotation></semantics></math> le message et <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mi>S</mi><annotation encoding="application/x-tex">S</annotation></semantics></math> la clé secrète, <code>XOR</code> se note <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mo>⊕</mo><annotation encoding="application/x-tex">\oplus</annotation></semantics></math>.</p>
<p>On obtient le message chiffré <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mi>C</mi><annotation encoding="application/x-tex">C</annotation></semantics></math> en faisant: <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo>=</mo><mi>M</mi><mo>⊕</mo><mi>S</mi></mrow><annotation encoding="application/x-tex">C = M \oplus S</annotation></semantics></math>.</p>
<p>Le déchiffrement se fait tout simplement en appliquant la même opération <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo>⊕</mo><mi>S</mi><mo>=</mo><mi>M</mi></mrow><annotation encoding="application/x-tex">C \oplus S = M</annotation></semantics></math> car:</p>
<p><math display="block" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mo stretchy="true" form="prefix">(</mo><mi>M</mi><mo>⊕</mo><mi>S</mi><mo stretchy="true" form="postfix">)</mo></mrow><mo>⊕</mo><mi>S</mi><mo>=</mo><mi>M</mi></mrow><annotation encoding="application/x-tex">
(M \oplus S)\oplus S = M
</annotation></semantics></math></p>
<div class="appli">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Application
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="appli">
<p>On souhaite transmettre le message <code>NSI</code> de façon privée. Le code ASCII correspondant est <code>01001110 01010011 01001001</code>.</p>
<p>On crée un masque aléatoirement que l’on transmet au destinataire: <code>11001001 11001101 01100011</code>.</p>
<ol type="1">
<li>Écrire le message chiffré <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mi>C</mi><annotation encoding="application/x-tex">C</annotation></semantics></math> en faisant: <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo>=</mo><mi>M</mi><mo>⊕</mo><mi>S</mi></mrow><annotation encoding="application/x-tex">C = M \oplus S</annotation></semantics></math>.</li>
<li>Vérifier qu’on déchiffre par la même opération <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo>⊕</mo><mi>S</mi><mo>=</mo><mi>M</mi></mrow><annotation encoding="application/x-tex">C \oplus S = M</annotation></semantics></math>.</li>
</ol>
</div>
</div>
</div>
</div>
</div>
</section>
</section>
<section id="cryptographie-asymétrique" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="cryptographie-asymétrique"><span class="header-section-number">2</span> Cryptographie asymétrique</h2>
<p>La <em>cryptographie asymétrique</em> permet de résoudre le problème de l’échange de la clé secrète.</p>
<p>Elle fut inventée par Whitfield Diffie et Martin Hellman en 1976, qui reçurent le prix Turing de 2015 pour cette découverte.</p>
<p>En cryptographie <em>asymétrique</em> on a 2 clés:</p>
<ul>
<li><strong>la clé publique</strong>: Celle-ci, tout le monde peut la posséder, il n’y a aucun risque, vous pouvez la transmettre à n’importe qui. Elle sert à chiffrer le message.</li>
<li><strong>la clé privée</strong>: que seul le récepteur possède, en l’occurrence vous. Elle servira à déchiffrer le message chiffré avec la clé publique. Pour clarifier mon charabia, une petite illustration :</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><picture>
			  <source type="image/webp" srcset="/img/8z-uq4ShvS-300.webp 300w, /img/8z-uq4ShvS-480.webp 480w" sizes="100vw">
  <source type="image/png" srcset="/img/8z-uq4ShvS-300.png 300w, /img/8z-uq4ShvS-480.png 480w" sizes="100vw">
				<img class="img-fluid figure-img" src="https://www.lyceum.fr/2023-2024/img/8z-uq4ShvS-300.webp" width="480" height="256" alt="" loading="lazy" decoding="async">
			</picture>
</p>
<figcaption>Illustration du chiffrement asymétrique</figcaption>
</figure>
</div>
<p><a href="https://openclassrooms.com/fr/courses/477751-lalgorithme-rsa/477335-chiffrer-et-dechiffrer" class="cite-source">Cours l’algorithme RSA sur OpenClassRoom</a></p>
<p>Pour que cela fonctionne, il faut que la paire clé publique/clé privée ait une propriété particulière.</p>
<p>Soit <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><msub><mi>F</mi><mi>P</mi></msub><annotation encoding="application/x-tex">F_P</annotation></semantics></math> la fonction de chiffrement utilisée avec la clé publique, et <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><msub><mi>F</mi><mi>S</mi></msub><annotation encoding="application/x-tex">F_S</annotation></semantics></math> la fonction relative à la clé privée. Une relation particulière relie ces deux fonctions:</p>
<p><math display="block" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo>=</mo><msub><mi>F</mi><mi>S</mi></msub><mrow><mo stretchy="true" form="prefix">(</mo><msub><mi>F</mi><mi>P</mi></msub><mrow><mo stretchy="true" form="prefix">(</mo><mi>m</mi><mo stretchy="true" form="postfix">)</mo></mrow><mo stretchy="true" form="postfix">)</mo></mrow></mrow><annotation encoding="application/x-tex">
m = F_S(F_P(m))
</annotation></semantics></math></p>
<p>Enfin pour que ce système fonctionne, il faut que:</p>
<ul>
<li>la fonction <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><msub><mi>F</mi><mi>P</mi></msub><annotation encoding="application/x-tex">F_P</annotation></semantics></math> soit facile à calculer pour tout le monde,</li>
<li>la fonction <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><msub><mi>F</mi><mi>S</mi></msub><annotation encoding="application/x-tex">F_S</annotation></semantics></math> soit facile à calculer <em>uniquement</em> pour le détenteur de la clé privée.</li>
</ul>
<p>Un système qui satisfait ces deux critères est le système de chiffrement <a href="https://fr.wikipedia.org/wiki/Chiffrement_RSA">RSA</a> utilisé pour échanger des données confidentielles sur Internet.</p>
<p>Cet algorithme fut inventé en 1977 par Ronald Rivest, Adi Shamir et Leonard Adleman breveté par le MIT en 1983. Le brevet a expiré le 21 septembre 2000 ce qui permet de l’utiliser librement depuis.</p>
<section id="principe-original" class="level3" data-number="2.1">
<h3 data-number="2.1" class="anchored" data-anchor-id="principe-original"><span class="header-section-number">2.1</span> Principe original</h3>
<p>Ce système de cryptographie repose sur l’utilisation de nombres premiers et certaines propriétés de l’arithmétique modulaire.</p>
<p></p><figure class="wikimage figure"><picture>
			  <source type="image/webp" srcset="/img/YBwG4wFNas-300.webp 300w, /img/YBwG4wFNas-600.webp 600w, /img/YBwG4wFNas-820.svg 820w" sizes="100vw">
  <source type="image/svg+xml" srcset="/img/YBwG4wFNas-820.svg 820w" sizes="100vw">
				<img class="img-fluid figure-img" src="https://www.lyceum.fr/2023-2024/img/YBwG4wFNas-300.webp" width="820" height="450" alt="Illustration de l'échange d'informations entre Alice et Bob." loading="lazy" decoding="async">
			</picture>
<figcaption id="caption">Illustration de l'échange d'informations entre Alice et Bob.</figcaption><figcaption id="credit">©&nbsp;&nbsp;CC BY-SA 4.0&nbsp;<a id="image-description" href="//commons.wikimedia.org/wiki/File:Diffie-Hellman-Schlüsselaustausch.svg">via Wikimedia Commons</a></figcaption></figure><p></p>
<ol type="1">
<li><p>Alice et Bob ont choisi un nombre premier <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mi>p</mi><annotation encoding="application/x-tex">p</annotation></semantics></math> et un nombre <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mi>g</mi><annotation encoding="application/x-tex">g</annotation></semantics></math> strictement plus petit que <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mi>p</mi><annotation encoding="application/x-tex">p</annotation></semantics></math> (ils peuvent aussi, comme montré sur la figure, ne décider de ce choix qu’au moment de l’échange, et se le communiquer en clair, ce qui n’améliore pas les chances d’Ève qui cherche à casser le code)</p></li>
<li><p>Alice choisit un nombre au hasard <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mi>a</mi><annotation encoding="application/x-tex">a</annotation></semantics></math>, élève <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mi>g</mi><annotation encoding="application/x-tex">g</annotation></semantics></math> à la puissance <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mi>a</mi><annotation encoding="application/x-tex">a</annotation></semantics></math>, et envoie à Bob le nombre <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>=</mo><msup><mi>g</mi><mi>a</mi></msup><mrow><mo stretchy="true" form="prefix">[</mo><mi>m</mi><mi>o</mi><mi>d</mi><mi>u</mi><mi>l</mi><mi>o</mi><mspace width="0.222em"></mspace><mi>p</mi><mo stretchy="true" form="postfix">]</mo></mrow></mrow><annotation encoding="application/x-tex">A = g^a [modulo\ p]</annotation></semantics></math>.</p></li>
<li><p>De même Bob choisit un nombre au hasard <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mi>b</mi><annotation encoding="application/x-tex">b</annotation></semantics></math>, et fait de même; il transmet le nombre <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi><mo>=</mo><msup><mi>g</mi><mi>b</mi></msup><mrow><mo stretchy="true" form="prefix">[</mo><mi>m</mi><mi>o</mi><mi>d</mi><mi>u</mi><mi>l</mi><mi>o</mi><mspace width="0.222em"></mspace><mi>p</mi><mo stretchy="true" form="postfix">]</mo></mrow></mrow><annotation encoding="application/x-tex">B = g^b[modulo\ p]</annotation></semantics></math> à Alice</p></li>
<li><p>En élevant le nombre <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mi>B</mi><annotation encoding="application/x-tex">B</annotation></semantics></math> reçu de Bob à la puissance <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mi>a</mi><annotation encoding="application/x-tex">a</annotation></semantics></math>, obtient <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>g</mi><mrow><mi>b</mi><mi>a</mi></mrow></msup><mrow><mo stretchy="true" form="prefix">[</mo><mi>m</mi><mi>o</mi><mi>d</mi><mi>u</mi><mi>l</mi><mi>o</mi><mspace width="0.222em"></mspace><mi>p</mi><mo stretchy="true" form="postfix">]</mo></mrow></mrow><annotation encoding="application/x-tex">g^{ba}[modulo\ p]</annotation></semantics></math>.</p></li>
<li><p>Bob fait le calcul analogue avec le nombre <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mi>A</mi><annotation encoding="application/x-tex">A</annotation></semantics></math> reçu d’Alice et obtient <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi></mi><mrow><mi>g</mi><mi>a</mi><mi>b</mi></mrow></msup><mrow><mo stretchy="true" form="prefix">[</mo><mi>m</mi><mi>o</mi><mi>d</mi><mi>u</mi><mi>l</mi><mi>o</mi><mspace width="0.222em"></mspace><mi>p</mi><mo stretchy="true" form="postfix">]</mo></mrow></mrow><annotation encoding="application/x-tex">^{gab}[modulo\ p]</annotation></semantics></math>, qui est le même résultat.</p></li>
</ol>
<p>A la fin du protocole, Alice et Bob connaissent tous les deux le nombre <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>g</mi><mrow><mi>a</mi><mi>b</mi></mrow></msup><mrow><mo stretchy="true" form="prefix">[</mo><mi>m</mi><mi>o</mi><mi>d</mi><mi>u</mi><mi>l</mi><mi>o</mi><mspace width="0.222em"></mspace><mi>p</mi><mo stretchy="true" form="postfix">]</mo></mrow></mrow><annotation encoding="application/x-tex">g^{ab}[modulo\ p]</annotation></semantics></math> mais pas Ève car elle ne peut pas calculer <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>g</mi><mrow><mi>a</mi><mi>b</mi></mrow></msup><mrow><mo stretchy="true" form="prefix">[</mo><mi>m</mi><mi>o</mi><mi>d</mi><mi>u</mi><mi>l</mi><mi>o</mi><mspace width="0.222em"></mspace><mi>p</mi><mo stretchy="true" form="postfix">]</mo></mrow></mrow><annotation encoding="application/x-tex">g^{ab}[modulo\ p]</annotation></semantics></math> facilement.</p>
</section>
<section id="exemple" class="level3" data-number="2.2">
<h3 data-number="2.2" class="anchored" data-anchor-id="exemple"><span class="header-section-number">2.2</span> Exemple</h3>
<ul>
<li>Alice et Bob ont choisi un nombre premier <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mi>p</mi><annotation encoding="application/x-tex">p</annotation></semantics></math> et une base <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mi>g</mi><annotation encoding="application/x-tex">g</annotation></semantics></math>. Dans notre exemple, <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo>=</mo><mn>23</mn></mrow><annotation encoding="application/x-tex">p=23</annotation></semantics></math> et <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo>=</mo><mn>5</mn></mrow><annotation encoding="application/x-tex">g=5</annotation></semantics></math></li>
<li>Alice choisit un nombre secret <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>=</mo><mn>6</mn></mrow><annotation encoding="application/x-tex">a=6</annotation></semantics></math></li>
<li>Elle envoie à Bob la valeur <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>=</mo><msup><mi>g</mi><mi>a</mi></msup><mrow><mo stretchy="true" form="prefix">[</mo><mi>m</mi><mi>o</mi><mi>d</mi><mi>u</mi><mi>l</mi><mi>o</mi><mspace width="0.222em"></mspace><mi>p</mi><mo stretchy="true" form="postfix">]</mo></mrow><mo>=</mo><msup><mn>5</mn><mn>6</mn></msup><mrow><mo stretchy="true" form="prefix">[</mo><mn>23</mn><mo stretchy="true" form="postfix">]</mo></mrow><mo>=</mo><mn>8</mn></mrow><annotation encoding="application/x-tex">A = g^a [modulo\ p] =  5^6 [23] = 8</annotation></semantics></math></li>
<li>Bob choisit à son tour un nombre secret <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi><mo>=</mo><mn>15</mn></mrow><annotation encoding="application/x-tex">b=15</annotation></semantics></math></li>
<li>Bob envoie à Alice la valeur <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi><mo>=</mo><msup><mi>g</mi><mi>b</mi></msup><mrow><mo stretchy="true" form="prefix">[</mo><mi>m</mi><mi>o</mi><mi>d</mi><mi>u</mi><mi>l</mi><mi>o</mi><mspace width="0.222em"></mspace><mi>p</mi><mo stretchy="true" form="postfix">]</mo></mrow><mo>=</mo><msup><mn>5</mn><mn>15</mn></msup><mrow><mo stretchy="true" form="prefix">[</mo><mn>23</mn><mo stretchy="true" form="postfix">]</mo></mrow><mo>=</mo><mn>19</mn></mrow><annotation encoding="application/x-tex">B = g^b[modulo\ p] = 5^{15} [23] = 19</annotation></semantics></math></li>
<li>Alice peut maintenant calculer la clé secrète : <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>B</mi><mi>a</mi></msup><mrow><mo stretchy="true" form="prefix">[</mo><mi>m</mi><mi>o</mi><mi>d</mi><mi>u</mi><mi>l</mi><mi>o</mi><mspace width="0.222em"></mspace><mi>p</mi><mo stretchy="true" form="postfix">]</mo></mrow><mo>=</mo><msup><mn>19</mn><mn>6</mn></msup><mrow><mo stretchy="true" form="prefix">[</mo><mn>23</mn><mo stretchy="true" form="postfix">]</mo></mrow><mo>=</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">B^a [modulo\ p] = 19^6 [23] = 2</annotation></semantics></math></li>
<li>Bob fait de même et obtient la même clé qu’Alice : <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>A</mi><mi>b</mi></msup><mrow><mo stretchy="true" form="prefix">[</mo><mi>m</mi><mi>o</mi><mi>d</mi><mi>u</mi><mi>l</mi><mi>o</mi><mspace width="0.222em"></mspace><mi>p</mi><mo stretchy="true" form="postfix">]</mo></mrow><mo>=</mo><msup><mn>8</mn><mn>15</mn></msup><mrow><mo stretchy="true" form="prefix">[</mo><mn>23</mn><mo stretchy="true" form="postfix">]</mo></mrow><mo>=</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">A^b [modulo\ p] = 8^{15} [23] = 2</annotation></semantics></math></li>
</ul>
<p><a href="https://fr.wikipedia.org/wiki/%C3%89change_de_cl%C3%A9s_Diffie-Hellman#Exemple" class="cite-source">Article Wikipédia</a></p>
<div class="appli">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Application
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="appli">
<p>Créez une clé secrète sur ce principe avec votre voisin en Python:</p>
<ol type="1">
<li>Choisir ensemble un nombre premier <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mi>p</mi><annotation encoding="application/x-tex">p</annotation></semantics></math> et une base <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mi>g</mi><annotation encoding="application/x-tex">g</annotation></semantics></math> pas trop grands.</li>
<li>Choisir chacun de votre côté un nombre secret <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mi>n</mi><annotation encoding="application/x-tex">n</annotation></semantics></math> puis calculer <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>=</mo><msup><mi>g</mi><mi>n</mi></msup><mrow><mo stretchy="true" form="prefix">[</mo><mi>p</mi><mo stretchy="true" form="postfix">]</mo></mrow></mrow><annotation encoding="application/x-tex">N=g^n [p]</annotation></semantics></math>.</li>
<li>Vérifier que chacun peut générer la même clé secrète à partir du nombre <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mi>N</mi><annotation encoding="application/x-tex">N</annotation></semantics></math> calculé par votre voisin.</li>
<li>Essayez de retrouver la clé à partir des informations échangées en clair: <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mi>g</mi><annotation encoding="application/x-tex">g</annotation></semantics></math>, <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mi>p</mi><annotation encoding="application/x-tex">p</annotation></semantics></math>, <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mi>A</mi><annotation encoding="application/x-tex">A</annotation></semantics></math> et <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mi>B</mi><annotation encoding="application/x-tex">B</annotation></semantics></math>(Ne faites pas cette question, elle est impossible).</li>
</ol>
</div>
</div>
</div>
</div>
</div>
</section>
</section>
<section id="cryptosystèmes-hybrides" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="cryptosystèmes-hybrides"><span class="header-section-number">3</span> Cryptosystèmes hybrides</h2>
<p>Bien que le système RSA à clé publique soit a priori <em>sûr</em> et pratique puisqu’il n’est pas nécessaire d’échanger la clé de chiffrement comme dans le cas du chiffrement symétrique. On utilise en pratique plutôt un système hybride, car le système à clé asymétrique est assez lourd à exécuter et prend du temps.</p>
<p>Regardons par exemple le cas d’échange d’informations sécurisées grâce au protocole <a href="https://fr.wikipedia.org/wiki/HyperText_Transfer_Protocol_Secure#Principe_de_fonctionnement">HTTPS</a>.</p>
<ol type="1">
<li>Le client — par exemple le navigateur Web — contacte un serveur — par exemple Wikipédia — et demande une connexion sécurisée.</li>
<li>Le serveur répond en produisant un certificat qui contient entre autres sa clé publique.</li>
<li>Cela permet au client d’envoyer de manière secrète une <em>clé symétrique</em> qui sera utilisée à tous les échanges entre le serveur et le client de façon que tous les contenus de la communication — y compris l’adresse même du site web, l’URL — soient chiffrées.</li>
</ol>
<p></p><figure class="wikimage figure"><picture>
			  <source type="image/webp" srcset="/img/0x7vOUERxv-300.webp 300w, /img/0x7vOUERxv-581.webp 581w, /img/0x7vOUERxv-581.svg 581w" sizes="100vw">
  <source type="image/svg+xml" srcset="/img/0x7vOUERxv-581.svg 581w" sizes="100vw">
				<img class="img-fluid figure-img" src="https://www.lyceum.fr/2023-2024/img/0x7vOUERxv-300.webp" width="581" height="650" alt="La clé secrète est calculée en combinant votre clé privée et la clé publique de votre destinatiare" loading="lazy" decoding="async">
			</picture>
<figcaption id="caption">La clé secrète est calculée en combinant votre clé privée et la clé publique de votre destinatiare</figcaption><figcaption id="credit">&nbsp;Public domain&nbsp;<a id="image-description" href="//commons.wikimedia.org/wiki/File:Public_key_shared_secret.svg">via Wikimedia Commons</a></figcaption></figure><p></p>
<blockquote class="blockquote">
<p>Dans le schéma d’échange de clés Diffie-Hellman, chaque partie génère une paire de clés publique / privée et distribue la clé publique. Après avoir obtenu une copie authentique des clés publiques de chacun, Alice et Bob peuvent calculer une clé secrète partagée hors ligne. La clé secrète partagée peut être utilisée, comme clé pour un chiffrement symétrique.</p>
</blockquote>
<div class="ref">
<ul>
<li><a href="https://www.dunod.com/sciences-techniques/algorithmes-notions-base">Algorithmes notions de base</a></li>
<li><a href="https://openclassrooms.com/fr/courses/477751-lalgorithme-rsa/477335-chiffrer-et-dechiffrer">Cours l’algorithme RSA sur OpenClassRoom</a></li>
<li><a href="https://editions.lavoisier.fr/etudes-superieures/informatique-mp-pc-pt-psi/preaux/tec-et-doc/le-tout-en-un/livre/9782743022976">Informatique MP-PC-PT-PSI</a></li>
<li><a href="https://fr.wikipedia.org/wiki/%C3%89change_de_cl%C3%A9s_Diffie-Hellman">Article Wikipédia Échange de clés Diffie-Hellman</a></li>
</ul>
</div>


</section>

 ]]></description>
  <category>TNSI</category>
  <guid>https://www.lyceum.fr/2023-2024/tg/nsi/3-architectures-materielles-systemes-dexploitation-et-reseaux/4-securisation-des-communications/</guid>
  <pubDate>Thu, 16 May 2024 13:21:00 GMT</pubDate>
</item>
<item>
  <title>Chapitre 1: Modules et documentation</title>
  <link>https://www.lyceum.fr/2023-2024/tg/nsi/4-langages-et-programmation/1-modules-et-documentation/</link>
  <description><![CDATA[ 




<div class="programme">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Programme
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="programme">
<table class="table table-bordered table-hover">
<thead class="table-warning">
<tr class="header">
<th>Contenus</th>
<th>Capacités attendues</th>
<th>Commentaires</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Modularité.</td>
<td><p>Utiliser des API (Application Programming Interface) ou des bibliothèques.</p>
<p>Exploiter leur documentation. Créer des modules simples et les documenter.</p></td>
<td></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</div>
<div class="intro">
<!-- TODO utiliser wc-wikimage -->
<figure class="half right figure">
<img src="https://www.lyceum.fr/2023-2024/tg/nsi/images/640px-PyPI_logo.svg.png" class="figure-img">
<figcaption>
Pypi le python packaging index permet de publier des modules python open-source pour qu’ils puissent être réutilisés.
</figcaption>
</figure>
<p>Jusqu’à maintenant, nous avons toujours programmé au sein d’un seul fichier (ou script). Cependant, lorsqu’on souhaite rédiger des programmes plus longs, il est souhaitable de séparer le code dans plusieurs fichiers. Chaque fichier est appelé un module et les définitions d’un module peuvent être importées dans un autre module grâce au mot-clé <code>import</code>.</p>
</div>
<section id="utilisation-des-modules" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="utilisation-des-modules"><span class="header-section-number">1</span> Utilisation des modules</h2>
<p>Lorsqu’on utilise Python, certaines fonctionnalités sont présentes par défaut, comme les fonctions <code>print()</code> et <code>round()</code>.</p>
<p>Par contre, pour certaines fonctionnalités jugées moins «indispensables», il est nécessaire d’importer des modules de code qui vont permettre de rajouter les fonctionnalités souhaitées.</p>
<p>On a par exemple déjà utilisé les modules <code>math</code> ou <code>random</code>, nous allons dans cet exemple utiliser le module <a href="https://docs.python.org/fr:3/library/statistics.html"><code>statistics</code></a> moins connu ajouté à partir de la version 3.4 de Python.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import du module</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> statistics</span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># affiche l'aide</span></span>
<span id="cb1-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">help</span>(statistics)</span></code></pre></div>
<p>Supposons que l’on souhaite utiliser les fonctions <code>mean()</code> moyenne et <code>stdev()</code> :écart-type. Plusieurs solutions s’offrent à nous:</p>
<ol type="1">
<li>Import du module et utilisation de son espace de noms avec une notation pointée(avec un point entre le nom du module et le nom de la fonction).</li>
</ol>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> statistics</span>
<span id="cb2-2">notes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>]</span>
<span id="cb2-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Moyenne:"</span>, statistics.mean(notes))</span>
<span id="cb2-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Écart-type:"</span>, statistics.stdev(notes))</span></code></pre></div>
<p>SORTIE</p>
<pre><code>Moyenne: 12.571428571428571
Écart-type: 4.035556254807296</code></pre>
<p>On peut aussi renommer l’import avec le mot-clé <code>as</code> pour rendre le code plus lisible.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> statistics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> stat</span>
<span id="cb4-2">notes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>]</span>
<span id="cb4-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Moyenne:"</span>, stat.mean(notes))</span>
<span id="cb4-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Écart-type:"</span>, stat.stdev(notes))</span></code></pre></div>
<ol start="2" type="1">
<li>Vous pouvez également n’importer que les fonctions dont vous avez besoin.</li>
</ol>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> statistics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> mean, stdev</span>
<span id="cb5-2">notes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>]</span>
<span id="cb5-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Moyenne:"</span>, mean(notes))</span>
<span id="cb5-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Écart-type:"</span>, stdev(notes))</span></code></pre></div>
<ol start="3" type="1">
<li>Une autre méthode cependant <strong>déconseillée</strong> en raison de la pollution de l’espace des noms(de variables) est l’utilisation du <code>*</code> (<em>wildcard</em>, joker en anglais).</li>
</ol>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> statistics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Toutes les objets du module sont disponibles sans notation pointée</span></span>
<span id="cb6-3">notes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>]</span>
<span id="cb6-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Moyenne:"</span>, mean(notes))</span>
<span id="cb6-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Écart-type:"</span>, stdev(notes))</span></code></pre></div>
<div class="plus">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
En plus
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="plus">
<p>Python possède de très nombreux modules implémentés directement par l’équipe de développement de Python, c’est ce qu’on appelle la <a href="https://docs.python.org/fr/3/library/index.html">bibliothèque standard</a>:</p>
<ul>
<li><code>datetime</code>: Types de base pour la date et l’heure</li>
<li><code>random</code>: Génère des nombres pseudo-aléatoires</li>
<li><code>zipfile</code>: Travailler avec des archives ZIP</li>
<li>…</li>
</ul>
<p>La liste est longue et ne cesse de s’allonger à chaque version de Python en fonction des demandes des utilisateurs.</p>
<p>Si cependant vous ne trouvez pas votre bonheur dans la bibliothèque standard, python possède une communauté open-source importante qui propose des modules (et packages: ensembles de modules) sur <a href="https://pypi.org/">Pypi</a>, on trouvera parmi les milliers de projets certains noatbles:</p>
<ul>
<li><code>pandas</code> pour la manipulation de données.</li>
<li><code>django</code> pour créer des applications web.</li>
<li><code>numpy</code> pour la manipulation de matrices ou tableaux multidimensionnels.</li>
<li><code>scipy</code> pour les applications scientifiques.</li>
<li>…</li>
</ul>
<p>Si vous ne trouvez pas votre bonheur parmi ces packages vous devrez l’écrire!</p>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="notre-premier-module" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="notre-premier-module"><span class="header-section-number">2</span> Notre premier module</h2>
<p>Nous allons créer un premier module dans un fichier <code>fibo.py</code> qui permet générer les nombres de la suite de Fibonacci.</p>
<p>La suite de Fibonacci est une suite de nombres entiers définie par récurrence.</p>
<p>Les deux premiers termes sont 0 et 1, puis un terme est la somme des deux termes précédents.</p>
<p>On obtient ainsi les nombres dits de Fibonacci: 0, 1, 1, 2, 3, 5, 8, 13, 21…</p>
<p>La définition mathématique est:</p>
<p><math display="block" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>f</mi><mn>0</mn></msub><mo>=</mo><mn>0</mn><mo>;</mo><msub><mi>f</mi><mn>1</mn></msub><mo>=</mo><mn>1</mn><mo>;</mo><msub><mi>f</mi><mi>n</mi></msub><mo>=</mo><msub><mi>f</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>+</mo><msub><mi>f</mi><mrow><mi>n</mi><mo>−</mo><mn>2</mn></mrow></msub><mrow><mspace width="0.333em"></mspace><mtext mathvariant="normal"> pour n &gt; 1</mtext></mrow></mrow><annotation encoding="application/x-tex">
f_0 = 0; f_1 = 1; f_n = f_{n-1} + f_{n-2} \text{ pour n &gt; 1}
</annotation></semantics></math></p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Module sur les nombres de Fibonacci</span></span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> fib(n):    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># affiche les nombres de Fibonacci jusqu'à n</span></span>
<span id="cb7-4">    a, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb7-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> n:</span>
<span id="cb7-6">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(a, end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>)</span>
<span id="cb7-7">        a, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b, a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>b</span>
<span id="cb7-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="cb7-9"></span>
<span id="cb7-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> fib2(n):   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># renvoie la liste des nombres de Fibonacci jusqu'à n</span></span>
<span id="cb7-11">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb7-12">    a, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb7-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> n:</span>
<span id="cb7-14">        result.append(a)</span>
<span id="cb7-15">        a, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b, a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>b</span>
<span id="cb7-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> result</span></code></pre></div>
<p>Si le module est correctement installé ou tout simplement présent dans le même dossier que celui ou vous exécutez python (<em>cwd</em>: Current Working Directory_).</p>
<p>On importe le module sous le nom <code>fibo</code> en python, l’extension ne doit pas être précisée.</p>
<p>Les imports fonctionnent comme d’habitude.</p>
<ul>
<li><p>Soit en important le module directement et en utilisant des notations pointées;</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> fibo</span>
<span id="cb8-2">fibo.fib(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># affiche 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987</span></span>
<span id="cb8-4">fibo.fib2(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb8-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># renvoie [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]</span></span></code></pre></div></li>
<li><p>soit en important spécifiquement des fonctions pour pouvoir les utiliser sans rappeler le module d’origine.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fibo <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> fib, fib2</span>
<span id="cb9-2">fib(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># affiche 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987</span></span>
<span id="cb9-4">fib2(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># renvoie [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]</span></span></code></pre></div></li>
</ul>
</section>
<section id="documentation-et-commentaires" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="documentation-et-commentaires"><span class="header-section-number">3</span> Documentation et commentaires</h2>
<p>Nous avons déjà vu en <a href="../../../../1g/nsi/7-langages-et-programmation/6-fonctions/#prototyper-une-fonction">première</a> comment <em>prototyper</em> des fonctions pour décrire le rôle de la fonction, le type des paramètres et le type de la valeur de retour. C’est ce que l’on appelle une <code>docstring</code>.</p>
<p>Les <code>docstring</code>s sont utilisées pour afficher les documentations en ligne ou directement dans Python avec la fonction <code>help()</code></p>
<p>Pour documenter un module, il suffit de créer la <code>docstring</code> au début du fichier en utilisant les chaines de caractères multilignes délimitées par <code>"""</code>, pour une lecture aisée on limite souvent le nombre de caractères par ligne à 80(ou 100 suivant les projets).</p>
<p>Si on prend l’exemple précédent on pourrait le documenter avec une description générale au début du module ainsi qu’une liste des fonctions, et en pensant à documenter également les fonctions bien sûr.</p>
<p>Les fonctions ont également été renommées pour être plus explicites:</p>
<ul>
<li><code>fib</code>: <code>fib_print</code></li>
<li><code>fib2</code>: <code>fib_to_array</code></li>
</ul>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" Module fibo relatif à la création de nombres de Fibionacci</span></span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Pour rappel, la suite de Fibonacci est une suite d'entiers dans laquelle chaque terme est la somme </span></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">des deux termes qui le précèdent.(voir: https://fr.wikipedia.org/wiki/Suite_de_Fibonacci)</span></span>
<span id="cb10-5"></span>
<span id="cb10-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Ce module présente deux fonctions:</span></span>
<span id="cb10-7"></span>
<span id="cb10-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">- fib_print: affiche les nombres de Fibionacci</span></span>
<span id="cb10-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">- fib_to_array: renvoie la liste des nombres de Fibionacci</span></span>
<span id="cb10-10"></span>
<span id="cb10-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb10-12"></span>
<span id="cb10-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> fib_print(n):</span>
<span id="cb10-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Affiche les nombres de Fibionacci</span></span>
<span id="cb10-15"></span>
<span id="cb10-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Arguments</span></span>
<span id="cb10-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ---------</span></span>
<span id="cb10-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    n: int</span></span>
<span id="cb10-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        dernier rang de la suite de Fibonacci affiché</span></span>
<span id="cb10-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb10-21">    a, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb10-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> n:</span>
<span id="cb10-23">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(a, end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>)</span>
<span id="cb10-24">        a, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b, a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>b</span>
<span id="cb10-25">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="cb10-26"></span>
<span id="cb10-27"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> fib_to_array(n):</span>
<span id="cb10-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Renvoie la liste des nombres de Fibionacci</span></span>
<span id="cb10-29"></span>
<span id="cb10-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Arguments</span></span>
<span id="cb10-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ---------</span></span>
<span id="cb10-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    n: int</span></span>
<span id="cb10-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        dernier rang de la suite de Fibonacci renvoyé dans la liste</span></span>
<span id="cb10-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb10-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb10-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb10-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    list</span></span>
<span id="cb10-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        La liste des nombres de Fibionnaci jusqu'au rang n</span></span>
<span id="cb10-39"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb10-40">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb10-41">    a, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb10-42">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> n:</span>
<span id="cb10-43">        result.append(a)</span>
<span id="cb10-44">        a, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b, a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>b</span>
<span id="cb10-45">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> result</span></code></pre></div>
<div class="plus">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
En plus: Documentation et commentaires
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="plus" data-titre="Documentation et commentaires">
<p>Attention à bien distinguer:</p>
<ul>
<li>La documentation qui est destinée aux utilisateurs du programme.</li>
<li>Les commentaires qui sont destinés aux programmeurs lisant le code.</li>
</ul>
</div>
</div>
</div>
</div>
</div>
<!-- ## Documentation

Il est important de bien distinguer commenter et documenter.

- les _commentaires_ sont destinés au programmeur, pour expliquer ce que l'on a fait, pourquoi on
  l'a fait.

::: example

Dans un tri, on pourrait trouver le code suivant.

```python
# on part du deuxième élément car il est déjà trié
for i in range(1, len(tab)):
    ...
```

Le commentaire explique ce que l'on a fait, et évite de revenir en arrière si quelqu'un ne comprend
pas pourquoi on est parti de l'indice 1.

:::

- la _documentation_ est destinée aux utilisateurs, elle leur permet d'expliquer comment on utilise
  le programme du point de vue de l'utilisateur et non du programmeur.

En Python, la documentation se fait par l'écriture de
[Docstring](https://www.python.org/dev/peps/pep-0257/)s.

Docstring

:   Une docstring est une chaîne de caractère écrite en tant que première instruction dans une
    définition de module, fonction, classe ou méthode. Une telle docstring devient l'attribut spécial
    `__doc__` de cet objet, et pourra être affichée grâce à la fonction `help()`.

::: example

On peut accéder à la Docstring de la fonction `est_pair` écrite précédemment comme ceci.

```python
help(est_pair)
```
 
Affiche :

```
Help on function est_pair in module __main__:

est_pair(n)
    Indique si un nombre est pair ou non
    
    Paramètres
    ----------
    n: int
    
    Returns
    -------
    bool
        True si n est pair, False sinon
```
::: -->
</section>
<section id="annotations-de-types" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="annotations-de-types"><span class="header-section-number">4</span> Annotations de types</h2>
<p>Depuis la version 3.5, Python propose des <a href="https://docs.python.org/fr/3/library/typing.html">annotations de types</a> dans les fonctions.</p>
<div class="example">
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> dit_bonjour(nom: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>:</span>
<span id="cb11-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Bonjour '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> nom</span></code></pre></div>
<p>Cette fonction prend en paramètre un nom de type chaîne de caractères <code>str</code> et renvoie également une chaine de caractères <code>str</code>.</p>
</div>
<p>On peut ainsi rendre plus compacte la documentation de nos fonctions.</p>
<div class="appli">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Application
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="appli">
<p>Proposer des annotations de type pour nos deux fonctions du module <code>fibo</code>.</p>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="api-application-programming-interface" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="api-application-programming-interface"><span class="header-section-number">5</span> API (<em>Application Programming Interface</em>)</h2>
<p>Lorsqu’un projet grandit, il y a de plus en plus de personnes qui doivent travailler dessus et l’utiliser et il devient de plus en plus complexe à comprendre. C’est pour cela qu’une bonne documentation est indispensable, mais aussi une bonne organisation du code afin de le rendre plus facile à utiliser.</p>
<p>Il conviendra de bien organiser les divers modules et fonctions accessibles, ce qu’on appelle l’API.</p>
<p>La liste des fonctions disponibles dans l’API est disponible avec la fonction <code>dir()</code>.</p>
<div class="example">
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb12-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dir</span>(math)</span></code></pre></div>
<p>SORTIE</p>
<pre><code>['__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'comb', 'copysign', 'cos', 'cosh', 'degrees', 'dist', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'gcd', 'hypot', 'inf', 'isclose', 'isfinite', 'isinf', 'isnan', 'isqrt', 'lcm', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'log2', 'modf', 'nan', 'nextafter', 'perm', 'pi', 'pow', 'prod', 'radians', 'remainder', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'tau', 'trunc', 'ulp']</code></pre>
</div>
<div class="plus">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
En plus: Fonctions privées
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="plus" data-titre="Fonctions privées">
<p>On définit parfois certaines fonctions juste pour pouvoir développer notre module, ces fonctions ne sont pas destinées à être utilisées par les utilisateurs de notre module, elles sont dites <em>privées</em>.</p>
<p>Python permet de «cacher» ces fonctions de l’API, pour cela il faut que leur nom commence par un tiret bas <code>_</code>.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _privée():</span>
<span id="cb14-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Je suis cachée et n'apparait pas dans la documentation"</span>)</span></code></pre></div>
<p><strong>Attention</strong>, la fonction reste accessible malgré tout, elle n’est juste pas documentée ni importée lors des imports avec le jocker: <code>from module import *</code></p>
</div>
</div>
</div>
</div>
</div>
<div class="appli">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Application
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="appli">
<p>On peut prendre l’exemple de la bibliothèque open-source <a href="https://github.com/scikit-learn/scikit-learn"><code>sklearn</code></a> connue pour la qualité de son code, de son API et de sa documentation.</p>
<p>https://scikit-learn.org/stable/modules/classes.html</p>
<p>Utiliser la documentation de sklearn pour implémenter la recherche des k-plus proches voisins vue en classe première en utilisant le jeu de données sur les joueurs du top-14 <a href="https://framagit.org/lyceum/binder-notebooks/-/blob/main/kplusproches/joueurs-top14-edit.csv">ici</a>.</p>
</div>
</div>
</div>
</div>
</div>
<div class="ref">
<ul>
<li><a href="https://docs.python.org/fr/3/tutorial/modules.html">Documentation python sur les modules</a></li>
<li><a href="https://numpy.org/devdocs/docs/howto_document.html">A Guide to NumPy/SciPy Documentation</a></li>
</ul>
</div>


</section>

 ]]></description>
  <category>TNSI</category>
  <guid>https://www.lyceum.fr/2023-2024/tg/nsi/4-langages-et-programmation/1-modules-et-documentation/</guid>
  <pubDate>Thu, 16 May 2024 13:21:00 GMT</pubDate>
</item>
<item>
  <title>Chapitre 2: Mise au point des programmes</title>
  <link>https://www.lyceum.fr/2023-2024/tg/nsi/4-langages-et-programmation/2-mise-au-point-des-programmes/</link>
  <description><![CDATA[ 




<div class="programme">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Programme
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="programme">
<table class="table table-bordered table-hover">
<thead class="table-warning">
<tr class="header">
<th>Contenus</th>
<th>Capacités attendues</th>
<th>Commentaires</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><p>Mise au point des programmes.</p>
<p>Gestion des bugs.</p></td>
<td>Dans la pratique de la programmation, savoir répondre aux causes typiques de bugs : problèmes liés au typage, effets de bord non désirés, débordements dans les tableaux, instruction conditionnelle non exhaustive, choix des inégalités, comparaisons et calculs entre flottants, mauvais nommage des variables, etc.</td>
<td><p>On prolonge le travail entrepris en classe de première sur l’utilisation de la spécification, des assertions, de la documentation des programmes et de la construction de jeux de tests.</p>
<p>Les élèves apprennent progressivement à anticiper leurs erreurs.</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</div>
<blockquote class="blockquote">
<p>La mise au point du programme doit permettre au programme de répondre à une spécification, durant cette phase, le programmeur se doit de savoir répondre aux causes typiques de bugs.</p>
</blockquote>
<section id="spécification-et-tests" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="spécification-et-tests"><span class="header-section-number">1</span> Spécification et tests</h2>
<p>Durant la phase de conception d’un programme, on commence par écrire la spécification du programme et écrire des jeux de tests pour valider le fonctionnement du programme.</p>
<p>La spécification décrit les entrées et sorties du programme, ainsi que leurs types, ce que l’on appelle en anglais l’API_(Application Programming Interface)_ ou interface de programmation applicative en français(peu courant).</p>
<p>Les tests vérifient que les sorties du programme sont conformes à ce que l’on attend.</p>
<div class="example">
<p>Voici une fonction avec sa spécification.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> est_pair(n):</span>
<span id="cb1-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Indique si un nombre est pair ou non</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Paramètres</span></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    n: int</span></span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    bool</span></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        True si n est pair, False sinon</span></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb1-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb1-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb1-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb1-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span></code></pre></div>
<p>Ou plus succinctement avec les annotations de type:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> est_pair(n: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>:</span>
<span id="cb2-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"Indique si un nombre est pair ou non"</span></span>
<span id="cb2-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb2-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb2-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb2-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span></code></pre></div>
<p>Maintenant un ensemble de tests:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> est_pair(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb3-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> est_pair(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb3-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> est_pair(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1381635162</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb3-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> est_pair(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3565454165461</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># le is True est redondant</span></span>
<span id="cb3-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> est_pair(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># le is False peut être écrit</span></span>
<span id="cb3-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> est_pair(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<p>On peut également ajouter un message en cas d’erreur sur un test en le séparant par une virgule.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> est_pair(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Le nombre deux n'a pas été reconnu comme pair"</span></span></code></pre></div>
<p>Ainsi si la fonction présentait un jour une erreur, le programme s’arrêterait en levant l’exception avec le message d’explication.</p>
<pre><code>Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AssertionError: Le nombre deux n'a pas été reconnu comme pair</code></pre>
</div>
</section>
<section id="gestion-des-bugs" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="gestion-des-bugs"><span class="header-section-number">2</span> Gestion des bugs</h2>
<p>Lors de l’écriture de code Python, vous ferez fréquemment des erreurs, qui vous serons «gentiment» rappelées par l’interpréteur Python à l’exécution du code.</p>
<section id="erreurs-les-plus-courantes-en-python" class="level3" data-number="2.1">
<h3 data-number="2.1" class="anchored" data-anchor-id="erreurs-les-plus-courantes-en-python"><span class="header-section-number">2.1</span> Erreurs les plus courantes en Python</h3>
<p>En fonction des erreurs rencontrées, Python affiche des erreurs spécifiques qui vous aident à comprendre quel est le problème dans votre programme.</p>
<p>Voici quelques erreurs courantes que vous devez apprendre à reconnaitre parmi les <a href="https://docs.python.org/fr/3/library/exceptions.html#exception-hierarchy">nombreuses exceptions</a> de Python.</p>
<table class="table table-bordered table-hover">
<thead class="table-warning">
<tr class="header">
<th><pre><code>Type d'erreur</code></pre></th>
<th>Objet Python</th>
<th><pre><code>                           Erreurs courantes</code></pre></th>
<th><pre><code>            Exemple</code></pre></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Erreur de syntaxe</td>
<td><code>SyntaxError</code></td>
<td>Erreur de parenthèse, <code>:</code> manquant avant un bloc d’instruction….</td>
<td><code>len([1,2,3))</code></td>
</tr>
<tr class="even">
<td>Erreurs d’indexation</td>
<td><code>IndexError</code></td>
<td>Accès à un index non présent dans une liste. Accès à un index non présent dans une liste, ou un tuple, str…</td>
<td><code>[12,15,14][4]</code></td>
</tr>
<tr class="odd">
<td>Erreurs de nom</td>
<td><code>NameError</code></td>
<td>Nom de fonction ou de variable mal orthographié.</td>
<td><code>print(Bonjour)</code> ou <code>prout("Bonjour")</code></td>
</tr>
<tr class="even">
<td>Erreurs d’indentation</td>
<td><code>IndentationError</code></td>
<td>Indentation oubliée, ou trop grande, les blocs sont alors mal délimités.</td>
<td></td>
</tr>
<tr class="odd">
<td>Erreurs de type</td>
<td><code>TypeError</code></td>
<td>Opération impossible entre deux types(str - int). Conversion de type impossible.</td>
<td><code>"3" * "5"</code></td>
</tr>
</tbody>
</table>
<p>Parfois ces erreurs nécessitent de modifier le code pour corriger le «bug».</p>
<p>D’autres fois ces erreurs nécessitent d’être gérées sans arrêter complétement le programme.</p>
</section>
<section id="gestion-des-exceptions-avec-try-...-except..." class="level3" data-number="2.2">
<h3 data-number="2.2" class="anchored" data-anchor-id="gestion-des-exceptions-avec-try-...-except..."><span class="header-section-number">2.2</span> Gestion des exceptions avec <code>try: ... except...</code></h3>
<p>Prenons l’exemple de la gestion d’une entrée utilisateur. Vous demandez l’âge d’une personne et vous attendez un entier pour vérifier son accès.</p>
<p>Il faut lui reposer la question jusqu’à ce qu’il rentre une valeur conforme à nos attentes.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1">age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Quel âge avez-vous? "</span>))</span>
<span id="cb9-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>:</span>
<span id="cb9-3">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Vous pouvez vous inscrire"</span>)</span>
<span id="cb9-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb9-5">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Les réseaux sociaux sont interdits aux moins de 13 ans."</span>)  </span></code></pre></div>
<p>Si l’utilisateur répond <code>"seize ans"</code>, vous obtenez le message d’erreur suivant:</p>
<pre><code>ValueError: invalid literal for int() with base 10: 'seize ans'</code></pre>
<p>On va gérer cette erreur avec un <code>try</code>.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb11-2">  age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Quel âge avez-vous? "</span>))</span>
<span id="cb11-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>:</span>
<span id="cb11-4">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Veuillez entrer votre âge sous forme de chiffres"</span>)</span></code></pre></div>
<p>Le programme ne renvoie plus d’erreurs et ne s’arrête pas. On peut continuer à demander l’âge sans relancer le programme.</p>
<pre><code>Quel âge avez-vous? treize ans
Veuillez entrer votre âge sous forme de chiffres</code></pre>
<p>Un <code>while</code> peut permettre de reposer la question en cas de besoin.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb13-1">age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb13-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> age: </span>
<span id="cb13-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb13-4">      age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Quel âge avez-vous? "</span>))</span>
<span id="cb13-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>:</span>
<span id="cb13-6">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Veuillez entrer votre âge sous forme de chiffres"</span>)</span>
<span id="cb13-7"></span>
<span id="cb13-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on est sures d'avoir un age entier ici</span></span>
<span id="cb13-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>:</span>
<span id="cb13-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Vous pouvez vous inscrire"</span>)</span>
<span id="cb13-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb13-12">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Les réseaux sociaux sont interdits aux moins de 13 ans."</span>)</span></code></pre></div>
<p>Voici un exemple d’interaction avec ce programme.</p>
<pre><code>Quel âge avez-vous?  treize ans
Veuillez entrer votre âge sous forme de chiffres
Quel âge avez-vous?  13.5
Veuillez entrer votre âge sous forme de chiffres
Quel âge avez-vous?  13
Vous pouvez vous inscrire</code></pre>
<div class="plus">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
En plus
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="plus">
<p>Attention à gérer les exceptions avec précaution ou vous risquez d’introduire des bugs qui n’arrêteront pas le programme et resteront donc «invisibles».</p>
</div>
</div>
</div>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>TNSI</category>
  <guid>https://www.lyceum.fr/2023-2024/tg/nsi/4-langages-et-programmation/2-mise-au-point-des-programmes/</guid>
  <pubDate>Thu, 16 May 2024 13:21:00 GMT</pubDate>
</item>
<item>
  <title>Chapitre 3: Fonctions récursives</title>
  <link>https://www.lyceum.fr/2023-2024/tg/nsi/4-langages-et-programmation/3-fonctions-recursives/</link>
  <description><![CDATA[ 




<div class="programme">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Programme
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="programme">
<table class="table table-bordered table-hover">
<thead class="table-warning">
<tr class="header">
<th>Contenus</th>
<th>Capacités attendues</th>
<th>Commentaires</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Récursivité.</td>
<td><p>Écrire un programme récursif.</p>
<p>Analyser le fonctionnement d’un programme récursif.</p></td>
<td>Des exemples relevant de domaines variés sont à privilégier.</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</div>
<div class="intro">
<p></p><figure class="wikimage figure"><picture>
			  <source type="image/webp" srcset="/img/9ORdTqNLu2-300.webp 300w, /img/9ORdTqNLu2-600.webp 600w, /img/9ORdTqNLu2-681.webp 681w" sizes="100vw">
  <source type="image/png" srcset="/img/9ORdTqNLu2-300.png 300w, /img/9ORdTqNLu2-600.png 600w, /img/9ORdTqNLu2-681.png 681w" sizes="100vw">
				<img class="img-fluid figure-img" src="https://www.lyceum.fr/2023-2024/img/9ORdTqNLu2-300.webp" width="681" height="422" alt="Les nombres de la suite de Fibonnacci sont un exemple souvent utilisé pour illustrer l'utilisation des fonctions récursives." loading="lazy" decoding="async">
			</picture>
<figcaption id="caption">Les nombres de la suite de Fibonnacci sont un exemple souvent utilisé pour illustrer l'utilisation des fonctions récursives.</figcaption><figcaption id="credit">©&nbsp;&nbsp;CC BY-SA 4.0&nbsp;<a id="image-description" href="//commons.wikimedia.org/wiki/File:34*21-FibonacciBlocks.png">via Wikimedia Commons</a></figcaption></figure><p></p>
<p>Dans ce chapitre, nous allons voir comment utiliser des fonctions <em>récursives</em>, des fonctions qui s’appellent elles-mêmes. Ce type de fonction peut avantageusement remplacer la boucle pour écrire des programmes courts et élégants. Ce type de construction est notamment utilisée en <strong><a href="../5-paradigmes-de-programmation">programmation fonctionnelle</a></strong>, un paradigme de programmation centrée sur les fonctions.</p>
</div>
<section id="définition-et-exemple" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="définition-et-exemple"><span class="header-section-number">1</span> Définition et exemple</h2>
<dl>
<dt>
Fonction récursive
</dt>
<dd>
<div>
<p>Une fonction récursive est une fonction qui s’appelle elle-même dans sa définition.</p>
</div>
</dd>
</dl>
<p>Commençons par un exemple pour clarifier un peu les choses.</p>
<p>Vous voulez demander à un utilisateur une entrée par exemple son âge, et vous voulez vous assurer que l’utilisateur vous donne bien une valeur entière positive.</p>
<p>On peut implémenter cela avec une boucle <code>while</code>.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1">age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb1-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span>(age):</span>
<span id="cb1-3">    age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Quel âge avez-vous?"</span>))</span>
<span id="cb1-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb1-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Merci pour votre réponse)</span></span>
<span id="cb1-6"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    # on affecte None à age pour relancer un tour de boucle</span></span>
<span id="cb1-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"L'age doit être un entier positif"</span>)</span>
<span id="cb1-8">    age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb1-9">        </span></code></pre></div>
<p>Mais il est aussi tout à fait possible d’utiliser une fonction récursive comme ceci:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> quel_age():</span>
<span id="cb2-2">    age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Quel âge avez-vous?"</span>))</span>
<span id="cb2-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb2-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> age</span>
<span id="cb2-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># L'age n'est pas positif, il faut recommencer</span></span>
<span id="cb2-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"L'age doit être un entier positif"</span>)</span>
<span id="cb2-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on fait l'appel récursif pour reposer la question</span></span>
<span id="cb2-8">    quel_age()</span>
<span id="cb2-9"></span>
<span id="cb2-10">age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> quel_age() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># appel de la fonction et assignation de la valeur retournée à la variable age</span></span></code></pre></div>
<p>Comme vous le voyez cette fonction continuera de s’appeler <em>tant que</em> nécessaire. On a donc bien remplacé la boucle avec cette fonction.</p>
<div class="appli">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Application: Gestion des exceptions
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="appli" data-titre="Gestion des exceptions">
<p>Ce code ne traite que le problème du signe, si on voulait être complet il faudrait gérer les problèmes de type(<code>str</code>, <code>float</code>…) avec les structures <code>try except</code>.</p>
<p>Vous pouvez l’implémenter en guise d’exercice.</p>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="comment-définir-une-fonction-récursive" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="comment-définir-une-fonction-récursive"><span class="header-section-number">2</span> Comment définir une fonction récursive?</h2>
<p>Pour écrire une fonction récursive il faut:</p>
<ul>
<li><p>Traiter attentivement le <em>cas récursif</em> du passage des valeurs renvoyées par l’appel précédent à l’appel suivant.</p></li>
<li><p>Prévoir le <em>cas de base</em> qui ne nécessite pas de rappel de la fonction afin d’arrêter la boucle.</p></li>
</ul>
<div class="example">
<p>Nous allons utiliser l’exemple <em>classique</em> de la fonction puissance qui retourne <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><msup><mn>2</mn><mi>n</mi></msup><annotation encoding="application/x-tex">2^n</annotation></semantics></math>.</p>
<p>Un traitement par une boucle <code>for</code> serait <em>(programmation impérative)</em>.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> puissance2(n: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb3-2">    puissance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n):</span>
<span id="cb3-4">        puissance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> puissance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb3-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> puissance</span></code></pre></div>
<pre><code>&gt;&gt;&gt; puissance2(8)
256</code></pre>
<p>Cette fonction peut-être définie par une fonction récursive car:</p>
<ul>
<li>Le cas récursif est: <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup><mo>=</mo><mn>2</mn><mo>*</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">2^n = 2 * 2^{n-1}</annotation></semantics></math></li>
<li>Le cas de base est: <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>0</mn></msup><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^0 = 1</annotation></semantics></math></li>
</ul>
<p>Voici donc la fonction récursive:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> puissance_recursive(exposant):</span>
<span id="cb5-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># cas de base</span></span>
<span id="cb5-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> exposant <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb5-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb5-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># appel recursif</span></span>
<span id="cb5-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> puissance_recursive(exposant <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> )</span>
<span id="cb5-7"></span>
<span id="cb5-8">puissance_3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> puissance_recursive(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
</div>
<div class="plus">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
En plus: Correction de l'algorithme récursif
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="plus" data-titre="Correction de l'algorithme récursif">
<p>Nous pouvons démontrer la <strong>correction</strong> <em>(validité)</em> de cet algorithme, pour cela nous allons prouver par récurrence que <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mi>u</mi><mi>i</mi><mi>s</mi><mi>s</mi><mi>a</mi><mi>n</mi><mi>c</mi><msub><mi>e</mi><mi>r</mi></msub><mi>e</mi><mi>c</mi><mi>u</mi><mi>r</mi><mi>s</mi><mi>i</mi><mi>v</mi><mi>e</mi><mrow><mo stretchy="true" form="prefix">(</mo><mi>n</mi><mo stretchy="true" form="postfix">)</mo></mrow><mo>=</mo><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">puissance_recursive(n) = 2^n</annotation></semantics></math>.</p>
<ul>
<li><strong>Initialisation:</strong> pour <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><mi>x</mi><mi>p</mi><mi>o</mi><mi>s</mi><mi>a</mi><mi>n</mi><mi>t</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">exposant = 0</annotation></semantics></math>, <code>puissance_recursive(0)</code> vaut 1 qui est bien égal à <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><msup><mn>2</mn><mn>0</mn></msup><annotation encoding="application/x-tex">2^0</annotation></semantics></math>.</li>
<li><strong>Conservation:</strong> si <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mi>u</mi><mi>i</mi><mi>s</mi><mi>s</mi><mi>a</mi><mi>n</mi><mi>c</mi><msub><mi>e</mi><mi>r</mi></msub><mi>e</mi><mi>c</mi><mi>u</mi><mi>r</mi><mi>s</mi><mi>i</mi><mi>v</mi><mi>e</mi><mrow><mo stretchy="true" form="prefix">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="true" form="postfix">)</mo></mrow><mo>=</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">puissance_recursive(n-1) = 2^{n-1}</annotation></semantics></math> alors <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mi>u</mi><mi>i</mi><mi>s</mi><mi>s</mi><mi>a</mi><mi>n</mi><mi>c</mi><msub><mi>e</mi><mi>r</mi></msub><mi>e</mi><mi>c</mi><mi>u</mi><mi>r</mi><mi>s</mi><mi>i</mi><mi>v</mi><mi>e</mi><mrow><mo stretchy="true" form="prefix">(</mo><mi>n</mi><mo stretchy="true" form="postfix">)</mo></mrow><mo>=</mo><mn>2</mn><mo>×</mo><mi>p</mi><mi>u</mi><mi>i</mi><mi>s</mi><mi>s</mi><mi>a</mi><mi>n</mi><mi>c</mi><msub><mi>e</mi><mi>r</mi></msub><mi>e</mi><mi>c</mi><mi>u</mi><mi>r</mi><mi>s</mi><mi>i</mi><mi>v</mi><mi>e</mi><mrow><mo stretchy="true" form="prefix">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="true" form="postfix">)</mo></mrow><mo>=</mo><mn>2</mn><mo>×</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">puissance_recursive(n) = 2
\times puissance_recursive(n-1) = 2\times2^{n-1}=2^n</annotation></semantics></math>.</li>
<li><strong>Terminaison:</strong> L’algorithme se termine, car à chaque tour de boucle <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mi>n</mi><annotation encoding="application/x-tex">n</annotation></semantics></math> diminue de 1 et on finit par arriver au <code>return</code> du cas terminal lorsque <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">n=0</annotation></semantics></math> <strong>à condition d’avoir donné au paramètre <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mi>n</mi><annotation encoding="application/x-tex">n</annotation></semantics></math> une valeur positive à l’appel de la fonction.</strong></li>
</ul>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="pile-dexécution" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="pile-dexécution"><span class="header-section-number">3</span> Pile d’exécution</h2>
<p>Bien que la gestion de la mémoire soit «cachée» au programmeur en Python, qu’il existe deux façons d’allouer de la mémoire à un programme lors de son exécution (on parle d’allocation dynamique).</p>
<ul>
<li>Le <a href="https://fr.wikipedia.org/wiki/Tas_(allocation_dynamique)">tas</a> <em>(heap en anglais)</em> est un segment de mémoire que l’on peut faire grandir ou rétrécir à la demande.</li>
<li>L’autre segment de mémoire utilisé est la <a href="https://fr.wikipedia.org/wiki/Pile_d%27ex%C3%A9cution">pile d’exécution</a> <em>(call stack)</em>. La pile sert à enregistrer des informations au sujet des fonctions actives dans un programme informatique, c’est celle qui nous intéresse ici.</li>
</ul>
<blockquote class="blockquote">
<p>Étant donné que la pile d’exécution est une pile, l’appelant pousse l’adresse de retour sur la pile, et la fonction appelée, quand elle se termine, récupère l’adresse de retour au sommet de la pile d’exécution (et y transfère le contrôle). Si une fonction appelée appelle une autre fonction, elle poussera son adresse de retour sur la pile d’exécution. Les adresses de retour s’accumulent donc sur la pile d’exécution et sont récupérées une à une lors de la fin de l’exécution des fonctions. Si l’accumulation des adresses de retour consomme tout l’espace alloué à la pile d’exécution, un message d’erreur appelé un dépassement de pile se produit.</p>
</blockquote>
<p><a href="https://fr.wikipedia.org/wiki/Pile_d%27ex%C3%A9cution" class="cite-source">Article Wikipédia sur la pile d’exécution</a></p>
<p>Pour bien comprendre comment fonctionne la pile d’exécution, on peut exécuter la fonction <code>puissance_recursive</code> pas à pas sur <a href="http://pythontutor.com/visualize.html#code=def%20puissance_recursive%28exposant%29%3A%0A%20%20%20%20%23%20cas%20de%20base%0A%20%20%20%20if%20exposant%20%3D%3D%200%3A%0A%20%20%20%20%20%20%20%20return%201%0A%20%20%20%20%23%20appel%20recursif%0A%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20return%202%20*%20puissance_recursive%28exposant%20-%201%20%29%0A%0Apuissance_3%20%3D%20puissance_recursive%283%29&amp;cumulative=false&amp;curInstr=0&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=3&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false">pythontutor</a>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><picture>
			  <source type="image/webp" srcset="/img/ihRAKYbYAy-300.webp 300w, /img/ihRAKYbYAy-600.webp 600w, /img/ihRAKYbYAy-1059.webp 1059w" sizes="100vw">
  <source type="image/gif" srcset="/img/ihRAKYbYAy-300.gif 300w, /img/ihRAKYbYAy-600.gif 600w, /img/ihRAKYbYAy-1059.gif 1059w" sizes="100vw">
				<img class="img-fluid figure-img" src="https://www.lyceum.fr/2023-2024/img/ihRAKYbYAy-300.webp" width="1059" height="453" alt="" loading="lazy" decoding="async">
			</picture>
</p>
<figcaption>Animation appel récursif sur python tutor</figcaption>
</figure>
</div>
<p>Sur cette animation la pile est «à l’envers»!</p>
</section>
<section id="efficacité-des-algorithmes-récursifs" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="efficacité-des-algorithmes-récursifs"><span class="header-section-number">4</span> Efficacité des algorithmes récursifs</h2>
<p>L’écriture d’algorithmes récursifs peut-être très élégante et concise, cependant elle peut avoir des conséquences très néfastes sur leur efficacité. La taille de la pile peut croitre au-dessus des limites de la mémoire, ou encore certains calculs identiques peuvent être réalisés plusieurs fois.</p>
<p>Nous allons voir comment l’utilisation d’un <em>accumulateur</em> peut permettre de passer des valeurs d’un appel à un autre lors de la récursion.</p>
<div class="example">
<p>Voici donc la fonction récursive puissance modifiée avec un deuxième paramètre <code>acc</code> ayant pour valeur par défaut 1, et qui <em>accumulera</em> le résultat des multiplications lors des appels récursifs.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> puissance_rec_acc(exposant, acc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb6-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># cas de base</span></span>
<span id="cb6-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> exposant <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb6-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> acc</span>
<span id="cb6-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># appel recursif</span></span>
<span id="cb6-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> puissance_rec_acc(exposant <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>acc )</span>
<span id="cb6-7">puissance_rec_acc(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
<p>Nous n’avons pas modifié la hauteur de la pile, mais on a modifié l’ordre des opérations effectuées. Les multiplications sont effectuées lors de l’empilement au lieu du dépilement précédemment.</p>
<p>Nous pouvons visualiser l’exécution de cet algorithme sur <a href="https://pythontutor.com/visualize.html#code=def%20puissance_rec_acc%28exposant,%20acc%3D1%29%3A%0A%20%20%20%20%23%20cas%20de%20base%0A%20%20%20%20if%20exposant%20%3D%3D%200%3A%0A%20%20%20%20%20%20%20%20return%20acc%0A%20%20%20%20%23%20appel%20recursif%0A%20%20%20%20return%20puissance_rec_acc%28exposant%20-%201,%202*acc%20%29%0A%0Apuissance_rec_acc%283%29&amp;cumulative=false&amp;curInstr=0&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=3&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false">pythontutor</a>.</p>
<p><picture>
			  <source type="image/webp" srcset="/img/aSvuRPcehv-300.webp 300w, /img/aSvuRPcehv-600.webp 600w, /img/aSvuRPcehv-1069.webp 1069w" sizes="100vw">
  <source type="image/gif" srcset="/img/aSvuRPcehv-300.gif 300w, /img/aSvuRPcehv-600.gif 600w, /img/aSvuRPcehv-1069.gif 1069w" sizes="100vw">
				<img class="img-fluid" src="https://www.lyceum.fr/2023-2024/img/aSvuRPcehv-300.webp" width="1069" height="554" alt="" loading="lazy" decoding="async">
			</picture>
</p>
</div>
<p>L’utilisation d’un accumulateur est parfois indispensable comme dans les exercices 5 et 6, voire indispensable comme dans le calcul des termes de Fibonacci de grand ordre(exercice 7).</p>
<div class="ref">
<ul>
<li><a href="http://www.editions-eyrolles.com/Livre/9782212135435/">Informatique et sciences du numérique Spécialité ISN en terminale S - Avec des exercices corrigés et des idées de projets par Gilles Dowek</a></li>
<li><a href="http://www.editions-eyrolles.com/Livre/9782212137002/informatique-pour-tous-en-classes-preparatoires-aux-grandes-ecoles">Informatique pour tous en classes préparatoires aux grandes écoles de Benjamin Wack</a></li>
</ul>
</div>


</section>

 ]]></description>
  <category>TNSI</category>
  <guid>https://www.lyceum.fr/2023-2024/tg/nsi/4-langages-et-programmation/3-fonctions-recursives/</guid>
  <pubDate>Thu, 16 May 2024 13:21:00 GMT</pubDate>
</item>
<item>
  <title>Chapitre 4: Paradigmes de programmation*</title>
  <link>https://www.lyceum.fr/2023-2024/tg/nsi/4-langages-et-programmation/4-paradigmes-de-programmation/</link>
  <description><![CDATA[ 




<p><strong>Ce chapitre ne pourra pas faire l’objet d’une évaluation lors de l’épreuve terminale écrite et pratique de l’enseignement de spécialité.</strong> <a href="https://www.education.gouv.fr/bo/21/Hebdo30/MENE2121274N.htm" class="cite-source">BO MENE2121274N</a></p>
<div class="programme">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Programme
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="programme">
<table class="table table-bordered table-hover">
<thead class="table-warning">
<tr class="header">
<th>Contenus</th>
<th>Capacités attendues</th>
<th>Commentaires</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Paradigmes de programmation.</td>
<td>Distinguer sur des exemples les paradigmes impératif, fonctionnel et objet.</td>
<td>Choisir le paradigme de programmation selon le champ d’application d’un programme. Avec un même langage de programmation, on peut utiliser des paradigmes différents. Dans un même programme, on peut utiliser des paradigmes différents.</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</div>
<blockquote class="blockquote">
<p>La création du premier programme informatique par Ada Lovelace sur la machine de Babbage en 1842 a permis de formaliser les <a href="../../../../1g/nsi/7-langages-et-programmation/1-les-ingredients-dun-algorithme">ingrédients des algorithmes</a> tels que nous les connaissons: affectations, boucles, conditions Cependant, maintenant que l’informatique est présente dans très nombreux domaines, il s’est avéré nécessaire d’adapter la programmation aux problèmes à traiter. Ces approches appelées <em>paradigmes de programmation</em> fournissent au développeur une vue différente de la façon dont s’éxecute le programme, la <a href="../../../../tg/nsi/1-structures-de-donnees/2-programmation-objet">programmation orientée objet</a> en est un exemple bien connu.</p>
</blockquote>
<section id="les-trois-grands-types-de-programmation" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="les-trois-grands-types-de-programmation"><span class="header-section-number">1</span> Les trois grands types de programmation</h2>
<p>Il existe trois grands types de programmation :</p>
<ul>
<li>La programmation <strong>impérative</strong>: le paradigme originel est le plus courant.</li>
<li>La programmation <strong>orientée objet</strong>(POO) consistant en la définition et l’assemblage de briques logicielles appelées objets.</li>
<li>La programmation <em>déclarative</em> consistant à déclarer les données du problème, puis à demander au programme de le résoudre. La programmation <strong>fonctionnelle</strong> en est un exemple représentatif dans lequel le résultat souhaité est déclaré comme la valeur d’une série d’applications de fonctions.</li>
</ul>
<p>Même si certains langages forcent à utiliser un paradigme de programmation (ex: Smalltalk: POO, Haskell: fonctionnnelle), de nombreux langages modernes comme Python (ou Javascript) sont multiparadigmes et permettent la programmation impérative structurée, fonctionnelle et orientée objet; laissant ainsi le choix au programmeur du paradigme à utiliser en fonction du problème posé.</p>
</section>
<section id="exemples-dapproches-en-python" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="exemples-dapproches-en-python"><span class="header-section-number">2</span> Exemples d’approches en Python</h2>
<p>Pour illustrer les différences entre ces paradigmes, nous allons utiliser un exemple très simple issu de <a href="https://opensource.com/article/19/10/python-programming-paradigms">opensource.com</a>.</p>
<p>On a une liste de caractères que nous souhaitons concaténer en une chaine de caractères.</p>
<pre><code>ENTREE: entrée = ['p','y','t','h','o','n']
SORTIE: sortie = 'python'</code></pre>
<section id="programmation-impérative-le-comment" class="level3" data-number="2.1">
<h3 data-number="2.1" class="anchored" data-anchor-id="programmation-impérative-le-comment"><span class="header-section-number">2.1</span> Programmation impérative : <em>le comment</em></h3>
<p>La programmation impérative est un paradigme de programmation qui décrit les opérations en séquences d’instructions exécutées par l’ordinateur pour modifier l’état du programme.</p>
<p>La programmation impérative se concentre sur la description du fonctionnement d’un programme : <strong>le comment</strong>.</p>
<p>La plupart des langages de haut niveau comporte cinq types d’instructions principales :</p>
<ul>
<li>la séquence d’instructions</li>
<li>l’assignation ou affectation</li>
<li>l’instruction conditionnelle(<code>if</code>, <code>else</code>)</li>
<li>la boucle(<code>for</code>, <code>while</code>)</li>
<li>les branchements(<code>GOTO</code> p.ex)</li>
</ul>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1">entrée <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'p'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'t'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'h'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'n'</span>]</span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on initialise une chaine vide pour la sortie</span></span>
<span id="cb2-3">sortie <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># On concatène à l'aide d'une boucle</span></span>
<span id="cb2-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> entrée:</span>
<span id="cb2-6">     sortie <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sortie <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c</span>
<span id="cb2-7"> </span>
<span id="cb2-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(sortie)</span>
<span id="cb2-9">python</span></code></pre></div>
<p>Ce type de programmation est le plus ancien et utilisé, il est facile à comprendre, souvent efficace car proche des instructions réalisés par les processeurs. Par contre, il est assez difficile à tester car l’état du programme ne cesse de changer et il est difficile de tester une petite partie du programme au milieu de son exécution par exemple car elle ne nécessite que toutes les instructions précédentes aient déjà été appliquées correctement.</p>
</section>
<section id="programmation-fonctionnelle-le-quoi" class="level3" data-number="2.2">
<h3 data-number="2.2" class="anchored" data-anchor-id="programmation-fonctionnelle-le-quoi"><span class="header-section-number">2.2</span> Programmation fonctionnelle : <em>le quoi</em></h3>
<p>En programmation fonctionnelle <strong>on décrit les résultats que l’on veut obtenir à partir des données</strong> plutôt que la séquence d’instructions qui permettent d’obtenir les résultats <em>(c’est un paradigme déclaratif)</em>.</p>
<p>L’approche fonctionnelle considère le calcul en tant qu’évaluation de <strong>fonctions</strong> mathématiques. Vous donnez vos données en entrée aux fonctions, qui vous renvoient les valeurs calculées en sortie.</p>
<p>L’utilisation massive de fonctions a amené à la création d’une syntaxe raccourcie pour la définition de fonctions anonymes, les fonctions <code>lambda</code>s :</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> param1, ... , paramN: valeur_retournée</span></code></pre></div>
<p>Au lieu de:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> ma_fonction(param1, ... , paramN):</span>
<span id="cb4-2">    ...</span>
<span id="cb4-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> valeur_retournée</span></code></pre></div>
<p>En programmation fonctionnelle, <strong>il n’y a pas d’état</strong>, l’<em>opération d’affectation est interdite</em>, ce qui permet de s’affranchir des effets secondaires (ou effets de bord).</p>
<p>Ceci rend les programmes parfaitement prédictibles, faciles à tester et à paralléliser, par contre il est souvent compliqué de se débarrasser complétement de l’état du programme.</p>
<p>Comme vu dans le chapitre précédent, en programmation fonctionnelle, on remplace souvent les boucles par des <a href="../4-recursivite">fonctions récursives</a>. Une approche fonctionnelle par la récursion de notre problème pourrait être :</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1">entrée <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'p'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'t'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'h'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'n'</span>]</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> list_to_string(ma_liste, ma_chaine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>):</span>
<span id="cb5-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Fonction récursive pour concaténer les éléments d'une liste"""</span></span>
<span id="cb5-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> ma_liste:</span>
<span id="cb5-6">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on enlève le premier élement de la liste</span></span>
<span id="cb5-7">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># qu'on ajoute à la chaine de caractères</span></span>
<span id="cb5-8">        ma_chaine <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> ma_liste.pop(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb5-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># application récursive</span></span>
<span id="cb5-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> list_to_string(ma_liste, ma_chaine)</span>
<span id="cb5-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb5-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># cas de base</span></span>
<span id="cb5-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> ma_chaine</span>
<span id="cb5-14">    </span>
<span id="cb5-15">    </span>
<span id="cb5-16">list_to_string(entrée)</span></code></pre></div>
<div class="plus">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
En plus: filter, map, reduce
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="plus" data-titre="filter, map, reduce">
<p>Parmi les fonctions les plus représentatives de la programmation fonctionnelle, on trouve: <code>filter</code>, <code>map</code> et <code>reduce</code> (voir <a href="http://sametmax.com/map-filter-et-reduce/">ici</a> pour plus de détails).</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on importe le module functools qui comporte </span></span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># les utilitaires de programmation fonctionnelle</span></span>
<span id="cb6-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> functools</span>
<span id="cb6-4">entrée <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'p'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'t'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'h'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'n'</span>]</span>
<span id="cb6-5"></span>
<span id="cb6-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on concatène avec la méthode reduce</span></span>
<span id="cb6-7">sortie <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> functools.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reduce</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> s, c: s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c, entrée)</span>
<span id="cb6-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(sortie)</span>
<span id="cb6-9">python</span></code></pre></div>
<p>On utilise ici <code>reduce</code> une <a href="https://fr.wikipedia.org/wiki/Fonction_d%27ordre_sup%C3%A9rieur">fonction d’ordre supérieur</a> très utilisée en programmation fonctionnelle. Cette fonction applique une fonction de deux arguments de manière cumulative aux éléments en séquence, de gauche à droite, pour réduire la séquence à une seule valeur. Par exemple:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1">sample_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span>
<span id="cb7-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> functools</span>
<span id="cb7-3">somme <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> functools.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reduce</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> x, y: x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y, sample_list)</span>
<span id="cb7-4">somme</span>
<span id="cb7-5"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span></span>
<span id="cb7-6">((((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb7-7"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span></span></code></pre></div>
<p>Pour plus de méthodes fonctionnelles, consulter la documentation du module <a href="https://docs.python.org/3/library/functools.html"><code>functools</code></a> qui est utilisé pour des fonctions de haut niveau : des fonctions qui agissent sur ou revoient d’autres fonctions.</p>
<p>Une implémentation et des exemples d’utilisation des fonctions <code>filter</code>, <code>map</code>, <code>reduce</code> est proposée en <a href="./exo">exercice</a>.</p>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="programmation-objet-poo" class="level3" data-number="2.3">
<h3 data-number="2.3" class="anchored" data-anchor-id="programmation-objet-poo"><span class="header-section-number">2.3</span> Programmation objet: <em>POO</em></h3>
<p>La POO consiste en la définition et l’interaction de <strong>briques logicielles appelées objets</strong>; un objet représente un concept, une idée ou toute entité du monde physique, comme une voiture, une personne ou encore une page d’un livre.</p>
<p>Un objet possède:</p>
<ul>
<li>des données: ses <strong>attributs</strong> et</li>
<li>des fonctions: ses <strong>méthodes</strong></li>
</ul>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> ListeLettres:</span>
<span id="cb8-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"Classe permettant de lier une chaîne de caractères à une liste de caractères"</span></span>
<span id="cb8-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, lettres<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[]):</span>
<span id="cb8-4">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Intialisation de l'objet</span></span>
<span id="cb8-5"></span>
<span id="cb8-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Paramètres</span></span>
<span id="cb8-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ----------</span></span>
<span id="cb8-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        lettres: list</span></span>
<span id="cb8-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            liste des caractères vide par défaut</span></span>
<span id="cb8-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span>    </span>
<span id="cb8-11">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialisation des attributs de l'objet</span></span>
<span id="cb8-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lettres <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lettres</span>
<span id="cb8-13">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Conversion en chaine de caractères</span></span>
<span id="cb8-14">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.string <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>.join(lettres)</span>
<span id="cb8-15"></span>
<span id="cb8-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># définition d'une méthode</span></span>
<span id="cb8-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_string(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb8-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.string</span>
<span id="cb8-19"> </span>
<span id="cb8-20">entrée <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'p'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'t'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'h'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'n'</span>]</span>
<span id="cb8-21"></span>
<span id="cb8-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># instanciation de l'objet avec les données de la liste</span></span>
<span id="cb8-23">objet_py <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ListeLettres(entrée)</span>
<span id="cb8-24"></span>
<span id="cb8-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># récupération de l'attribut string de l'objet</span></span>
<span id="cb8-26">objet_py.string <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># renvoie 'python'</span></span>
<span id="cb8-27"></span>
<span id="cb8-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># récupération de l'attribut string grâce à la méthode get_string (préféré)</span></span>
<span id="cb8-29">objet_py.get_string() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># renvoie 'python'</span></span></code></pre></div>
<p>Les différents principes de la conception orientée objet aident à la réutilisation du code, au masquage des données, etc., mais c’est une bête complexe, et comprendre toute la logique des objets et de leurs interactions est délicat et souvent difficile à tester en raison de ces interdépendances.</p>
<p>Nous aborderons plus en détail la <a href="../../../../tg/nsi/1-structures-de-donnees/2-programmation-objet">programmation orientée objet</a> au prochain chapitre.</p>
</section>
</section>
<section id="comment-choisir-le-paradigme-à-utiliser" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="comment-choisir-le-paradigme-à-utiliser"><span class="header-section-number">3</span> Comment choisir le paradigme à utiliser?</h2>
<blockquote class="blockquote">
<p>Pour simplifier, si votre problème implique une série de manipulations séquentielles simples, suivre le paradigme de <strong>programmation impérative</strong> de la vieille école serait le moins cher en termes de temps et d’efforts et vous donnerait potentiellement les meilleures performances.</p>
</blockquote>
<blockquote class="blockquote">
<p>Dans le cas de problèmes nécessitant des transformations mathématiques des valeurs, le filtrage des informations, le mappage( transformer une liste en une autre) et les réductions( transformer une liste en une valeur), la <strong>programmation fonctionnelle</strong> pourrait être adaptée.</p>
</blockquote>
<blockquote class="blockquote">
<p>Si le problème est structuré comme un tas d’objets interdépendants avec certains attributs qui peuvent changer avec le temps, en fonction de certaines conditions, la <strong>programmation orientée objet</strong> sera certainement la plus naturelle.</p>
</blockquote>
<blockquote class="blockquote">
<p>Bien sûr, il n’y a pas de règle simple, car le choix du paradigme de programmation dépend également fortement du type de données à traiter, des connaissances des programmeurs et de diverses autres choses comme l’évolutivité.</p>
</blockquote>
<p><a href="https://opensource.com/article/19/10/python-programming-paradigms" class="cite-source">Perceiving Python programming paradigms</a></p>
<div class="ref">
<ul>
<li><a href="https://fr.wikipedia.org/wiki/Paradigme_(programmation)">Article Wikipedia sur les paradigmes de programmation</a></li>
<li><a href="https://opensource.com/article/19/10/python-programming-paradigms">Perceiving Python programming paradigms</a></li>
</ul>
</div>


</section>

 ]]></description>
  <category>TNSI</category>
  <guid>https://www.lyceum.fr/2023-2024/tg/nsi/4-langages-et-programmation/4-paradigmes-de-programmation/</guid>
  <pubDate>Thu, 16 May 2024 13:21:00 GMT</pubDate>
</item>
<item>
  <title>Chapitre 5: Notion de programme*</title>
  <link>https://www.lyceum.fr/2023-2024/tg/nsi/4-langages-et-programmation/5-notion-de-programme/</link>
  <description><![CDATA[ 




<p><strong>Ce chapitre ne pourra pas faire l’objet d’une évaluation lors de l’épreuve terminale écrite et pratique de l’enseignement de spécialité.</strong> <a href="https://www.education.gouv.fr/bo/21/Hebdo30/MENE2121274N.htm" class="cite-source">BO MENE2121274N</a></p>
<div class="programme">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Programme
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="programme">
<table class="table table-bordered table-hover">
<thead class="table-warning">
<tr class="header">
<th>Contenus</th>
<th>Capacités attendues</th>
<th>Commentaires</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><p>Notion de programme en tant que donnée.</p>
<p>Calculabilité, décidabilité.</p></td>
<td><p>Comprendre que tout programme est aussi une donnée.</p>
<p>Comprendre que la calculabilité ne dépend pas du langage de programmation utilisé.</p>
<p>Montrer, sans formalisme théorique, que le problème de l’arrêt est indécidable.</p></td>
<td>L’utilisation d’un interpréteur ou d’un compilateur, le téléchargement de logiciel, le fonctionnement des systèmes d’exploitation permettent de comprendre un programme comme donnée d’un autre programme.</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</div>
<blockquote class="blockquote">
<p>Comme nous l’avons vu en première, un programme est la traduction électronique d’un algorithme afin qu’il puisse être compris par une machine. Dans ce chapitre, nous allons montrer qu’un programme ne peut pas tout calculer ou décider.</p>
</blockquote>
<section id="notion-de-programme-en-tant-que-donnée" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="notion-de-programme-en-tant-que-donnée"><span class="header-section-number">1</span> Notion de programme en tant que donnée</h2>
<p>Certains programmes utilisent comme données le code source d’autres programmes.</p>
<div class="examples">
<ul>
<li>un système d’exploitation(linux p.ex) est un programme qui éxecute d’autres programmes(traitement de textes p.ex).</li>
<li>l’interpréteur Python, est un programme qui traduit le code source de votre programme Python en instructions exécutables par machine: du <a href="../../../../1g/nsi/6-architectures-materielles-et-systemes-dexploitation/2-jeu-dinstructions-du-processeur">langage machine</a>.</li>
</ul>
</div>
</section>
<section id="calculabilité" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="calculabilité"><span class="header-section-number">2</span> Calculabilité</h2>
<p>La notion de calculabilité date de 1936, il s’agit de savoir ce qui peut être calculé par un ordinateur, et donc permet de voir les <strong>limites des problèmes</strong> que peuvent résoudre les ordinateurs.</p>
<div class="prop">
<p>On dira qu’une fonction est <strong>calculable</strong> si elle peut être programmée dans l’un ou l’autre des langages de programmation usuels. Cette année, nous utiliserons le langage Python comme témoin : une fonction est calculable si on peut la programmer en Python.</p>
</div>
<div class="plus">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
En plus
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="plus">
<p>Il existe d’autres modèles de calcul, comme le λ-calcul, les fonctions récursives, les machines de Turing, que nous ne développerons pas ici, et qui ne font pas partie des attendus du programme.</p>
<p>La thèse de Church postule que tous ces modèles de calcul sont équivalents : une fonction calculable pour un modèle l’est pour un autre. Cela nous permet d’utiliser le modèle des fonctions programmables en Python sans perdre de généralité.</p>
</div>
</div>
</div>
</div>
</div>
<p><a href="https://cache.media.eduscol.education.fr/file/NSI/63/6/RA20_NSI_G_T_calculabilite_1298636.pdf" class="cite-source">Calculabilité et décidabilité sur eduscol</a></p>
<p>On peut calculer beaucoup de choses avec un ordinateur comme le nombre <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mi>π</mi><annotation encoding="application/x-tex">\pi</annotation></semantics></math>, les nombres rationnels <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><msqrt><mn>2</mn></msqrt><annotation encoding="application/x-tex">\sqrt{2}</annotation></semantics></math>, <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><msqrt><mn>3</mn></msqrt><annotation encoding="application/x-tex">\sqrt{3}</annotation></semantics></math>…</p>
<p>Par contre, il a été prouvé que certains problèmes n’étaient pas calculables comme par exemple :</p>
<ul>
<li>Savoir si un énoncé mathématique est un théorème ou pas_(s’il peut être démontré)_.</li>
<li>Créer un programme qui prend un programme en entrée, et qui indiquera si le programme s’arrête ou pas : le problème de l’arrêt.</li>
</ul>
<p>Il s’agit de problèmes de <strong>décidabilité</strong>.</p>
</section>
<section id="décidabilité" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="décidabilité"><span class="header-section-number">3</span> Décidabilité</h2>
<dl>
<dt>
décidabilité
</dt>
<dd>
<div>
<p>Un problème de décision est dit décidable s’il existe un algorithme, une procédure mécanique qui se termine en un nombre fini d’étapes, qui le décide, c’est-à-dire qui réponde par oui ou par non à la question posée par le problème. S’il n’existe pas de tels algorithmes, le problème est dit indécidable. Par exemple, le problème de l’arrêt est indécidable.</p>
<p><a href="https://fr.wikipedia.org/wiki/D%C3%A9cidabilit%C3%A9#D%C3%A9finition" class="cite-source">Article Wikipédia sur la décidabilité</a></p>
</div>
</dd>
</dl>
<section id="exemples-de-problèmes-décidables" class="level3" data-number="3.1">
<h3 data-number="3.1" class="anchored" data-anchor-id="exemples-de-problèmes-décidables"><span class="header-section-number">3.1</span> Exemples de problèmes décidables</h3>
<p>Tous les sous-ensembles finis des entiers sont décidables, par exemple:</p>
<ul>
<li>Décider si un entier naturel est pair ou non;</li>
<li>décider si un entier naturel est premier ou non.</li>
</ul>
<div class="plus">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
En plus: Décidable ne signifie pas résolvable
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="plus" data-titre="Décidable ne signifie pas résolvable">
<p>Notons qu’un ensemble peut être théoriquement décidable sans qu’en pratique la décision puisse être faite, parce que celle-ci nécessiterait trop de temps (plus que l’âge de l’univers) ou trop de ressources (plus que le nombre d’atomes de l’univers). L’objet de la théorie de la complexité des algorithmes est d’étudier les problèmes de décision en prenant en compte ressources et temps de calcul.</p>
<p><a href="https://fr.wikipedia.org/wiki/D%C3%A9cidabilit%C3%A9#Exemples_d'ensembles_et_de_probl%C3%A8mes_d%C3%A9cidables" class="cite-source">Article Wikipédia sur la décidabilité</a></p>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="exemple-de-problème-indécidable-le-problème-de-larrêt" class="level3" data-number="3.2">
<h3 data-number="3.2" class="anchored" data-anchor-id="exemple-de-problème-indécidable-le-problème-de-larrêt"><span class="header-section-number">3.2</span> Exemple de problème indécidable : le problème de l’arrêt</h3>
<p>L’indécidabilité du problème de l’arrêt a été démontrée par Alan Turing en 1936.</p>
<p>On peut l’interpréter ainsi : il n’existe pas de programme permettant de tester n’importe quel programme informatique afin de conclure dans tous les cas s’il s’arrêtera en un temps fini ou bouclera à jamais.</p>
<p><strong>Preuve par l’absurde de non-décidabilité de l’arrêt</strong></p>
<p>Supposons qu’il existe une fonction calculable <code>termine(programme, données)</code> qui prend 2 arguments :</p>
<ul>
<li>un programme</li>
<li>des données d’entrée pour ce programme</li>
</ul>
<p>et qui renverra <code>True</code> si le programme termine et <code>False</code> s’il entre dans une boucle infinie.</p>
<div class="examples">
<ul>
<li>en utilisant la fonction <code>est_pair()</code> définie dans la partie <a href="./exo">exercice</a></li>
</ul>
<p><code>termine(est_pair, 128)</code> ou <code>termine(est_pair, 127)</code> renverraient <code>True</code>.</p>
<ul>
<li>une fonction définie ainsi :</li>
</ul>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> est_positif(n):</span>
<span id="cb1-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb1-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb1-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb1-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb1-6">            n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># boucle infinie</span></span>
<span id="cb1-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span></code></pre></div>
<p>entrainerait une boucle infinie pour les nombres négatifs, et on aurait :</p>
<p><code>termine(est_positif, 128)</code> renvoie <code>True</code> alors que <code>termine(est_positif, -2)</code> renverrait <code>False</code> non pas car -2 n’est pas positif mais parce que l’appel <code>positif(-2)</code> ne se terminerait jamais.</p>
</div>
<p>Définissons une fonction <code>test_sur_soi</code>.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> test_sur_soi(programme):</span>
<span id="cb2-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> termine(programme, programme):</span>
<span id="cb2-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>: <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># boucle infinie</span></span></code></pre></div>
<p>On obtient alors une contradiction si on appelle <code>test_sur_soi</code> sur elle-même :</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1">test_sur_soi(test_sur_soi)</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># l'appel éxecutera l'algorithme suivant</span></span>
<span id="cb3-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> termine(test_sur_soi, test_sur_soi):</span>
<span id="cb3-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>: <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span></code></pre></div>
<p>On arrive au paradoxe suivant :</p>
<p><img src="https://latex.codecogs.com/png.latex?$$%0A%7B%5Cdisplaystyle%20%7B%5Cit%20%7B%7Btest%5C_sur%5C_soi%7D(%7B%5Cit%20%7B%7Btest%5C_sur%5C_soi%7D)%7B%5Ctext%7B%20termine%7D%7D%5Ciff%20%7B%5Cit%20%7B%7Btest%5C_sur%5C_soi%7D(%7B%5Cit%20%7B%7Btest%5C_sur%5C_soi%7D)%7B%5Ctext%7B%20boucle%20ind%C3%A9finiment%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%0A$$"></p>


</section>
</section>

 ]]></description>
  <category>TNSI</category>
  <guid>https://www.lyceum.fr/2023-2024/tg/nsi/4-langages-et-programmation/5-notion-de-programme/</guid>
  <pubDate>Thu, 16 May 2024 13:21:00 GMT</pubDate>
</item>
<item>
  <title>Chapitre 0: Rappels</title>
  <link>https://www.lyceum.fr/2023-2024/tg/nsi/5-algorithmique/0-rappels/</link>
  <description><![CDATA[ 




<div class="programme">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Programme
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="programme">
<p>Révisions de <a href="../../../../1g/nsi/programme/index.html">première</a>:</p>
<ul>
<li>Algorithmes de recherche: recherche en table, recherche dichotomique.</li>
<li>Complexité d’un algorithme, notation grand O. Complexité linéaire, quadratique et logarithmique.</li>
<li>Algorithmes de tri: tri par sélection, tri par insertion.</li>
<li>Correction d’un algorithme, invariant de boucle.</li>
</ul>
</div>
</div>
</div>
</div>
</div>
<blockquote class="blockquote">
<p>Nous allons revoir quelques définitions importantes de première en s’appuyant sur les algorithmes classiques de recherche et de tris.</p>
</blockquote>
<section id="algorithme-naïf-de-recherche-la-recherche-en-table" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="algorithme-naïf-de-recherche-la-recherche-en-table"><span class="header-section-number">1</span> Algorithme naïf de recherche: la recherche en table</h2>
<p>Pour rechercher un élément dans une table on pourrait simplement parcourir tout simplement le tableau jusqu’à rencontrer la valeur recherché. C’est ce que l’on appelle la <a href="../../../../1g/nsi/8-algorithmique/1-parcours-sequentiel-dun-tableau/#la-recherche-en-table">recherche en table</a>.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> recherche(liste, élément):</span>
<span id="cb1-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Recherche d'un élément dans une liste</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Arguments</span></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ---------</span></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    liste: liste d'entiers</span></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    élément: entier</span></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        l'élément cherché</span></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    int: l'indice de l'élément si trouvé ou -1 sinon</span></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb1-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(liste)):</span>
<span id="cb1-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> liste[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> élément:</span>
<span id="cb1-17">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># l'élément est trouve</span></span>
<span id="cb1-18">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> i</span>
<span id="cb1-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># non trouvé</span></span>
<span id="cb1-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-21"></span>
<span id="cb1-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Quelques tests</span></span>
<span id="cb1-23"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> recherche([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-24"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> recherche([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-25"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> recherche([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
<p>Même si cet algorithme simple semble faire le travail, il n’est en pratique pas du tout utiliser, car <strong>il n’est pas du tout efficace</strong>.</p>
<p>Pour mesurer l’efficacité d’un algorithme, on utilise la notion de <strong>complexité</strong>.</p>
</section>
<section id="notion-de-complexité" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="notion-de-complexité"><span class="header-section-number">2</span> Notion de complexité</h2>
<p>Si je donne à mon programme une entrée de taille <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mi>N</mi><annotation encoding="application/x-tex">N</annotation></semantics></math>. Quel est l’ordre de grandeur, en fonction de <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mi>N</mi><annotation encoding="application/x-tex">N</annotation></semantics></math>, du nombre d’opérations qu’il va effectuer ?</p>
<dl>
<dt>
Complexité
</dt>
<dd>
<div>
<p>La complexité d’un algorithme est le nombre d’opérations élémentaires(opération arithmétique, comparaison, affectation…)_ effectuées pour obtenir un résultat.</p>
</div>
</dd>
</dl>
<p>Si on prend l’exemple de l’algorithme précédent, on se rend compte que cela dépend des cas. Expliquez…</p>
<p>Pour pouvoir faire des comparaisons entre algorithmes, l’informaticien étudie souvent la <strong>complexité dans le pire des cas</strong>.</p>
<div class="appli">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Application: Complexité de la recherche linéaire
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="appli" data-titre="Complexité de la recherche linéaire">
<p>Regardons ce que cela donne dans le cas de notre recherche en table, le pire des cas correspond au cas où l’élément n’est pas dans le tableau.</p>
<p>Étudions chacune des étapes pour compter les opérations élémentaires effectuées.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(liste)):      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># N opérations</span></span>
<span id="cb2-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> liste[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> élément:      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># N opérations</span></span>
<span id="cb2-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> i                 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 0 opération(on est dans le pire des cas)</span></span>
<span id="cb2-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>                        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1 seul return </span></span></code></pre></div>
<p>On obtient donc: <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>N</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2N + 1</annotation></semantics></math> opérations.</p>
<p>Les facteurs multiplicatifs et additifs sont négligés, on dit que notre algorithme a une complexité grand O de <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mi>N</mi><annotation encoding="application/x-tex">N</annotation></semantics></math> notée:</p>
<p><math display="block" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo stretchy="true" form="prefix">(</mo><mi>N</mi><mo stretchy="true" form="postfix">)</mo></mrow></mrow><annotation encoding="application/x-tex">
O(N)
</annotation></semantics></math></p>
<p>On parle d’<em>algorithme linéaire</em>: son temps d’exécution croit proportionnellement avec la taille de l’entrée.</p>
</div>
</div>
</div>
</div>
</div>
<dl>
<dt>
Notation asymptotique: grand O
</dt>
<dd>
<div>
<p>On utilise la notation asymptotique (<math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>→</mo><mi>∞</mi></mrow><annotation encoding="application/x-tex">N \rightarrow \infty</annotation></semantics></math>) pour décrire le temps d’exécution des algorithmes. On se placera dans le pire des cas(Ex: élément non trouvé pour une recherche) la complexité est alors notée <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mi>O</mi><annotation encoding="application/x-tex">O</annotation></semantics></math>.</p>
</div>
</dd>
</dl>
<div class="examples">
<p>Par ordre de complexité croissante:</p>
<ul>
<li>complexité logarithmique: <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo stretchy="true" form="prefix">(</mo><mo>log</mo><mi>N</mi><mo stretchy="true" form="postfix">)</mo></mrow></mrow><annotation encoding="application/x-tex">O(\log N)</annotation></semantics></math></li>
<li>complexité linéaire: <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo stretchy="true" form="prefix">(</mo><mi>N</mi><mo stretchy="true" form="postfix">)</mo></mrow></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></li>
<li>complexité quadratique: <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo stretchy="true" form="prefix">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy="true" form="postfix">)</mo></mrow></mrow><annotation encoding="application/x-tex">O(N^2)</annotation></semantics></math></li>
<li>complexité exponentielle: <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo stretchy="true" form="prefix">(</mo><msup><mi>e</mi><mi>N</mi></msup><mo stretchy="true" form="postfix">)</mo></mrow></mrow><annotation encoding="application/x-tex">O(e^N)</annotation></semantics></math></li>
</ul>
<p>Dès <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo stretchy="true" form="prefix">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy="true" form="postfix">)</mo></mrow></mrow><annotation encoding="application/x-tex">O(N^2)</annotation></semantics></math> l’algorithme devient quasiment inutilisable en pratique.</p>
</div>
</section>
<section id="un-algorithme-efficace-la-recherche-dichotomique" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="un-algorithme-efficace-la-recherche-dichotomique"><span class="header-section-number">3</span> Un algorithme efficace: la recherche dichotomique</h2>
<p>Quand on cherche un mot dans le dictionnaire, on ne va pas le chercher en les lisant un par un, on va utiliser la méthode de <a href="../../../../1g/nsi/8-algorithmique/2-algorithmes-de-recherche">recherche dichotomique vue en première</a>.</p>
<p>Cette méthode est possible dans le cas ou les données ont été au préalable trié, ce pour quoi il existe également des <a href="../../../../1g/nsi/8-algorithmique/2-algorithmes-de-tri">algorithmes</a> efficaces.</p>
<p></p><figure class="wikimage figure"><picture>
			  <source type="image/webp" srcset="/img/ptG5PqKW-7-300.webp 300w, /img/ptG5PqKW-7-382.webp 382w" sizes="100vw">
  <source type="image/png" srcset="/img/ptG5PqKW-7-300.png 300w, /img/ptG5PqKW-7-382.png 382w" sizes="100vw">
				<img class="img-fluid figure-img" src="https://www.lyceum.fr/2023-2024/img/ptG5PqKW-7-300.webp" width="382" height="244" alt="Cette image illustre la recherche de l'élément 4 dans tableau trié." loading="lazy" decoding="async">
			</picture>
<figcaption id="caption">Cette image illustre la recherche de l'élément 4 dans tableau trié.</figcaption><figcaption id="credit">&nbsp;Public domain&nbsp;<a id="image-description" href="//commons.wikimedia.org/wiki/File:Binary_search_into_array.png">via Wikimedia Commons</a></figcaption></figure><p></p>
<p>Voici un exemple d’implémentation en Python:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> recherche_dichotomique(liste, élément):</span>
<span id="cb3-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Recherche dichotomique</span></span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Arguments</span></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ---------</span></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    liste: liste d'entiers</span></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">ATTENTION</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">: la liste doit être triée</span></span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    élément: entier</span></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        l'élément cherché</span></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb3-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb3-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    int: l'indice de l'élément si trouvé ou -1 sinon</span></span>
<span id="cb3-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb3-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb3-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on initialise les indices début et fin aux extrémités de la liste</span></span>
<span id="cb3-17">    début <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-18">    fin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(liste)    </span>
<span id="cb3-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> début <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> fin:</span>
<span id="cb3-20">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># On se place au milieu de la liste</span></span>
<span id="cb3-21">        milieu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (début <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> fin) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># il, s'agit d'une division entière</span></span>
<span id="cb3-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> liste[milieu] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> élément:</span>
<span id="cb3-23">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># l'élément est trouvé</span></span>
<span id="cb3-24">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> milieu</span>
<span id="cb3-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> liste[milieu] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> élément:   </span>
<span id="cb3-26">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># l'élément est situé dans la sous-liste de droite    </span></span>
<span id="cb3-27">            début <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> milieu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-28">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb3-29">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># l'élément est situé dans la sous-liste de gauche</span></span>
<span id="cb3-30">            fin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> milieu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
<div class="appli">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Application: Complexité de la recherche dichotomique
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="appli" data-titre="Complexité de la recherche dichotomique">
<p>En prenant l’exemple de la liste <code>L8 = [2, 11, 14, 20, 22, 30, 33, 37]</code></p>
<ol type="1">
<li><p>Combien de tours de boucles sont faites lors des appels:</p>
<ul>
<li><code>recherche_dichotomique(L8, 11)</code></li>
<li><code>recherche_dichotomique(L8, 12)</code></li>
</ul></li>
<li><p>Montrer que dans le pire des cas, il faut 4 tours de boucles pour rechercher un élément dans <code>L16 = [3, 11, 14, 21, 22, 27, 33, 37, 42, 50, 55, 58, 62, 69, 76, 81]</code></p></li>
<li><p>A votre avis combien faudrait-il de tours de boucles pour effectuer une recherche sur une liste de 256 éléments.</p></li>
</ol>
</div>
</div>
</div>
</div>
</div>
<p>Cet algorithme est beaucoup plus efficace, sa complexité (asymptotique dans le pire des cas) est <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo stretchy="true" form="prefix">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mrow><mo stretchy="true" form="prefix">(</mo><mi>N</mi><mo stretchy="true" form="postfix">)</mo></mrow><mo stretchy="true" form="postfix">)</mo></mrow></mrow><annotation encoding="application/x-tex">O(log(N))</annotation></semantics></math>.</p>
<p>Ceci fait une énorme différence notamment lorsque la taille des données augmente:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><picture>
			  <source type="image/webp" srcset="/img/KnnbUNgq6_-300.webp 300w, /img/KnnbUNgq6_-600.webp 600w, /img/KnnbUNgq6_-1685.webp 1685w" sizes="100vw">
  <source type="image/png" srcset="/img/KnnbUNgq6_-300.png 300w, /img/KnnbUNgq6_-600.png 600w, /img/KnnbUNgq6_-1685.png 1685w" sizes="100vw">
				<img class="img-fluid figure-img" src="https://www.lyceum.fr/2023-2024/img/KnnbUNgq6_-300.webp" width="1685" height="561" alt="" loading="lazy" decoding="async">
			</picture>
</p>
<figcaption>Comparaison des complexités linéaire et logarithmique</figcaption>
</figure>
</div>
</section>
<section id="correction-dun-algorithme" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="correction-dun-algorithme"><span class="header-section-number">4</span> Correction d’un algorithme</h2>
<p>Pour rappel, un algorithme est une suite d’instructions permettant d’obtenir un résultat.</p>
<p>La <strong>correction d’un algorithme</strong> est une démonstration qui prouve que l’algorithme permet bien d’obtenir le résultat souhaité.</p>
<p>Nous allons utiliser une méthode répandue semblable au <em>raisonnement par récurrence</em> fondée sur la recherche d’un <strong>invariant de boucle</strong>.</p>
<p>Pour prouver la correction nous devons montrer les trois points suivants:</p>
<ol type="1">
<li><strong>Initialisation:</strong> L’invariant est vrai avant la première itération.</li>
<li><strong>Conservation:</strong> si l’invariant est vrai avant une itération, il restera vrai après l’itération.</li>
<li><strong>Terminaison:</strong> la boucle se termine et nous donne le résultat attendu.</li>
</ol>
<p>Nous allons appliquer cette méthode aux algorithmes de tris vus en première.</p>
</section>
<section id="correction-du-tri-par-sélection" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="correction-du-tri-par-sélection"><span class="header-section-number">5</span> Correction du tri par sélection</h2>
<p>On rappelle le principe de l’algorithme.</p>
<blockquote class="blockquote">
<p>Sur un tableau de N éléments (numérotés de 0 à <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">N-1</annotation></semantics></math>), le principe du tri par sélection est le suivant : &nbsp; - rechercher le plus petit élément du tableau, et l’échanger avec l’élément d’indice 0 ; - rechercher le second plus petit élément du tableau, et l’échanger avec l’élément d’indice 1 ; - continuer de cette façon jusqu’à ce que le tableau soit entièrement trié.</p>
</blockquote>
<section id="implémentation-en-python" class="level3" data-number="5.1">
<h3 data-number="5.1" class="anchored" data-anchor-id="implémentation-en-python"><span class="header-section-number">5.1</span> Implémentation en Python</h3>
<p>En voici une implémentation en python.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> tri_selection(t):</span>
<span id="cb4-2">    N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(t)</span>
<span id="cb4-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parcourir le tableau jusqu'à l'avant dernière valeur</span></span>
<span id="cb4-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># en effet la dernière valeur sera forcément la plus grande</span></span>
<span id="cb4-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb4-6">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on recherche l'indice du plus petit élément du sous-tableau de droite</span></span>
<span id="cb4-7">        i_min <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> i</span>
<span id="cb4-8">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  Parcourir le reste du tableau pour rechercher l'élément le plus petit restant</span></span>
<span id="cb4-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, N):</span>
<span id="cb4-10">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> t[j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> t[i_min]:</span>
<span id="cb4-11">                i_min <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> j</span>
<span id="cb4-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> i_min <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> i:</span>
<span id="cb4-13">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># échanger t[i] et t[i_min]</span></span>
<span id="cb4-14">            t[i], t[i_min] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t[i_min], t[i]</span>
<span id="cb4-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> t</span></code></pre></div>
<p>Voici les états successifs du tableau après chaque tour de boucle avec en entrée <code>[12, 15, 1, 3, 7]</code>:</p>
<pre><code>[1, 15, 12, 3, 7]
[1, 3, 12, 15, 7]
[1, 3, 7, 15, 12]
[1, 3, 7, 12, 15]</code></pre>
</section>
<section id="correction-de-lalgorithme" class="level3" data-number="5.2">
<h3 data-number="5.2" class="anchored" data-anchor-id="correction-de-lalgorithme"><span class="header-section-number">5.2</span> Correction de l’algorithme</h3>
<p>L’invariant de boucle consiste à montrer que si les <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mi>i</mi><annotation encoding="application/x-tex">i</annotation></semantics></math> premiers éléments du tableau sont triés avant l’itération, alors les <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">i+1</annotation></semantics></math> premiers éléments seront triés après une itération.</p>
<ol type="1">
<li><strong>Initialisation:</strong> Au départ, <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">i = 0</annotation></semantics></math>, le sous-tableau trié de gauche ne contient aucun élément <code>[]</code>. Il est donc forcément trié.</li>
<li><strong>Conservation:</strong> Lorsqu’on considère le tour de boucle <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mi>i</mi><annotation encoding="application/x-tex">i</annotation></semantics></math>, le tableau est déjà trié pour les indices <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mn>0</mn><annotation encoding="application/x-tex">0</annotation></semantics></math> à <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">i-1</annotation></semantics></math>. Grâce à la boucle interne, on trouve le plus petit élément parmi les éléments d’indice <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mi>i</mi><annotation encoding="application/x-tex">i</annotation></semantics></math> à <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mi>n</mi><annotation encoding="application/x-tex">n</annotation></semantics></math> (tous plus grands que l’élément d’indice <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">i-1</annotation></semantics></math>), et on le place à l’indice <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mi>i</mi><annotation encoding="application/x-tex">i</annotation></semantics></math>. Après le tour de boucle, le tableau sera donc trié pour les indices de <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mn>0</mn><annotation encoding="application/x-tex">0</annotation></semantics></math> à <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mi>i</mi><annotation encoding="application/x-tex">i</annotation></semantics></math>.</li>
<li><strong>Terminaison:</strong> la boucle se termine lorsqu’on arrive à l’avant-dernier élément du tableau. Le tableau est trié pour les éléments d’indice <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mn>0</mn><annotation encoding="application/x-tex">0</annotation></semantics></math> à <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>−</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">n-2</annotation></semantics></math>, et le dernier élément d’indice <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-1</annotation></semantics></math> est forcément plus grand que l’élément d’indice $ <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>−</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">n-2</annotation></semantics></math>. Le tableau est donc entièrement trié.</li>
</ol>
<div class="appli">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Application: Étude du tri par insertion
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="appli" data-titre="Étude du tri par insertion">
<p>La partie <a href="./exo">exercice</a> propose une étude complète de l’algorithme de tri par insertion vu également en première.</p>
<blockquote class="blockquote">
<p>Dans l’algorithme, on parcourt le tableau à trier du début à la fin. Au moment où on considère le i-ème élément, les éléments qui le précèdent sont déjà triés. Pour faire l’analogie avec l’exemple du jeu de cartes, lorsqu’on est à la i-ème étape du parcours, le i-ème élément est la carte saisie, les éléments précédents sont la main triée et les éléments suivants correspondent aux cartes encore mélangées sur la table.</p>
</blockquote>
<blockquote class="blockquote">
<p>L’objectif d’une étape est d’insérer le i-ème élément à sa place parmi ceux qui précèdent. Il faut pour cela trouver où l’élément doit être inséré en le comparant aux autres, puis décaler les éléments afin de pouvoir effectuer l’insertion. En pratique, ces deux actions sont fréquemment effectuées en une passe, qui consiste à faire « remonter » l’élément au fur et à mesure jusqu’à rencontrer un élément plus petit.</p>
</blockquote>
<p><a href="http://fr.wikipedia.org/wiki/Tri_par_insertion">Source Wikipedia</a></p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> tri_insertion(t: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>):</span>
<span id="cb6-2">    N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(t)</span>
<span id="cb6-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, N):</span>
<span id="cb6-4">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t[i]</span>
<span id="cb6-5">        j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> i</span>
<span id="cb6-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> t[j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> x:</span>
<span id="cb6-7">            t[j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t[j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb6-8">            j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb6-9">        t[j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x</span>
<span id="cb6-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> t</span></code></pre></div>
</div>
</div>
</div>
</div>
</div>
<div class="plus">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
En plus: Complexité des algorithmes de tri
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="plus" data-titre="Complexité des algorithmes de tri">
<p>Montrer que les deux algorithmes de tris précédents ont une complexité quadratique en <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo stretchy="true" form="prefix">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="true" form="postfix">)</mo></mrow></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math>.</p>
</div>
</div>
</div>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>TNSI</category>
  <guid>https://www.lyceum.fr/2023-2024/tg/nsi/5-algorithmique/0-rappels/</guid>
  <pubDate>Thu, 16 May 2024 13:21:00 GMT</pubDate>
</item>
<item>
  <title>Chapitre 1: Algorithmes sur les arbres binaires</title>
  <link>https://www.lyceum.fr/2023-2024/tg/nsi/5-algorithmique/1-algorithmes-sur-les-arbres-binaires/</link>
  <description><![CDATA[ 




<div class="programme">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Programme
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="programme">
<table class="table table-bordered table-hover">
<thead class="table-warning">
<tr class="header">
<th>Contenus</th>
<th>Capacités attendues</th>
<th>Commentaires</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Algorithmes sur les arbres binaires et sur les arbres binaires de recherche.</td>
<td><p>Calculer la taille et la hauteur d’un arbre.</p>
<p>Parcourir un arbre de différentes façons (ordres infixe, préfixe ou suffixe ; ordre en largeur d’abord).</p>
<p>Rechercher une clé dans un arbre de recherche, insérer une clé.</p></td>
<td><p>Une structure de données récursive adaptée est utilisée.</p>
<p>L’exemple des arbres permet d’illustrer la programmation par classe.</p>
<p>La recherche dans un arbre de recherche équilibré est de coût logarithmique.</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</div>
<p>Dans ce chapitre nous allons voir quelques algorithmes classiques sur les <a href="../../../../tg/nsi/1-structures-de-donnees/4-arbres/">arbres</a>:</p>
<ul>
<li>Calcul de la taille et de la hauteur de l’arbre.</li>
<li>Parcours de l’arbre de différentes façons</li>
<li>Recherche et insertion d’une clé dans un arbre binaire de recherche.</li>
</ul>
<section id="description-de-la-structure-de-données" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="description-de-la-structure-de-données"><span class="header-section-number">1</span> Description de la structure de données</h2>
<p>Pour représenter les arbres, nous allons décrire l’arbre à partir d’une classe <code>Node</code> <em>récursive</em> avec les attributs suivants:</p>
<ul>
<li><code>value</code>: valeur ou clé du nœud de type numérique,</li>
<li><code>left</code>: sous-arbre gauche de type <code>Node</code>,</li>
<li><code>right</code>: sous-arbre droit de type <code>Node</code>,</li>
</ul>
<p>Cette structure de données est <em>récursive</em> car les attributes <code>left</code> et <code>right</code> de l’objet <code>Node</code> sont eux-mêmes de type <code>Node</code>.</p>
<div class="plus">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
En plus
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="plus">
<p>La syntaxe utilisée est basée sur le package python <a href="https://binarytree.readthedocs.io/en/latest/index.html">binarytree</a> ce qui à l’inconvénient d’être en anglais, mais qui nous permettra de programmer et tester facilement nos algorithmes en Python.</p>
</div>
</div>
</div>
</div>
</div>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> binarytree <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Node, tree</span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># On peut facilement créer un arbre aléatoire</span></span>
<span id="cb1-3">mon_arbre <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tree(height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># L'affichage de l'arbre est aisé</span></span>
<span id="cb1-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Arbre aléatoire"</span>)</span>
<span id="cb1-7">mon_arbre</span></code></pre></div>
<p><span class="smallcaps">&gt;&gt;sortie</span></p>
<div class="cell-output cell-output-stdout">
<pre><code>Arbre aléatoire</code></pre>
</div>
<p><span class="smallcaps">&gt;&gt;sortie</span></p>
<div class="cell-output cell-output-error">
<pre><code>AttributeError: 'Digraph' object has no attribute '_repr_svg_'</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="1">
<pre><code>Node(11)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ou créer l'arbre de toutes pièces</span></span>
<span id="cb5-2">arbre <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb5-3">arbre.left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb5-4">arbre.left.left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-5">arbre.left.right <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb5-6">arbre.left.right.right <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb5-7">arbre.right <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb5-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A la main"</span>)</span>
<span id="cb5-9">arbre</span></code></pre></div>
<p><span class="smallcaps">&gt;&gt;sortie</span></p>
<div class="cell-output cell-output-stdout">
<pre><code>A la main</code></pre>
</div>
<p><span class="smallcaps">&gt;&gt;sortie</span></p>
<div class="cell-output cell-output-error">
<pre><code>AttributeError: 'Digraph' object has no attribute '_repr_svg_'</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>Node(3)</code></pre>
</div>
</div>
</section>
<section id="calculer-la-taille-de-larbre" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="calculer-la-taille-de-larbre"><span class="header-section-number">2</span> Calculer la taille de l’arbre</h2>
<p>Pour rappel, voici la définition vue dans le <a href="../../../../tg/nsi/1-structures-de-donnees/4-arbres">chapitre P1C4 sur les arbres binaires</a>.</p>
<dl>
<dt>
Taille d’un arbre
</dt>
<dd>
<div>
<p>La taille d’un arbre est son nombre de nœuds.</p>
</div>
</dd>
</dl>
<p>Nous allons utiliser une fonction <em>recursive</em>.</p>
<p>A chaque appel, on renvoie <code>1 + taille(gauche(A)) + taille(droite(A))</code>.</p>
<p>Dans le cas de base, en cas d’absence de noeud, on renvoie 0.</p>
<p>Voici le pseudo-code correspondant à cette fonction:</p>
<pre><code>taille(Arbre A) :
    Si A vide
        retourner 0
    retourner 1 + taille(gauche(A)) + taille(droite(A))</code></pre>
<p>Et voici l’implémentation de cette fonction en Python en utilisant la classe <code>binarytree.Node</code> pour représenter les arbres binaires.</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> taille(arbre):</span>
<span id="cb10-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Fonction récursive renvoyant la taille d'un arbre</span></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Arguments</span></span>
<span id="cb10-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ---------</span></span>
<span id="cb10-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    arbre: Arbre Binaire</span></span>
<span id="cb10-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Le noeud racine de l'arbre</span></span>
<span id="cb10-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb10-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb10-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb10-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    int</span></span>
<span id="cb10-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        La taille de l'arbre</span></span>
<span id="cb10-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb10-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Cas de base </span></span>
<span id="cb10-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span>(arbre):</span>
<span id="cb10-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb10-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb10-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(arbre)</span></span>
<span id="cb10-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> taille(arbre.left) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> taille(arbre.right)</span>
<span id="cb10-20">  </span>
<span id="cb10-21"></span>
<span id="cb10-22"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"taille:"</span>, taille(mon_arbre))</span>
<span id="cb10-23">mon_arbre</span></code></pre></div>
<p><span class="smallcaps">&gt;&gt;sortie</span></p>
<div class="cell-output cell-output-stdout">
<pre><code>taille: 9</code></pre>
</div>
<p><span class="smallcaps">&gt;&gt;sortie</span></p>
<div class="cell-output cell-output-error">
<pre><code>AttributeError: 'Digraph' object has no attribute '_repr_svg_'</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>Node(11)</code></pre>
</div>
</div>
</section>
<section id="calculer-la-hauteur-de-larbre" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="calculer-la-hauteur-de-larbre"><span class="header-section-number">3</span> Calculer la hauteur de l’arbre</h2>
<p>Pour rappel, voici la définition vue dans le <a href="../../../../tg/nsi/1-structures-de-donnees/4-arbres">chapitre P1C4 sur les arbres binaires</a>.</p>
<dl>
<dt>
Hauteur d’un arbre
</dt>
<dd>
<div>
<p>La hauteur d’un arbre est la plus grande profondeur d’une feuille de l’arbre.</p>
</div>
</dd>
</dl>
<p>A chaque appel, on va renvoyer le maximum des hauteurs des sous-arbres: <code>1 + hauteur(node.left), hauteur(node.right))</code>.</p>
<p>Mais comme toute fonction recursive, il faut un cas de base qui ne nécessite pas le rappel de la fonction(sans quoi on aurait une boucle infinie). Ce cas est l’absence de noeud, cela signifie que le noeud parent était une feuille, et renvoie -1 pour diminuer la hauteur accumulée de 1.</p>
<p>Voici le pseudo-code correspondant à cette fonction:</p>
<pre><code>hauteur(Arbre A) :
    Si A vide
        retourner - 1
    retourner 1 + max(hauteur(gauche(A)), hauteur(droite(A)))</code></pre>
<p>Et voici l’implémentation de cette fonction en Python en utilisant la classe <code>binarytree.Node</code> pour représenter les arbres binaires.</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> hauteur(arbre):</span>
<span id="cb15-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Fonction récursive renvoyant la hauteur d'un arbre</span></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb15-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Arguments</span></span>
<span id="cb15-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ---------</span></span>
<span id="cb15-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    arbre: Arbre binaire</span></span>
<span id="cb15-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Le noeud racine de l'arbre</span></span>
<span id="cb15-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb15-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb15-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb15-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    int</span></span>
<span id="cb15-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        La hauteur de l'arbre</span></span>
<span id="cb15-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb15-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Cas de base </span></span>
<span id="cb15-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span>(arbre):</span>
<span id="cb15-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb15-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb15-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(arbre)</span></span>
<span id="cb15-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(hauteur(arbre.left), hauteur(arbre.right))</span>
<span id="cb15-20">        </span>
<span id="cb15-21"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hauteur:"</span>, hauteur(mon_arbre))</span>
<span id="cb15-22">mon_arbre</span></code></pre></div>
<p><span class="smallcaps">&gt;&gt;sortie</span></p>
<div class="cell-output cell-output-stdout">
<pre><code>hauteur: 3</code></pre>
</div>
<p><span class="smallcaps">&gt;&gt;sortie</span></p>
<div class="cell-output cell-output-error">
<pre><code>AttributeError: 'Digraph' object has no attribute '_repr_svg_'</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>Node(11)</code></pre>
</div>
</div>
<p>N’hésitez pas à décommenter le <code>print</code> pour observer les arbres sur lesquels sont appelés cette fonction.</p>
<div class="appli">
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Application
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="appli">
<p>Schématiser la pile d’appels de la fonction récursive utilisée pour obtenir ce résultat.</p>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="parcours-de-larbre" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="parcours-de-larbre"><span class="header-section-number">4</span> Parcours de l’arbre</h2>
<p>Nous allons voir quatre méthodes de parcours des arbres, en fonction de l’ordre dans lequel on parcourt les noeuds:</p>
<ul>
<li>parcours préfixe</li>
<li>parcours postfixe</li>
<li>parcours infixe</li>
<li>parcours en largeur</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><picture>
			  <source type="image/webp" srcset="/img/7mx6lxz-Nn-300.webp 300w, /img/7mx6lxz-Nn-600.webp 600w, /img/7mx6lxz-Nn-1170.webp 1170w" sizes="100vw">
  <source type="image/png" srcset="/img/7mx6lxz-Nn-300.png 300w, /img/7mx6lxz-Nn-600.png 600w, /img/7mx6lxz-Nn-1170.png 1170w" sizes="100vw">
				<img class="img-fluid figure-img" src="https://www.lyceum.fr/2023-2024/img/7mx6lxz-Nn-300.webp" width="1170" height="415" alt="" loading="lazy" decoding="async">
			</picture>
</p>
<figcaption>Comparaisons des parcours d’arbres</figcaption>
</figure>
</div>
<section id="parcours-préfixe" class="level3" data-number="4.1">
<h3 data-number="4.1" class="anchored" data-anchor-id="parcours-préfixe"><span class="header-section-number">4.1</span> Parcours préfixe</h3>
<p>Dans cet ordre, chaque nœud est visité puis chacun de ses fils.</p>
<p>Voici le pseudo-code extrait de l’article Wikipedia sur les arbres.</p>
<pre><code>parcours_préfixe(Arbre A) :
    visiter (A)
    Si nonVide (gauche(A))
          parcours_préfixe(gauche(A))
    Si nonVide (droite(A))
          parcours_préfixe(droite(A))</code></pre>
</section>
<section id="parcours-infixe" class="level3" data-number="4.2">
<h3 data-number="4.2" class="anchored" data-anchor-id="parcours-infixe"><span class="header-section-number">4.2</span> Parcours infixe</h3>
<p>On visite chaque nœud entre les nœuds de son sous-arbre de gauche et les nœuds de son sous-arbre de droite. C’est une manière assez commune de parcourir un <em>arbre binaire de recherche</em>, car il donne les valeurs dans l’ordre croissant.</p>
<p>Voici le pseudo-code extrait de l’article Wikipedia sur les arbres.</p>
<pre><code>parcours_infixe(Arbre A) :
    Si nonVide(gauche(A))
       parcours_infixe(gauche(A))
    visiter(A)
    Si nonVide(droite(A))
       parcours_infixe(droite(A))</code></pre>
</section>
<section id="parcours-postfixe" class="level3" data-number="4.3">
<h3 data-number="4.3" class="anchored" data-anchor-id="parcours-postfixe"><span class="header-section-number">4.3</span> Parcours postfixe</h3>
<p>On affiche chaque nœud après avoir affiché chacun de ses fils.</p>
<p>Voici le pseudo-code extrait de l’article Wikipedia sur les arbres.</p>
<pre><code>parcours_postfixe(Arbre A) :
    Si nonVide(gauche(A))
       parcours_postfixe(gauche(A))
    Si nonVide(droite(A))
       parcours_postfixe(droite(A))
    visiter(A)</code></pre>
</section>
<section id="parcours-en-largeur" class="level3" data-number="4.4">
<h3 data-number="4.4" class="anchored" data-anchor-id="parcours-en-largeur"><span class="header-section-number">4.4</span> Parcours en largeur</h3>
<p>On parcours les noeuds de gauche à droite étage par étage, comme si on «lisait» l’arbre.</p>
<p>Voici le pseudo-code issu de l’article Wikipedia sur les arbres.</p>
<p>Ce code n’est pas <em>recusrif</em> et a la particularité d’utiliser une structure de file avec les méthodes <code>enfiler</code> et <code>défiler</code>.</p>
<pre><code>parcours_largeur(Arbre A) 
   f = FileVide
   enfiler(Racine(A), f)
   Tant que (f != FileVide) 
       nœud = defiler(f)
       Visiter(nœud)                        // On fait une opération
       Si (gauche(nœud) != null) Alors
           enfiler(gauche(nœud), f)
       Si (droite(nœud) != null) Alors
           enfiler(droite(nœud), f)</code></pre>
<p>Voici un exemple d’implémentation en Python utilisant une liste en guise de file avec les méthodes:</p>
<ul>
<li><code>list.insert(0, el)</code>, pour enfiler l’élément à l’index 0.</li>
<li><code>list.pop()</code>, pour supprimer et renvoyer le dernier élément de la file(le défiler).</li>
</ul>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> parcours_largeur(arbre):</span>
<span id="cb23-2">    f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb23-3">    f.insert(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, arbre)</span>
<span id="cb23-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> f:</span>
<span id="cb23-5">        noeud <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.pop()</span>
<span id="cb23-6">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(noeud.value)</span>
<span id="cb23-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> noeud.left:</span>
<span id="cb23-8">            f.insert(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, noeud.left)</span>
<span id="cb23-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> noeud.right:</span>
<span id="cb23-10">            f.insert(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, noeud.right)</span>
<span id="cb23-11"></span>
<span id="cb23-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Parcours en largeur"</span>)</span>
<span id="cb23-13">parcours_largeur(mon_arbre)</span>
<span id="cb23-14">mon_arbre</span></code></pre></div>
<p><span class="smallcaps">&gt;&gt;sortie</span></p>
<div class="cell-output cell-output-stdout">
<pre><code>Parcours en largeur
11
5
10
14
13
8
3
0
12</code></pre>
</div>
<p><span class="smallcaps">&gt;&gt;sortie</span></p>
<div class="cell-output cell-output-error">
<pre><code>AttributeError: 'Digraph' object has no attribute '_repr_svg_'</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>Node(11)</code></pre>
</div>
</div>
</section>
</section>
<section id="arbre-binaire-de-recherche" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="arbre-binaire-de-recherche"><span class="header-section-number">5</span> Arbre binaire de recherche</h2>
<p>Comme nous l’avons vu dans le chapitre sur les <a href="../../1-structures-de-donnees/4-arbres/#arbres-binaires-de-recherche">arbres</a> de la partie structure de données,</p>
<blockquote class="blockquote">
<p>un arbre binaire de recherche permet des opérations rapides pour rechercher une clé, insérer ou supprimer une clé.</p>
</blockquote>
<p>Pour rappel:</p>
<dl>
<dt>
Arbre binaire de recherche
</dt>
<dd>
<div>
<p>Il s’agit d’un arbre binaire dans lequel toutes les valeurs dans le sous-arbre gauche d’un nœud sont inférieures à la valeur à la racine de l’arbre et toutes les valeurs dans le sous-arbre droit d’un nœud sont supérieures ou égales à la valeur à la racine de l’arbre.</p>
</div>
</dd>
</dl>
<p>Nous allons voir les algorithmes permettant la recherche et l’insertion d’une clé.</p>
<p>Encore une fois nous utiliserons le package <code>binarytree</code> qui permet de facilementcréer des arbres binaires grâce à la fonction <code>bst</code>(<em>binary search tree</em>).</p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> binarytree <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> bst</span>
<span id="cb27-2">abr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bst(height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb27-3">abr</span></code></pre></div>
<p><span class="smallcaps">&gt;&gt;sortie</span></p>
<div class="cell-output cell-output-error">
<pre><code>AttributeError: 'Digraph' object has no attribute '_repr_svg_'</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>Node(7)</code></pre>
</div>
</div>
<section id="recherche-dune-clé" class="level3" data-number="5.1">
<h3 data-number="5.1" class="anchored" data-anchor-id="recherche-dune-clé"><span class="header-section-number">5.1</span> Recherche d’une clé</h3>
<p>Puisque ce type d’arbre est trié, nous pouvons utiliser une méthode de <a href="../../../../1g/nsi/8-algorithmique/4-recherche-dichotomique">recherche dichotomique</a> telle que nous l’avions vu en première.</p>
<p>On peut ainsi éliminer la moitié de l’arbre à chaque itération et la complexité est <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>o</mi><mi>g</mi><mrow><mo stretchy="true" form="prefix">(</mo><mi>n</mi><mo stretchy="true" form="postfix">)</mo></mrow></mrow><annotation encoding="application/x-tex">log(n)</annotation></semantics></math> si l’arbre est équilibré.</p>
<p>Voici le pseudo code de cet algorithme.</p>
<pre><code>fonction recherche(a: abr, clé: élément)

        Si a vide
            retourner Faux

        Sinon
            e = étiquette de a
            Si e == clé 
                retourner Vrai
            Sinon si e &lt; clé
                retourner recherche(gauche(a), clé)
            Sinon
                retourner recherche(droite(a), clé)</code></pre>
<div class="app">
<p>Implémenter cet algorithme en Python en utilisant le module <code>binarytree</code>.</p>
</div>
</section>
<section id="insertion-dune-clé" class="level3" data-number="5.2">
<h3 data-number="5.2" class="anchored" data-anchor-id="insertion-dune-clé"><span class="header-section-number">5.2</span> Insertion d’une clé</h3>
<blockquote class="blockquote">
<p>L’insertion d’un nœud commence par une recherche : on cherche la clé du nœud à insérer ; lorsqu’on arrive à une feuille, on ajoute le nœud comme fils de la feuille en comparant sa clé à celle de la feuille : si elle est inférieure, le nouveau nœud sera à gauche ; sinon il sera à droite.</p>
</blockquote>
<pre><code>fonction insertion(a: ABR, clé: élément)
        Si a vide
            retourner ABR(clé, vide, vide)
            
        Sinon
            e = étiquette de a
            Si e &lt; clé
                retourner ABR(e, insertion(gauche(a), clé), droite(a))
            Sinon
                retourner ABR(e, gauche(a), insertion(droite(a), clé))</code></pre>
<p><a href="https://fr.wikipedia.org/wiki/Arbre_binaire_de_recherche#Insertion" class="cite-source">ABR sur Wikipedia</a></p>
<p>On peut traduire cet algorithme en Python de cette façon:</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> insertion(abr, clé):</span>
<span id="cb32-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Insertion de la clé dans l'arbre abr</span></span>
<span id="cb32-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb32-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Arguments</span></span>
<span id="cb32-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ---------</span></span>
<span id="cb32-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    abr: binarytree.Node</span></span>
<span id="cb32-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        l'arbre dans lequel doit être inséré la clé</span></span>
<span id="cb32-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    clé: Number</span></span>
<span id="cb32-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        La cle à insérer</span></span>
<span id="cb32-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb32-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb32-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb32-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    binarytree.Node</span></span>
<span id="cb32-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        l'arbre modifié</span></span>
<span id="cb32-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb32-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span>(abr):</span>
<span id="cb32-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> Node(clé)</span>
<span id="cb32-18">    e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> abr.value</span>
<span id="cb32-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> clé <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> e:</span>
<span id="cb32-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> Node(value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>e,</span>
<span id="cb32-21">                    left<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>insertion(abr.left, clé),</span>
<span id="cb32-22">                    right<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>abr.right)</span>
<span id="cb32-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb32-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> Node(value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>e,</span>
<span id="cb32-25">                    left<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>abr.left,</span>
<span id="cb32-26">                    right<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>insertion(abr.right, clé))</span>
<span id="cb32-27"></span>
<span id="cb32-28"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Arbre initial"</span>)</span>
<span id="cb32-29">abr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bst()</span>
<span id="cb32-30">abr</span></code></pre></div>
<p><span class="smallcaps">&gt;&gt;sortie</span></p>
<div class="cell-output cell-output-stdout">
<pre><code>Arbre initial</code></pre>
</div>
<p><span class="smallcaps">&gt;&gt;sortie</span></p>
<div class="cell-output cell-output-error">
<pre><code>AttributeError: 'Digraph' object has no attribute '_repr_svg_'</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>Node(2)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Insertion de l'élément 7</span></span>
<span id="cb36-2">abr2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> insertion(abr, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb36-3">abr2</span></code></pre></div>
<p><span class="smallcaps">&gt;&gt;sortie</span></p>
<div class="cell-output cell-output-error">
<pre><code>AttributeError: 'Digraph' object has no attribute '_repr_svg_'</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>Node(2)</code></pre>
</div>
</div>
<div class="ref">
<ul>
<li><a href="https://fr.wikipedia.org/wiki/Arbre_enracin%C3%A9">Article Wikipedia sur les arbres</a></li>
<li><a href="https://fr.wikipedia.org/wiki/Arbre_enracin%C3%A9">Article Wikipedia sur les arbres binaires de recherche</a></li>
</ul>
</div>


</section>
</section>

 ]]></description>
  <category>TNSI</category>
  <guid>https://www.lyceum.fr/2023-2024/tg/nsi/5-algorithmique/1-algorithmes-sur-les-arbres-binaires/</guid>
  <pubDate>Thu, 16 May 2024 13:21:00 GMT</pubDate>
</item>
</channel>
</rss>
