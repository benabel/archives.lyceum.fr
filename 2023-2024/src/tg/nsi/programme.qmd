---
tags:
  - numérique  et   sciences  informatiques
  - nsi
  - programme
  - officiel
  - "2020"
  - terminale
  - lycée
title: Programme de {{< meta matter >}}
subtitle: "{{< meta classe >}}"
---

<!-- Conversion initiale effectuée grâce à https://pdf2md.morethan.io/ -->

> Ce document est une retranscription non officielle du programme de _numérique et sciences
> informatiques_ de terminale générale applicable à la rentrée 2020. La version officielle est
> consultable sur
> [eduscol](https://cache.media.education.gouv.fr/file/SPE8_MENJ_25_7_2019/93/3/spe247_annexe_1158933.pdf).


## Préambule

L’enseignement de spécialité de numérique et sciences informatiques du cycle terminal de la voie
générale vise l’appropriation des fondements de l’informatique pour préparer les élèves à une
poursuite d’études en les formant à la pratique d’une démarche scientifique et en développant leur
appétence pour des activités de recherche.

L’objectif de cet enseignement général est l’appropriation des concepts et des méthodes qui fondent
l’informatique, dans ses dimensions scientifiques et techniques. Il s’appuie sur l’universalité de
quatre concepts fondamentaux et la variété de leurs interactions :

- les **données**, qui représentent sous une forme numérique unifiée des informations très
  diverses: textes, images, sons, mesures physiques, sommes d’argent, etc. ;
- les **algorithmes**, qui spécifient de façon abstraite et précise des traitements à effectuer sur
  les données à partir d’opérations élémentaires ;
- les **langages**, qui permettent de traduire les algorithmes abstraits en programmes textuels ou
  graphiques de façon à ce qu’ils soient exécutables par les machines ;
- les **machines**, et leurs systèmes d’exploitation, qui permettent d’exécuter des programmes en
  enchaînant un grand nombre d’instructions simples, assurent la persistance des données par leur
  stockage et gèrent les communications. Y sont inclus les **objets connectés** et les **réseaux**.
  
À ces concepts s’ajoute un élément transversal : les **interfaces** qui permettent la
communication, la collecte des données et la commande des systèmes.

Cet enseignement prolonge les enseignements d’informatique dispensés à l’école primaire, au collège
en mathématiques et en technologie et, en classe de seconde, l’enseignement commun Sciences
numériques et technologie. Il s’appuie aussi sur l’algorithmique pratiquée en mathématiques en
classe de seconde. Il approfondit les notions étudiées et les compétences travaillées en classe de
première dans l’enseignement de spécialité. Il autorise tous les choix de couplage avec les autres
spécialités.

L’enseignement de spécialité en classe terminale concerne les élèves ayant confirmé ce choix parmi
les trois spécialités suivies en classe de première. À ce titre, dans le cadre des six heures
hebdomadaires et dans une logique d'exigence disciplinaire et de préparation à l'enseignement
supérieur, les élèves sont amenés à approfondir leurs connaissances et à développer un solide
niveau de compétences.

L’enseignement de spécialité de numérique et sciences informatiques permet de développer les
compétences suivantes, constitutives de la pensée informatique :

- analyser et modéliser un problème en termes de flux et de traitement d’informations ;
- décomposer un problème en sous-problèmes, reconnaître des situations déjà analysées et réutiliser
  des solutions ;
- concevoir des solutions algorithmiques ;
- traduire un algorithme dans un langage de programmation, en spécifier les interfaces et les
  interactions, comprendre et réutiliser des codes sources existants, développer des processus de
  mise au point et de validation de programmes ;
- mobiliser les concepts et les technologies utiles pour assurer les fonctions d’acquisition, de
  mémorisation, de traitement et de diffusion des informations ;
- développer des capacités d’abstraction et de généralisation.

Cet enseignement se déploie en mettant en activité les élèves, **sous des formes variées** qui
permettent de développer des compétences transversales :

- faire preuve d’autonomie, d’initiative et de créativité ;
- présenter un problème ou sa solution, développer une argumentation dans le cadre d’un débat ;
- coopérer au sein d’une équipe dans le cadre d’un projet ;
- rechercher de l’information, partager des ressources ;
- faire un usage responsable et critique de l’informatique.

La progression peut suivre un rythme annuel construit autour de périodes spécifiques favorisant une
alternance entre divers types d’activités.

L’enseignement de numérique et sciences informatiques permet l’acquisition des compétences
numériques qui font l’objet d’une certification en fin de cycle terminal. Comme tous les
enseignements de spécialité, il contribue au développement des compétences orales à travers
notamment la pratique de l’argumentation. Celle-ci conduit à préciser sa pensée et à expliciter son
raisonnement de manière à convaincre. Elle permet à chacun de faire évoluer sa pensée, jusqu’à la
remettre en cause si nécessaire, pour accéder progressivement à la vérité par la preuve. Elle prend
un relief particulier pour ceux qui choisiront de préparer l’épreuve orale terminale du
baccalauréat en l'adossant à cet enseignement de spécialité.

### Démarche de projet

Un enseignement d’informatique ne saurait se réduire à une présentation de concepts ou de méthodes
sans permettre aux élèves de se les approprier en développant des projets.

Un quart au moins de l’horaire total de la spécialité est réservé à la conception et à
l’élaboration de projets conduits par les élèves.

Les projets réalisés par les élèves, sous la conduite du professeur, constituent un apprentissage
fondamental tant pour l’appropriation des concepts informatiques que pour l’acquisition de
compétences. En classe de première comme en classe terminale, ils peuvent porter sur des
problématiques issues d’autres disciplines et ont essentiellement pour but d’imaginer des solutions
répondant à un problème ; dans la mesure du possible, il convient de laisser le choix du thème du
projet aux élèves. Il peut s’agir d’un approfondissement théorique des concepts étudiés en commun,
d’une application à d’autres disciplines telle qu’une simulation d’expérience, d’exploitation de
modules liés à l’intelligence artificielle et en particulier à l’apprentissage automatique, d’un
travail sur des données socioéconomiques, du développement d’un logiciel de lexicographie, d’un
projet autour d’un objet connecté ou d’un robot, de la conception d’une bibliothèque implémentant
une structure de données complexe, d’un problème de traitement d’image ou de son, d’une application
mobile, par exemple de réalité virtuelle ou augmentée, du développement d’un site Web associé à
l’utilisation d’une base de données, de la réalisation d’un interpréteur d’un mini-langage, de la
recherche d’itinéraire sur une carte (algorithme A*), d’un programme de jeu de stratégie, etc.

La conduite d’un projet inclut des points d’étape pour faire un bilan avec le professeur, valider
des éléments, contrôler l’avancement du projet ou en adapter les objectifs, voire le redéfinir
partiellement, afin de maintenir la motivation des élèves.

Les professeurs veillent à ce que les projets restent d’une ambition raisonnable afin de leur
permettre d’aboutir.

### Modalités de mise en œuvre

Les activités pratiques et la réalisation de projets supposent que chaque élève ait un accès
individuel à un équipement relié à Internet.

Un langage de programmation est nécessaire pour l’écriture des programmes : un langage simple
d’usage, interprété, concis, libre et gratuit, multiplateforme, largement répandu, riche de
bibliothèques adaptées et bénéficiant d’une vaste communauté d’auteurs dans le monde éducatif est à
privilégier. Au moment de la conception de ce programme, le langage choisi est Python version 3 (ou
supérieure).

L’expertise dans tel ou tel langage de programmation n’est cependant pas un objectif de formation.

Le professeur s'attachera à contextualiser le plus souvent possible les activités pratiques en
s'appuyant sur des thèmes d'actualité et des problématiques du monde numérique et d'ingénierie
numérique dans lesquels évoluent les élèves.

La culture du numérique et les sciences informatiques s'acquièrent par la pratique. Il convient de
placer au maximum l'élève en situation d'activité. L'emploi de démarche de résolution de problèmes
est ainsi à privilégier pour mobiliser les différents contenus scientifiques du programme.

## Éléments de programme

Le programme, organisé en six rubriques, ne constitue pas un plan de cours. Il appartient aux
professeurs de choisir leur progression. Les mêmes notions peuvent être développées et éclairées
dans différentes rubriques et leurs interactions mises en évidence.

### Histoire de l’informatique

Cette rubrique transversale se décline dans chacune des cinq autres.

Comme tous les concepts scientifiques et techniques, ceux de l’informatique ont une histoire et ont
été forgés par des personnes. Les algorithmes sont présents dès l’Antiquité, les machines à
calculer apparaissent progressivement au XVIIe siècle, les sciences de l’information sont fondées
au XIXe siècle, mais c’est en 1936 qu’apparaît le concept de machine universelle, capable
d’exécuter tous les algorithmes, et que les notions de machine, algorithme, langage et information
sont pensées comme un tout cohérent. Les premiers ordinateurs ont été construits en 1948 et leur
puissance a ensuite évolué exponentiellement. Parallèlement, les ordinateurs se sont diversifiés
dans leurs tailles, leurs formes et leurs emplois : téléphones, tablettes, montres connectées,
ordinateurs personnels, serveurs, fermes de calcul, méga-ordinateurs. Le réseau Internet, développé
depuis 1969, relie aujourd’hui ordinateurs et objets connectés.

+--------------------+---------------------------------+-------------------------------------+
| Contenus           | Capacités attendues             | Commentaires                        |
+====================+=================================+=====================================+
| Événements clés de | Situer dans le temps les        | Identifier l’évolution des rôles    |
| l’histoire de      | principaux événements de        | relatifs des logiciels et des       |
| l’informatique     | l’histoire de l’informatique et | matériels.                          |
|                    | leurs protagonistes.            |                                     |
|                    |                                 | Ces repères viennent compléter      |
|                    |                                 | ceux qui ont été introduits en      |
|                    |                                 | première.                           |
|                    |                                 |                                     |
|                    |                                 | Ces repères historiques sont        |
|                    |                                 | construits au fur et à mesure de la |
|                    |                                 | présentation des concepts et        |
|                    |                                 | techniques.                         |
+--------------------+---------------------------------+-------------------------------------+

### Structures de données

L’écriture sur des exemples simples de plusieurs implémentations d’une même structure de données
permet de faire émerger les notions d’interface et d’implémentation, ou encore de structure de
données abstraite.

Le paradigme de la programmation objet peut être utilisé pour réaliser des implémentations
effectives des structures de données, même si ce n’est pas la seule façon de procéder.

Le lien est établi avec la notion de modularité qui figure dans la rubrique « langages et
programmation » en mettant en évidence l’intérêt d’utiliser des bibliothèques ou des API
(Application Programming Interface).

+-------------------------+------------------------------------+------------------------------------------+
| Contenus                | Capacités attendues                | Commentaires                             |
+=========================+====================================+==========================================+
| Structures de données,  | Spécifier une structure de         | L’abstraction des structures de          |
| interface et            | données par son interface.         | données est introduite après             |
| implémentation.         |                                    | plusieurs implémentations d’une          |
|                         | Distinguer interface et            | structure simple comme la file           |
|                         | implémentation.                    | (avec un tableau ou avec deux            |
|                         |                                    | piles).                                  |
|                         | Écrire plusieurs implémentations   |                                          |
|                         | d’une même structure de            |                                          |
|                         | données.                           |                                          |
|                         |                                    |                                          |
+-------------------------+------------------------------------+------------------------------------------+
| Vocabulaire de la       | Écrire la définition d’une classe. | On n’aborde pas ici tous les             |
| programmation objet :   |                                    | aspects de la programmation              |
| classes, attributs,     | Accéder aux attributs et           | objet comme le polymorphisme et          |
| méthodes, objets.       | méthodes d’une classe.             | l’héritage.                              |
+-------------------------+------------------------------------+------------------------------------------+
| Listes, piles, files :  | Distinguer des structures par le   | On distingue les modes FIFO(_first_      |
| structures linéaires.   | jeu des méthodes qui les           | _in first out_) et LIFO (_last in first_ |
|                         | caractérisent.                     | _out_) des piles et des files.           |
| Dictionnaires, index et |                                    |                                          |
| clé.                    | Choisir une structure de           |                                          |
|                         | données adaptée à la situation à   |                                          |
|                         | modéliser.                         |                                          |
|                         |                                    |                                          |
|                         | Distinguer la recherche d’une      |                                          |
|                         | valeur dans une liste et dans un   |                                          |
|                         | dictionnaire.                      |                                          |
|                         |                                    |                                          |
+-------------------------+------------------------------------+------------------------------------------+
| Arbres : structures     | Identifier des situations          | On fait le lien avec la rubrique         |
| hiérarchiques.          | nécessitant une structure de       | « algorithmique ».                       |
|                         | données arborescente.              |                                          |
| Arbres binaires :       |                                    |                                          |
| nœuds, racines,         | Évaluer quelques mesures des       |                                          |
| feuilles,               | arbres binaires (taille,           |                                          |
| sous-arbres gauches,    | encadrement de la hauteur,         |                                          |
| sous-arbres droits.     | etc.).                             |                                          |
+-------------------------+------------------------------------+------------------------------------------+
| Graphes : structures    | Modéliser des situations sous      | On s’appuie sur des exemples             |
| relationnelles.         | forme de graphes.                  | comme le réseau routier, le              |
|                         |                                    | réseau électrique, Internet, les         |
| Sommets, arcs, arêtes,  | Écrire les implémentations         | réseaux sociaux.                         |
| graphes orientés ou     | correspondantes d’un graphe :      |                                          |
| non orientés.           | matrice d’adjacence, liste de      | Le choix de la représentation            |
|                         | successeurs/de prédécesseurs.      | dépend du traitement qu’on veut          |
|                         |                                    | mettre en place : on fait le lien        |
|                         | Passer d’une représentation à      | avec la rubrique « algorithmique ».      |
|                         | une autre.                         |                                          |
|                         |                                    |                                          |
|                         |                                    |                                          |
+-------------------------+------------------------------------+------------------------------------------+


### Bases de données

Le développement des traitements informatiques nécessite la manipulation de données de plus en plus
nombreuses. Leur organisation et leur stockage constituent un enjeu essentiel de performance.

Le recours aux bases de données relationnelles est aujourd’hui une solution très répandue. Ces
bases de données permettent d’organiser, de stocker, de mettre à jour et d’interroger des données
structurées volumineuses utilisées simultanément par différents programmes ou différents
utilisateurs. Cela est impossible avec les représentations tabulaires étudiées en classe de
première.

Des systèmes de gestion de bases de données (SGBD) de très grande taille (de l’ordre du pétaoctet)
sont au centre de nombreux dispositifs de collecte, de stockage et de production d’informations.

L’accès aux données d’une base de données relationnelle s’effectue grâce à des requêtes
d’interrogation et de mise à jour qui peuvent par exemple être rédigées dans le langage SQL
(_Structured Query Language_). Les traitements peuvent conjuguer le recours au langage SQL et à un
langage de programmation.

Il convient de sensibiliser les élèves à un usage critique et responsable des données.

+--------------------------+-------------------------------------+------------------------------------+
| Contenus                 | Capacités attendues                 | Commentaires                       |
+==========================+=====================================+====================================+
| Modèle relationnel :     | Identifier les concepts définissant | Ces concepts permettent            |
| relation, attribut,      | le modèle relationnel.              | d’exprimer les contraintes         |
| domaine, clef primaire,  |                                     | d’intégrité (domaine, relation et  |
| clef étrangère, schéma   |                                     | référence).                        |
| relationnel.             |                                     |                                    |
+--------------------------+-------------------------------------+------------------------------------+
| Base de données          | Savoir distinguer la structure      | La structure est un ensemble de    |
| relationnelle.           | d’une base de données de son        | schémas relationnels qui           |
|                          | contenu.                            | respecte les contraintes du        |
|                          |                                     | modèle relationnel.                |
|                          | Repérer des anomalies dans le       |                                    |
|                          | schéma d’une base de données.       | Les anomalies peuvent être des     |
|                          |                                     | redondances de données ou des      |
|                          |                                     | anomalies d’insertion, de          |
|                          |                                     | suppression, de mise à jour.       |
|                          |                                     |                                    |
|                          |                                     | On privilégie la manipulation de   |
|                          |                                     | données nombreuses et              |
|                          |                                     | réalistes.                         |
+--------------------------+-------------------------------------+------------------------------------+
| Système de gestion de    | Identifier les services rendus par  | Il s’agit de comprendre le rôle et |
| bases de données         | un système de gestion de bases      | les enjeux des différents          |
| relationnelles.          | de données relationnelles :         | services sans en détailler le      |
|                          | persistance des données, gestion    | fonctionnement.                    |
|                          | des accès concurrents, efficacité   |                                    |
|                          | de traitement des requêtes,         |                                    |
|                          | sécurisation des accès.             |                                    |
+--------------------------+-------------------------------------+------------------------------------+
| Langage SQL :            | Identifier les composants d’une     | On peut utiliser `DISTINCT`,       |
| requêtes d’interrogation | requête.                            | `ORDER BY` ou les fonctions        |
| et de mise à jour d’une  |                                     | d’agrégation sans utiliser les     |
| base de données.         | Construire des requêtes             | clauses `GROUP BY` et `HAVING`.    |
|                          | d’interrogation à l’aide des        |                                    |
|                          | clauses du langage SQL :            |                                    |
|                          | `SELECT`, `FROM`, `WHERE`, `JOIN`.  |                                    |
|                          |                                     |                                    |
|                          | Construire des requêtes             |                                    |
|                          | d’insertion et de mise à jour à     |                                    |
|                          | l’aide de : `UPDATE`, `INSERT`,     |                                    |
|                          | `DELETE`.                           |                                    |
+--------------------------+-------------------------------------+------------------------------------+



### Architectures matérielles, systèmes d’exploitation et réseaux

La réduction de taille des éléments des circuits électroniques a conduit à l’avènement de
systèmes sur puce (SoCs pour Systems on Chips en anglais) qui regroupent dans un seul
circuit nombre de fonctions autrefois effectuées par des circuits séparés assemblés sur une
carte électronique. Un tel système sur puce est conçu et mis au point de façon logicielle, ses
briques électroniques sont accessibles par des API, comme pour les bibliothèques
logicielles.

Toute machine est dotée d’un système d’exploitation qui a pour fonction de charger les
programmes depuis la mémoire de masse et de lancer leur exécution en leur créant des
processus, de gérer l’ensemble des ressources, de traiter les interruptions ainsi que les
entrées-sorties et enfin d’assurer la sécurité globale du système.

Dans un réseau, les routeurs jouent un rôle essentiel dans la transmission des paquets sur
Internet : les paquets sont routés individuellement par des algorithmes. Les pertes logiques
peuvent être compensées par des protocoles reposant sur des accusés de réception ou des
demandes de renvoi, comme TCP.

La protection des données sensibles échangées est au cœur d’Internet. Les notions de
chiffrement et de déchiffrement de paquets pour les communications sécurisées sont
explicitées.

+------------------------+-------------------------------------+----------------------------------------+
| Contenus               | Capacités attendues                 | Commentaires                           |
+========================+=====================================+========================================+
| Composants intégrés    | Identifier les principaux           | Le circuit d’un téléphone peut être    |
| d’un système sur puce. | composants sur un schéma de         | pris comme un exemple :                |
|                        | circuit et les avantages de leur    | microprocesseurs, mémoires             |
|                        | intégration en termes de vitesse    | locales, interfaces radio et filaires, |
|                        | et de consommation.                 | gestion d’énergie, contrôleurs         |
|                        |                                     | vidéo, accélérateur graphique,         |
|                        |                                     | réseaux sur puce, etc.                 |
+------------------------+-------------------------------------+----------------------------------------+
| Gestion des processus  | Décrire la création d’un            | À l’aide d’outils standard, il s’agit  |
| et des ressources par  | processus, l’ordonnancement de      | d’observer les processus actifs ou     |
| un système             | plusieurs processus par le          | en attente sur une machine.            |
| d’exploitation.        | système.                            | Une présentation débranchée de         |
|                        |                                     | l’interblocage peut être proposée.     |
|                        | Mettre en évidence le risque de     |                                        |
|                        | l’interblocage (deadlock).          |                                        |
|                        |                                     |                                        |
+------------------------+-------------------------------------+----------------------------------------+
| Protocoles de routage. | Identifier, suivant le protocole de | En mode débranché, les tables de       |
|                        | routage utilisé, la route           | routage étant données, on se           |
|                        | empruntée par un paquet.            | réfère au nombre de sauts              |
|                        |                                     | (protocole RIP) ou au coût des         |
|                        |                                     | routes (protocole OSPF).               |
|                        |                                     |                                        |
|                        |                                     | Le lien avec les algorithmes de        |
|                        |                                     | recherche de chemin sur un             |
|                        |                                     | graphe est mis en évidence.            |
+------------------------+-------------------------------------+----------------------------------------+
| Sécurisation des       | Décrire les principes de            | Les protocoles symétriques et          |
| communications.        | chiffrement symétrique (clef        | asymétriques peuvent être              |
|                        | partagée) et asymétrique (avec      | illustrés en mode débranché,           |
|                        | clef privée/clef publique).         | éventuellement avec description        |
|                        |                                     | d’un chiffrement particulier.          |
|                        | Décrire l’échange d’une clef        |                                        |
|                        | symétrique en utilisant un          | La négociation de la méthode           |
|                        | protocole asymétrique pour          | chiffrement du protocole SSL           |
|                        | sécuriser une communication         | (Secure Sockets Layer) n’est pas       |
|                        | HTTPS.                              | abordée.                               |
+------------------------+-------------------------------------+----------------------------------------+

### Langages et programmation

Le travail entrepris en classe de première sur les méthodes de programmation est prolongé. L’accent
est mis sur une programmation assurant une meilleure sûreté, c’est-à-dire minimisant le nombre
d’erreurs. Parallèlement, on montre l’universalité et les limites de la notion de calculabilité.

La récursivité est une méthode fondamentale de programmation. Son introduction permet également de
diversifier les algorithmes étudiés. En classe terminale, les élèves s’initient à différents
paradigmes de programmation pour ne pas se limiter à une démarche impérative.

+---------------------+----------------------------------+--------------------------------------+
| Contenus            | Capacités attendues              | Commentaires                         |
+=====================+==================================+======================================+
| Notion de programme | Comprendre que tout              | L’utilisation d’un interpréteur ou   |
| en tant que donnée. | programme est aussi une          | d’un compilateur, le                 |
|                     | donnée.                          | téléchargement de logiciel, le       |
| Calculabilité,      |                                  | fonctionnement des systèmes          |
| décidabilité.       | Comprendre que la calculabilité  | d’exploitation permettent de         |
|                     | ne dépend pas du langage de      | comprendre un programme              |
|                     | programmation utilisé.           | comme donnée d’un autre              |
|                     |                                  | programme.                           |
|                     | Montrer, sans formalisme         |                                      |
|                     | théorique, que le problème de    |                                      |
|                     | l’arrêt est indécidable.         |                                      |
+---------------------+----------------------------------+--------------------------------------+
| Récursivité.        | Écrire un programme récursif.    | Des exemples relevant de             |
|                     |                                  | domaines variés sont à privilégier.  |
|                     | Analyser le fonctionnement d’un  |                                      |
|                     | programme récursif.              |                                      |
+---------------------+----------------------------------+--------------------------------------+
| Modularité.         | Utiliser des API (Application    |                                      |
|                     | Programming Interface) ou des    |                                      |
|                     | bibliothèques.                   |                                      |
|                     |                                  |                                      |
|                     | Exploiter leur documentation.    |                                      |
|                     | Créer des modules simples et     |                                      |
|                     | les documenter.                  |                                      |
+---------------------+----------------------------------+--------------------------------------+
| Paradigmes de       | Distinguer sur des exemples les  | Choisir le paradigme de              |
| programmation.      | paradigmes impératif,            | programmation selon le champ         |
|                     | fonctionnel et objet.            | d’application d’un programme.        |
|                     |                                  | Avec un même langage de              |
|                     |                                  | programmation, on peut utiliser      |
|                     |                                  | des paradigmes différents. Dans      |
|                     |                                  | un même programme, on peut           |
|                     |                                  | utiliser des paradigmes différents.  |
+---------------------+----------------------------------+--------------------------------------+
| Mise au point des   | Dans la pratique de la           | On prolonge le travail entrepris en  |
| programmes.         | programmation, savoir répondre   | classe de première sur l’utilisation |
|                     | aux causes typiques de bugs :    | de la spécification, des assertions, |
| Gestion des bugs.   | problèmes liés au typage, effets | de la documentation des              |
|                     | de bord non désirés,             | programmes et de la construction     |
|                     | débordements dans les            | de jeux de tests.                    |
|                     | tableaux, instruction            |                                      |
|                     | conditionnelle non exhaustive,   | Les élèves apprennent                |
|                     | choix des inégalités,            | progressivement à anticiper leurs    |
|                     | comparaisons et calculs entre    | erreurs.                             |
|                     | flottants, mauvais nommage des   |                                      |
|                     | variables, etc.                  |                                      |
+---------------------+----------------------------------+--------------------------------------+

### Algorithmique

Le travail de compréhension et de conception d’algorithmes se poursuit en terminale
notamment via l’introduction des structures d’arbres et de graphes montrant tout l’intérêt
d’une approche récursive dans la résolution algorithmique de problèmes.

On continue l’étude de la notion de coût d’exécution, en temps ou en mémoire et on montre
l’intérêt du passage d’un coût quadratique en n^2 à _n_ log 2 n ou de n à log 2 n. Le logarithme en
base 2 est ici manipulé comme simple outil de comptage (taille en bits d’un nombre entier).

+------------------------+-----------------------------------+---------------------------------------+
| Contenus               | Capacités attendues               | Commentaires                          |
+========================+===================================+=======================================+
| Algorithmes sur les    | Calculer la taille et la hauteur  | Une structure de données              |
| arbres binaires et sur | d’un arbre.                       | récursive adaptée est utilisée.       |
| les arbres binaires de |                                   |                                       |
| recherche.             | Parcourir un arbre de différentes | L’exemple des arbres permet           |
|                        | façons (ordres infixe, préfixe ou | d’illustrer la programmation par      |
|                        | suffixe ; ordre en largeur        | classe.                               |
|                        | d’abord).                         |                                       |
|                        |                                   | La recherche dans un arbre de         |
|                        | Rechercher une clé dans un        | recherche équilibré est de coût       |
|                        | arbre de recherche, insérer une   | logarithmique.                        |
|                        | clé.                              |                                       |
+------------------------+-----------------------------------+---------------------------------------+
| Algorithmes sur les    | Parcourir un graphe en            | Le parcours d’un labyrinthe et le     |
| graphes.               | profondeur d’abord, en largeur    | routage dans Internet sont des        |
|                        | d’abord.                          | exemples d’algorithme sur les         |
|                        |                                   | graphes.                              |
|                        | Repérer la présence d’un cycle    |                                       |
|                        | dans un graphe.                   | L’exemple des graphes permet          |
|                        |                                   | d’illustrer l’utilisation des classes |
|                        | Chercher un chemin dans un        | en programmation.                     |
|                        | graphe.                           |                                       |
+------------------------+-----------------------------------+---------------------------------------+
| Méthode « diviser pour | Écrire un algorithme utilisant la | La rotation d’une image bitmap        |
| régner ».              | méthode « diviser pour régner ».  | d’un quart de tour avec un coût en    |
|                        |                                   | mémoire constant est un bon           |
|                        |                                   | exemple.                              |
|                        |                                   |                                       |
|                        |                                   | L’exemple du tri fusion permet        |
|                        |                                   | également d’exploiter la              |
|                        |                                   | récursivité et d’exhiber un           |
|                        |                                   | algorithme de coût en n log 2 n       |
|                        |                                   | dans les pires des cas.               |
+------------------------+-----------------------------------+---------------------------------------+
| Programmation          | Utiliser la programmation         | Les exemples de l’alignement de       |
| dynamique.             | dynamique pour écrire un          | séquences ou du rendu de              |
|                        | algorithme.                       | monnaie peuvent être présentés.       |
|                        |                                   |                                       |
|                        |                                   | La discussion sur le coût en          |
|                        |                                   | mémoire peut être développée.         |
+------------------------+-----------------------------------+---------------------------------------+
| Recherche textuelle.   | Étudier l’algorithme de Boyer-    | L’intérêt du prétraitement du motif   |
|                        | Moore pour la recherche d’un      | est mis en avant.                     |
|                        | motif dans un texte.              |                                       |
|                        |                                   | L’étude du coût, difficile, ne peut   |
|                        |                                   | être exigée.                          |
+------------------------+-----------------------------------+---------------------------------------+