{"componentChunkName":"component---src-templates-programme-md-js","path":"/tg/nsi/programme","result":{"data":{"markdownRemark":{"html":"<!-- Conversion initiale effectuée grâce à https://pdf2md.morethan.io/ -->\n<blockquote>\n<p>Ce document est une retranscription non officielle du programme de <em>numérique et sciences\ninformatiques</em> de terminale générale applicable à la rentrée 2020. La version officielle est\nconsultable sur\n<a href=\"https://cache.media.education.gouv.fr/file/SPE8_MENJ_25_7_2019/93/3/spe247_annexe_1158933.pdf\">eduscol</a>.</p>\n</blockquote>\n<h2 id=\"préambule\" style=\"position:relative;\"><a href=\"#pr%C3%A9ambule\" aria-label=\"préambule permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Préambule</h2>\n<p>L’enseignement de spécialité de numérique et sciences informatiques du cycle terminal de la voie\ngénérale vise l’appropriation des fondements de l’informatique pour préparer les élèves à une\npoursuite d’études en les formant à la pratique d’une démarche scientifique et en développant leur\nappétence pour des activités de recherche.</p>\n<p>L’objectif de cet enseignement général est l’appropriation des concepts et des méthodes qui fondent\nl’informatique, dans ses dimensions scientifiques et techniques. Il s’appuie sur l’universalité de\nquatre concepts fondamentaux et la variété de leurs interactions :</p>\n<ul>\n<li>les <strong>données</strong>, qui représentent sous une forme numérique unifiée des informations très\ndiverses: textes, images, sons, mesures physiques, sommes d’argent, etc. ;</li>\n<li>les <strong>algorithmes</strong>, qui spécifient de façon abstraite et précise des traitements à effectuer sur\nles données à partir d’opérations élémentaires ;</li>\n<li>les <strong>langages</strong>, qui permettent de traduire les algorithmes abstraits en programmes textuels ou\ngraphiques de façon à ce qu’ils soient exécutables par les machines ;</li>\n<li>les <strong>machines</strong>, et leurs systèmes d’exploitation, qui permettent d’exécuter des programmes en\nenchaînant un grand nombre d’instructions simples, assurent la persistance des données par leur\nstockage et gèrent les communications. Y sont inclus les <strong>objets connectés</strong> et les <strong>réseaux</strong>.</li>\n</ul>\n<p>À ces concepts s’ajoute un élément transversal : les <strong>interfaces</strong> qui permettent la\ncommunication, la collecte des données et la commande des systèmes.</p>\n<p>Cet enseignement prolonge les enseignements d’informatique dispensés à l’école primaire, au collège\nen mathématiques et en technologie et, en classe de seconde, l’enseignement commun Sciences\nnumériques et technologie. Il s’appuie aussi sur l’algorithmique pratiquée en mathématiques en\nclasse de seconde. Il approfondit les notions étudiées et les compétences travaillées en classe de\npremière dans l’enseignement de spécialité. Il autorise tous les choix de couplage avec les autres\nspécialités.</p>\n<p>L’enseignement de spécialité en classe terminale concerne les élèves ayant confirmé ce choix parmi\nles trois spécialités suivies en classe de première. À ce titre, dans le cadre des six heures\nhebdomadaires et dans une logique d'exigence disciplinaire et de préparation à l'enseignement\nsupérieur, les élèves sont amenés à approfondir leurs connaissances et à développer un solide\nniveau de compétences.</p>\n<p>L’enseignement de spécialité de numérique et sciences informatiques permet de développer les\ncompétences suivantes, constitutives de la pensée informatique :</p>\n<ul>\n<li>analyser et modéliser un problème en termes de flux et de traitement d’informations ;</li>\n<li>décomposer un problème en sous-problèmes, reconnaître des situations déjà analysées et réutiliser\ndes solutions ;</li>\n<li>concevoir des solutions algorithmiques ;</li>\n<li>traduire un algorithme dans un langage de programmation, en spécifier les interfaces et les\ninteractions, comprendre et réutiliser des codes sources existants, développer des processus de\nmise au point et de validation de programmes ;</li>\n<li>mobiliser les concepts et les technologies utiles pour assurer les fonctions d’acquisition, de\nmémorisation, de traitement et de diffusion des informations ;</li>\n<li>développer des capacités d’abstraction et de généralisation.</li>\n</ul>\n<p>Cet enseignement se déploie en mettant en activité les élèves, <strong>sous des formes variées</strong> qui\npermettent de développer des compétences transversales :</p>\n<ul>\n<li>faire preuve d’autonomie, d’initiative et de créativité ;</li>\n<li>présenter un problème ou sa solution, développer une argumentation dans le cadre d’un débat ;</li>\n<li>coopérer au sein d’une équipe dans le cadre d’un projet ;</li>\n<li>rechercher de l’information, partager des ressources ;</li>\n<li>faire un usage responsable et critique de l’informatique.</li>\n</ul>\n<p>La progression peut suivre un rythme annuel construit autour de périodes spécifiques favorisant une\nalternance entre divers types d’activités.</p>\n<p>L’enseignement de numérique et sciences informatiques permet l’acquisition des compétences\nnumériques qui font l’objet d’une certification en fin de cycle terminal. Comme tous les\nenseignements de spécialité, il contribue au développement des compétences orales à travers\nnotamment la pratique de l’argumentation. Celle-ci conduit à préciser sa pensée et à expliciter son\nraisonnement de manière à convaincre. Elle permet à chacun de faire évoluer sa pensée, jusqu’à la\nremettre en cause si nécessaire, pour accéder progressivement à la vérité par la preuve. Elle prend\nun relief particulier pour ceux qui choisiront de préparer l’épreuve orale terminale du\nbaccalauréat en l'adossant à cet enseignement de spécialité.</p>\n<h3 id=\"démarche-de-projet\" style=\"position:relative;\"><a href=\"#d%C3%A9marche-de-projet\" aria-label=\"démarche de projet permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Démarche de projet</h3>\n<p>Un enseignement d’informatique ne saurait se réduire à une présentation de concepts ou de méthodes\nsans permettre aux élèves de se les approprier en développant des projets.</p>\n<p>Un quart au moins de l’horaire total de la spécialité est réservé à la conception et à\nl’élaboration de projets conduits par les élèves.</p>\n<p>Les projets réalisés par les élèves, sous la conduite du professeur, constituent un apprentissage\nfondamental tant pour l’appropriation des concepts informatiques que pour l’acquisition de\ncompétences. En classe de première comme en classe terminale, ils peuvent porter sur des\nproblématiques issues d’autres disciplines et ont essentiellement pour but d’imaginer des solutions\nrépondant à un problème ; dans la mesure du possible, il convient de laisser le choix du thème du\nprojet aux élèves. Il peut s’agir d’un approfondissement théorique des concepts étudiés en commun,\nd’une application à d’autres disciplines telle qu’une simulation d’expérience, d’exploitation de\nmodules liés à l’intelligence artificielle et en particulier à l’apprentissage automatique, d’un\ntravail sur des données socioéconomiques, du développement d’un logiciel de lexicographie, d’un\nprojet autour d’un objet connecté ou d’un robot, de la conception d’une bibliothèque implémentant\nune structure de données complexe, d’un problème de traitement d’image ou de son, d’une application\nmobile, par exemple de réalité virtuelle ou augmentée, du développement d’un site Web associé à\nl’utilisation d’une base de données, de la réalisation d’un interpréteur d’un mini-langage, de la\nrecherche d’itinéraire sur une carte (algorithme A*), d’un programme de jeu de stratégie, etc.</p>\n<p>La conduite d’un projet inclut des points d’étape pour faire un bilan avec le professeur, valider\ndes éléments, contrôler l’avancement du projet ou en adapter les objectifs, voire le redéfinir\npartiellement, afin de maintenir la motivation des élèves.</p>\n<p>Les professeurs veillent à ce que les projets restent d’une ambition raisonnable afin de leur\npermettre d’aboutir.</p>\n<h3 id=\"modalités-de-mise-en-œuvre\" style=\"position:relative;\"><a href=\"#modalit%C3%A9s-de-mise-en-%C5%93uvre\" aria-label=\"modalités de mise en œuvre permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Modalités de mise en œuvre</h3>\n<p>Les activités pratiques et la réalisation de projets supposent que chaque élève ait un accès\nindividuel à un équipement relié à Internet.</p>\n<p>Un langage de programmation est nécessaire pour l’écriture des programmes : un langage simple\nd’usage, interprété, concis, libre et gratuit, multiplateforme, largement répandu, riche de\nbibliothèques adaptées et bénéficiant d’une vaste communauté d’auteurs dans le monde éducatif est à\nprivilégier. Au moment de la conception de ce programme, le langage choisi est Python version 3 (ou\nsupérieure).</p>\n<p>L’expertise dans tel ou tel langage de programmation n’est cependant pas un objectif de formation.</p>\n<p>Le professeur s'attachera à contextualiser le plus souvent possible les activités pratiques en\ns'appuyant sur des thèmes d'actualité et des problématiques du monde numérique et d'ingénierie\nnumérique dans lesquels évoluent les élèves.</p>\n<p>La culture du numérique et les sciences informatiques s'acquièrent par la pratique. Il convient de\nplacer au maximum l'élève en situation d'activité. L'emploi de démarche de résolution de problèmes\nest ainsi à privilégier pour mobiliser les différents contenus scientifiques du programme.</p>\n<h2 id=\"éléments-de-programme\" style=\"position:relative;\"><a href=\"#%C3%A9l%C3%A9ments-de-programme\" aria-label=\"éléments de programme permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Éléments de programme</h2>\n<p>Le programme, organisé en six rubriques, ne constitue pas un plan de cours. Il appartient aux\nprofesseurs de choisir leur progression. Les mêmes notions peuvent être développées et éclairées\ndans différentes rubriques et leurs interactions mises en évidence.</p>\n<h3 id=\"histoire-de-linformatique\" style=\"position:relative;\"><a href=\"#histoire-de-linformatique\" aria-label=\"histoire de linformatique permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Histoire de l’informatique</h3>\n<p>Cette rubrique transversale se décline dans chacune des cinq autres.</p>\n<p>Comme tous les concepts scientifiques et techniques, ceux de l’informatique ont une histoire et ont\nété forgés par des personnes. Les algorithmes sont présents dès l’Antiquité, les machines à\ncalculer apparaissent progressivement au XVIIe siècle, les sciences de l’information sont fondées\nau XIXe siècle, mais c’est en 1936 qu’apparaît le concept de machine universelle, capable\nd’exécuter tous les algorithmes, et que les notions de machine, algorithme, langage et information\nsont pensées comme un tout cohérent. Les premiers ordinateurs ont été construits en 1948 et leur\npuissance a ensuite évolué exponentiellement. Parallèlement, les ordinateurs se sont diversifiés\ndans leurs tailles, leurs formes et leurs emplois : téléphones, tablettes, montres connectées,\nordinateurs personnels, serveurs, fermes de calcul, méga-ordinateurs. Le réseau Internet, développé\ndepuis 1969, relie aujourd’hui ordinateurs et objets connectés.</p>\n<div><table class=\"table table-bordered table-hover\"><thead class=\"table-warning\"><tr><th colspan=\"1\" rowspan=\"1\"><p>Contenus</p></th><th colspan=\"1\" rowspan=\"1\"><p>Capacités attendues</p></th><th colspan=\"1\" rowspan=\"1\"><p>Commentaires</p></th></tr></thead><tbody><tr><td colspan=\"1\" rowspan=\"1\"><p>Événements clés de\nl’histoire de\nl’informatique</p></td><td colspan=\"1\" rowspan=\"1\"><p>Situer dans le temps les\nprincipaux événements de\nl’histoire de l’informatique et\nleurs protagonistes.</p></td><td colspan=\"1\" rowspan=\"1\"><p>Identifier l’évolution des rôles\nrelatifs des logiciels et des\nmatériels.</p><p>Ces repères viennent compléter\nceux qui ont été introduits en\npremière.</p><p>Ces repères historiques sont\nconstruits au fur et à mesure de la\nprésentation des concepts et\ntechniques.</p></td></tr></tbody></table></div>\n<h3 id=\"structures-de-données\" style=\"position:relative;\"><a href=\"#structures-de-donn%C3%A9es\" aria-label=\"structures de données permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Structures de données</h3>\n<p>L’écriture sur des exemples simples de plusieurs implémentations d’une même structure de données\npermet de faire émerger les notions d’interface et d’implémentation, ou encore de structure de\ndonnées abstraite.</p>\n<p>Le paradigme de la programmation objet peut être utilisé pour réaliser des implémentations\neffectives des structures de données, même si ce n’est pas la seule façon de procéder.</p>\n<p>Le lien est établi avec la notion de modularité qui figure dans la rubrique « langages et\nprogrammation » en mettant en évidence l’intérêt d’utiliser des bibliothèques ou des API\n(Application Programming Interface).</p>\n<div><table class=\"table table-bordered table-hover\"><thead class=\"table-warning\"><tr><th colspan=\"1\" rowspan=\"1\"><p>Contenus</p></th><th colspan=\"1\" rowspan=\"1\"><p>Capacités attendues</p></th><th colspan=\"1\" rowspan=\"1\"><p>Commentaires</p></th></tr></thead><tbody><tr><td colspan=\"1\" rowspan=\"1\"><p>Structures de données,\ninterface et\nimplémentation.</p></td><td colspan=\"1\" rowspan=\"1\"><p>Spécifier une structure de\ndonnées par son interface.</p><p>Distinguer interface et\nimplémentation.</p><p>Écrire plusieurs implémentations\nd’une même structure de\ndonnées.</p></td><td colspan=\"1\" rowspan=\"1\"><p>L’abstraction des structures de\ndonnées est introduite après\nplusieurs implémentations d’une\nstructure simple comme la file\n(avec un tableau ou avec deux\npiles).</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>Vocabulaire de la\nprogrammation objet :\nclasses, attributs,\nméthodes, objets.</p></td><td colspan=\"1\" rowspan=\"1\"><p>Écrire la définition d’une classe.</p><p>Accéder aux attributs et\nméthodes d’une classe.</p></td><td colspan=\"1\" rowspan=\"1\"><p>On n’aborde pas ici tous les\naspects de la programmation\nobjet comme le polymorphisme et\nl’héritage.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>Listes, piles, files :\nstructures linéaires.</p><p>Dictionnaires, index et\nclé.</p></td><td colspan=\"1\" rowspan=\"1\"><p>Distinguer des structures par le\njeu des méthodes qui les\ncaractérisent.</p><p>Choisir une structure de\ndonnées adaptée à la situation à\nmodéliser.</p><p>Distinguer la recherche d’une\nvaleur dans une liste et dans un\ndictionnaire.</p></td><td colspan=\"1\" rowspan=\"1\"><p>On distingue les modes FIFO(<em>first</em>\n<em>in first out</em>) et LIFO (<em>last in first</em>\n<em>out</em>) des piles et des files.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>Arbres : structures\nhiérarchiques.</p><p>Arbres binaires :\nnœuds, racines,\nfeuilles,\nsous-arbres gauches,\nsous-arbres droits.</p></td><td colspan=\"1\" rowspan=\"1\"><p>Identifier des situations\nnécessitant une structure de\ndonnées arborescente.</p><p>Évaluer quelques mesures des\narbres binaires (taille,\nencadrement de la hauteur,\netc.).</p></td><td colspan=\"1\" rowspan=\"1\"><p>On fait le lien avec la rubrique\n« algorithmique ».</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>Graphes : structures\nrelationnelles.</p><p>Sommets, arcs, arêtes,\ngraphes orientés ou\nnon orientés.</p></td><td colspan=\"1\" rowspan=\"1\"><p>Modéliser des situations sous\nforme de graphes.</p><p>Écrire les implémentations\ncorrespondantes d’un graphe :\nmatrice d’adjacence, liste de\nsuccesseurs/de prédécesseurs.</p><p>Passer d’une représentation à\nune autre.</p></td><td colspan=\"1\" rowspan=\"1\"><p>On s’appuie sur des exemples\ncomme le réseau routier, le\nréseau électrique, Internet, les\nréseaux sociaux.</p><p>Le choix de la représentation\ndépend du traitement qu’on veut\nmettre en place : on fait le lien\navec la rubrique « algorithmique ».</p></td></tr></tbody></table></div>\n<h3 id=\"bases-de-données\" style=\"position:relative;\"><a href=\"#bases-de-donn%C3%A9es\" aria-label=\"bases de données permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bases de données</h3>\n<p>Le développement des traitements informatiques nécessite la manipulation de données de plus en plus\nnombreuses. Leur organisation et leur stockage constituent un enjeu essentiel de performance.</p>\n<p>Le recours aux bases de données relationnelles est aujourd’hui une solution très répandue. Ces\nbases de données permettent d’organiser, de stocker, de mettre à jour et d’interroger des données\nstructurées volumineuses utilisées simultanément par différents programmes ou différents\nutilisateurs. Cela est impossible avec les représentations tabulaires étudiées en classe de\npremière.</p>\n<p>Des systèmes de gestion de bases de données (SGBD) de très grande taille (de l’ordre du pétaoctet)\nsont au centre de nombreux dispositifs de collecte, de stockage et de production d’informations.</p>\n<p>L’accès aux données d’une base de données relationnelle s’effectue grâce à des requêtes\nd’interrogation et de mise à jour qui peuvent par exemple être rédigées dans le langage SQL\n(<em>Structured Query Language</em>). Les traitements peuvent conjuguer le recours au langage SQL et à un\nlangage de programmation.</p>\n<p>Il convient de sensibiliser les élèves à un usage critique et responsable des données.</p>\n<div><table class=\"table table-bordered table-hover\"><thead class=\"table-warning\"><tr><th colspan=\"1\" rowspan=\"1\"><p>Contenus</p></th><th colspan=\"1\" rowspan=\"1\"><p>Capacités attendues</p></th><th colspan=\"1\" rowspan=\"1\"><p>Commentaires</p></th></tr></thead><tbody><tr><td colspan=\"1\" rowspan=\"1\"><p>Modèle relationnel :\nrelation, attribut,\ndomaine, clef primaire,\nclef étrangère, schéma\nrelationnel.</p></td><td colspan=\"1\" rowspan=\"1\"><p>Identifier les concepts définissant\nle modèle relationnel.</p></td><td colspan=\"1\" rowspan=\"1\"><p>Ces concepts permettent\nd’exprimer les contraintes\nd’intégrité (domaine, relation et\nréférence).</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>Base de données\nrelationnelle.</p></td><td colspan=\"1\" rowspan=\"1\"><p>Savoir distinguer la structure\nd’une base de données de son\ncontenu.</p><p>Repérer des anomalies dans le\nschéma d’une base de données.</p></td><td colspan=\"1\" rowspan=\"1\"><p>La structure est un ensemble de\nschémas relationnels qui\nrespecte les contraintes du\nmodèle relationnel.</p><p>Les anomalies peuvent être des\nredondances de données ou des\nanomalies d’insertion, de\nsuppression, de mise à jour.</p><p>On privilégie la manipulation de\ndonnées nombreuses et\nréalistes.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>Système de gestion de\nbases de données\nrelationnelles.</p></td><td colspan=\"1\" rowspan=\"1\"><p>Identifier les services rendus par\nun système de gestion de bases\nde données relationnelles :\npersistance des données, gestion\ndes accès concurrents, efficacité\nde traitement des requêtes,\nsécurisation des accès.</p></td><td colspan=\"1\" rowspan=\"1\"><p>Il s’agit de comprendre le rôle et\nles enjeux des différents\nservices sans en détailler le\nfonctionnement.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>Langage SQL :\nrequêtes d’interrogation\net de mise à jour d’une\nbase de données.</p></td><td colspan=\"1\" rowspan=\"1\"><p>Identifier les composants d’une\nrequête.</p><p>Construire des requêtes\nd’interrogation à l’aide des\nclauses du langage SQL :\n<code class=\"language-text\">SELECT</code>, <code class=\"language-text\">FROM</code>, <code class=\"language-text\">WHERE</code>, <code class=\"language-text\">JOIN</code>.</p><p>Construire des requêtes\nd’insertion et de mise à jour à\nl’aide de : <code class=\"language-text\">UPDATE</code>, <code class=\"language-text\">INSERT</code>,\n<code class=\"language-text\">DELETE</code>.</p></td><td colspan=\"1\" rowspan=\"1\"><p>On peut utiliser <code class=\"language-text\">DISTINCT</code>,\n<code class=\"language-text\">ORDER BY</code> ou les fonctions\nd’agrégation sans utiliser les\nclauses <code class=\"language-text\">GROUP BY</code> et <code class=\"language-text\">HAVING</code>.</p></td></tr></tbody></table></div>\n<h3 id=\"architectures-matérielles-systèmes-dexploitation-et-réseaux\" style=\"position:relative;\"><a href=\"#architectures-mat%C3%A9rielles-syst%C3%A8mes-dexploitation-et-r%C3%A9seaux\" aria-label=\"architectures matérielles systèmes dexploitation et réseaux permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Architectures matérielles, systèmes d’exploitation et réseaux</h3>\n<p>La réduction de taille des éléments des circuits électroniques a conduit à l’avènement de\nsystèmes sur puce (SoCs pour Systems on Chips en anglais) qui regroupent dans un seul\ncircuit nombre de fonctions autrefois effectuées par des circuits séparés assemblés sur une\ncarte électronique. Un tel système sur puce est conçu et mis au point de façon logicielle, ses\nbriques électroniques sont accessibles par des API, comme pour les bibliothèques\nlogicielles.</p>\n<p>Toute machine est dotée d’un système d’exploitation qui a pour fonction de charger les\nprogrammes depuis la mémoire de masse et de lancer leur exécution en leur créant des\nprocessus, de gérer l’ensemble des ressources, de traiter les interruptions ainsi que les\nentrées-sorties et enfin d’assurer la sécurité globale du système.</p>\n<p>Dans un réseau, les routeurs jouent un rôle essentiel dans la transmission des paquets sur\nInternet : les paquets sont routés individuellement par des algorithmes. Les pertes logiques\npeuvent être compensées par des protocoles reposant sur des accusés de réception ou des\ndemandes de renvoi, comme TCP.</p>\n<p>La protection des données sensibles échangées est au cœur d’Internet. Les notions de\nchiffrement et de déchiffrement de paquets pour les communications sécurisées sont\nexplicitées.</p>\n<div><table class=\"table table-bordered table-hover\"><thead class=\"table-warning\"><tr><th colspan=\"1\" rowspan=\"1\"><p>Contenus</p></th><th colspan=\"1\" rowspan=\"1\"><p>Capacités attendues</p></th><th colspan=\"1\" rowspan=\"1\"><p>Commentaires</p></th></tr></thead><tbody><tr><td colspan=\"1\" rowspan=\"1\"><p>Composants intégrés\nd’un système sur puce.</p></td><td colspan=\"1\" rowspan=\"1\"><p>Identifier les principaux\ncomposants sur un schéma de\ncircuit et les avantages de leur\nintégration en termes de vitesse\net de consommation.</p></td><td colspan=\"1\" rowspan=\"1\"><p>Le circuit d’un téléphone peut être\npris comme un exemple :\nmicroprocesseurs, mémoires\nlocales, interfaces radio et filaires,\ngestion d’énergie, contrôleurs\nvidéo, accélérateur graphique,\nréseaux sur puce, etc.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>Gestion des processus\net des ressources par\nun système\nd’exploitation.</p></td><td colspan=\"1\" rowspan=\"1\"><p>Décrire la création d’un\nprocessus, l’ordonnancement de\nplusieurs processus par le\nsystème.</p><p>Mettre en évidence le risque de\nl’interblocage (deadlock).</p></td><td colspan=\"1\" rowspan=\"1\"><p>À l’aide d’outils standard, il s’agit\nd’observer les processus actifs ou\nen attente sur une machine.\nUne présentation débranchée de\nl’interblocage peut être proposée.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>Protocoles de routage.</p></td><td colspan=\"1\" rowspan=\"1\"><p>Identifier, suivant le protocole de\nroutage utilisé, la route\nempruntée par un paquet.</p></td><td colspan=\"1\" rowspan=\"1\"><p>En mode débranché, les tables de\nroutage étant données, on se\nréfère au nombre de sauts\n(protocole RIP) ou au coût des\nroutes (protocole OSPF).</p><p>Le lien avec les algorithmes de\nrecherche de chemin sur un\ngraphe est mis en évidence.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>Sécurisation des\ncommunications.</p></td><td colspan=\"1\" rowspan=\"1\"><p>Décrire les principes de\nchiffrement symétrique (clef\npartagée) et asymétrique (avec\nclef privée/clef publique).</p><p>Décrire l’échange d’une clef\nsymétrique en utilisant un\nprotocole asymétrique pour\nsécuriser une communication\nHTTPS.</p></td><td colspan=\"1\" rowspan=\"1\"><p>Les protocoles symétriques et\nasymétriques peuvent être\nillustrés en mode débranché,\néventuellement avec description\nd’un chiffrement particulier.</p><p>La négociation de la méthode\nchiffrement du protocole SSL\n(Secure Sockets Layer) n’est pas\nabordée.</p></td></tr></tbody></table></div>\n<h3 id=\"langages-et-programmation\" style=\"position:relative;\"><a href=\"#langages-et-programmation\" aria-label=\"langages et programmation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Langages et programmation</h3>\n<p>Le travail entrepris en classe de première sur les méthodes de programmation est prolongé. L’accent\nest mis sur une programmation assurant une meilleure sûreté, c’est-à-dire minimisant le nombre\nd’erreurs. Parallèlement, on montre l’universalité et les limites de la notion de calculabilité.</p>\n<p>La récursivité est une méthode fondamentale de programmation. Son introduction permet également de\ndiversifier les algorithmes étudiés. En classe terminale, les élèves s’initient à différents\nparadigmes de programmation pour ne pas se limiter à une démarche impérative.</p>\n<div><table class=\"table table-bordered table-hover\"><thead class=\"table-warning\"><tr><th colspan=\"1\" rowspan=\"1\"><p>Contenus</p></th><th colspan=\"1\" rowspan=\"1\"><p>Capacités attendues</p></th><th colspan=\"1\" rowspan=\"1\"><p>Commentaires</p></th></tr></thead><tbody><tr><td colspan=\"1\" rowspan=\"1\"><p>Notion de programme\nen tant que donnée.</p><p>Calculabilité,\ndécidabilité.</p></td><td colspan=\"1\" rowspan=\"1\"><p>Comprendre que tout\nprogramme est aussi une\ndonnée.</p><p>Comprendre que la calculabilité\nne dépend pas du langage de\nprogrammation utilisé.</p><p>Montrer, sans formalisme\nthéorique, que le problème de\nl’arrêt est indécidable.</p></td><td colspan=\"1\" rowspan=\"1\"><p>L’utilisation d’un interpréteur ou\nd’un compilateur, le\ntéléchargement de logiciel, le\nfonctionnement des systèmes\nd’exploitation permettent de\ncomprendre un programme\ncomme donnée d’un autre\nprogramme.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>Récursivité.</p></td><td colspan=\"1\" rowspan=\"1\"><p>Écrire un programme récursif.</p><p>Analyser le fonctionnement d’un\nprogramme récursif.</p></td><td colspan=\"1\" rowspan=\"1\"><p>Des exemples relevant de\ndomaines variés sont à privilégier.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>Modularité.</p></td><td colspan=\"1\" rowspan=\"1\"><p>Utiliser des API (Application\nProgramming Interface) ou des\nbibliothèques.</p><p>Exploiter leur documentation.\nCréer des modules simples et\nles documenter.</p></td><td colspan=\"1\" rowspan=\"1\"></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>Paradigmes de\nprogrammation.</p></td><td colspan=\"1\" rowspan=\"1\"><p>Distinguer sur des exemples les\nparadigmes impératif,\nfonctionnel et objet.</p></td><td colspan=\"1\" rowspan=\"1\"><p>Choisir le paradigme de\nprogrammation selon le champ\nd’application d’un programme.\nAvec un même langage de\nprogrammation, on peut utiliser\ndes paradigmes différents. Dans\nun même programme, on peut\nutiliser des paradigmes différents.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>Mise au point des\nprogrammes.</p><p>Gestion des bugs.</p></td><td colspan=\"1\" rowspan=\"1\"><p>Dans la pratique de la\nprogrammation, savoir répondre\naux causes typiques de bugs :\nproblèmes liés au typage, effets\nde bord non désirés,\ndébordements dans les\ntableaux, instruction\nconditionnelle non exhaustive,\nchoix des inégalités,\ncomparaisons et calculs entre\nflottants, mauvais nommage des\nvariables, etc.</p></td><td colspan=\"1\" rowspan=\"1\"><p>On prolonge le travail entrepris en\nclasse de première sur l’utilisation\nde la spécification, des assertions,\nde la documentation des\nprogrammes et de la construction\nde jeux de tests.</p><p>Les élèves apprennent\nprogressivement à anticiper leurs\nerreurs.</p></td></tr></tbody></table></div>\n<h3 id=\"algorithmique\" style=\"position:relative;\"><a href=\"#algorithmique\" aria-label=\"algorithmique permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Algorithmique</h3>\n<p>Le travail de compréhension et de conception d’algorithmes se poursuit en terminale\nnotamment via l’introduction des structures d’arbres et de graphes montrant tout l’intérêt\nd’une approche récursive dans la résolution algorithmique de problèmes.</p>\n<p>On continue l’étude de la notion de coût d’exécution, en temps ou en mémoire et on montre\nl’intérêt du passage d’un coût quadratique en n^2 à <em>n</em> log 2 n ou de n à log 2 n. Le logarithme en\nbase 2 est ici manipulé comme simple outil de comptage (taille en bits d’un nombre entier).</p>\n<div><table class=\"table table-bordered table-hover\"><thead class=\"table-warning\"><tr><th colspan=\"1\" rowspan=\"1\"><p>Contenus</p></th><th colspan=\"1\" rowspan=\"1\"><p>Capacités attendues</p></th><th colspan=\"1\" rowspan=\"1\"><p>Commentaires</p></th></tr></thead><tbody><tr><td colspan=\"1\" rowspan=\"1\"><p>Algorithmes sur les\narbres binaires et sur\nles arbres binaires de\nrecherche.</p></td><td colspan=\"1\" rowspan=\"1\"><p>Calculer la taille et la hauteur\nd’un arbre.</p><p>Parcourir un arbre de différentes\nfaçons (ordres infixe, préfixe ou\nsuffixe ; ordre en largeur\nd’abord).</p><p>Rechercher une clé dans un\narbre de recherche, insérer une\nclé.</p></td><td colspan=\"1\" rowspan=\"1\"><p>Une structure de données\nrécursive adaptée est utilisée.</p><p>L’exemple des arbres permet\nd’illustrer la programmation par\nclasse.</p><p>La recherche dans un arbre de\nrecherche équilibré est de coût\nlogarithmique.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>Algorithmes sur les\ngraphes.</p></td><td colspan=\"1\" rowspan=\"1\"><p>Parcourir un graphe en\nprofondeur d’abord, en largeur\nd’abord.</p><p>Repérer la présence d’un cycle\ndans un graphe.</p><p>Chercher un chemin dans un\ngraphe.</p></td><td colspan=\"1\" rowspan=\"1\"><p>Le parcours d’un labyrinthe et le\nroutage dans Internet sont des\nexemples d’algorithme sur les\ngraphes.</p><p>L’exemple des graphes permet\nd’illustrer l’utilisation des classes\nen programmation.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>Méthode « diviser pour\nrégner ».</p></td><td colspan=\"1\" rowspan=\"1\"><p>Écrire un algorithme utilisant la\nméthode « diviser pour régner ».</p></td><td colspan=\"1\" rowspan=\"1\"><p>La rotation d’une image bitmap\nd’un quart de tour avec un coût en\nmémoire constant est un bon\nexemple.</p><p>L’exemple du tri fusion permet\négalement d’exploiter la\nrécursivité et d’exhiber un\nalgorithme de coût en n log 2 n\ndans les pires des cas.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>Programmation\ndynamique.</p></td><td colspan=\"1\" rowspan=\"1\"><p>Utiliser la programmation\ndynamique pour écrire un\nalgorithme.</p></td><td colspan=\"1\" rowspan=\"1\"><p>Les exemples de l’alignement de\nséquences ou du rendu de\nmonnaie peuvent être présentés.</p><p>La discussion sur le coût en\nmémoire peut être développée.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>Recherche textuelle.</p></td><td colspan=\"1\" rowspan=\"1\"><p>Étudier l’algorithme de Boyer-\nMoore pour la recherche d’un\nmotif dans un texte.</p></td><td colspan=\"1\" rowspan=\"1\"><p>L’intérêt du prétraitement du motif\nest mis en avant.</p><p>L’étude du coût, difficile, ne peut\nêtre exigée.</p></td></tr></tbody></table></div>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#pr%C3%A9ambule\">Préambule</a></p>\n<ul>\n<li><a href=\"#d%C3%A9marche-de-projet\">Démarche de projet</a></li>\n<li><a href=\"#modalit%C3%A9s-de-mise-en-%C5%93uvre\">Modalités de mise en œuvre</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%C3%A9l%C3%A9ments-de-programme\">Éléments de programme</a></p>\n<ul>\n<li><a href=\"#histoire-de-linformatique\">Histoire de l’informatique</a></li>\n<li><a href=\"#structures-de-donn%C3%A9es\">Structures de données</a></li>\n<li><a href=\"#bases-de-donn%C3%A9es\">Bases de données</a></li>\n<li><a href=\"#architectures-mat%C3%A9rielles-syst%C3%A8mes-dexploitation-et-r%C3%A9seaux\">Architectures matérielles, systèmes d’exploitation et réseaux</a></li>\n<li><a href=\"#langages-et-programmation\">Langages et programmation</a></li>\n<li><a href=\"#algorithmique\">Algorithmique</a></li>\n</ul>\n</li>\n</ul>","fields":{"classe":"tg","matter":"nsi","slug":"tg/nsi/programme"}}},"pageContext":{"slug":"tg/nsi/programme"}},"staticQueryHashes":["604483588"]}