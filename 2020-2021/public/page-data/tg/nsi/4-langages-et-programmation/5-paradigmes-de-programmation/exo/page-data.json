{"componentChunkName":"component---src-templates-exo-md-js","path":"/tg/nsi/4-langages-et-programmation/5-paradigmes-de-programmation/exo","result":{"data":{"markdownRemark":{"html":"<h2 id=\"qcm\" style=\"position:relative;\"><a href=\"#qcm\" aria-label=\"qcm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>QCM</h2>\n<ol>\n<li>Quelle est la sortie du code suivant,</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">:</span>\n   <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n       self<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n       self<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n     \np1 <span class=\"token operator\">=</span> Point<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">0 0</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">1 1</code>  </li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">1 2</code>  </li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">2 3</code></li>\n<li>Quelle est la sortie du code suivant?</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">:</span>\n   <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n       self<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n       self<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n     \np2 <span class=\"token operator\">=</span> Point<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">0 0</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">1 1</code>  </li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">1 2</code>  </li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">2 3</code></li>\n<li>Quelle est la sortie du code suivant?</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">double <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\ntriple <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x <span class=\"token operator\">*</span> <span class=\"token number\">3</span>\nx <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\nx <span class=\"token operator\">=</span> double<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> \nx <span class=\"token operator\">=</span> triple<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> \nx <span class=\"token operator\">=</span> double<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">2</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">8</code>  </li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">24</code>  </li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">SyntaxError</code></li>\n<li>On souhaite écrire une fonction <code class=\"language-text\">bonjour</code> qui prend un paramètre <code class=\"language-text\">prénom</code> et qui retourne\n<code class=\"language-text\">&quot;Bonjour &lt;prénom&gt; :)&quot;</code>, par exemple une fois appelée avec l'argument <code class=\"language-text\">Python</code>, cette fonction\nrenverrai <code class=\"language-text\">&quot;Bonjour Python :)&quot;</code>.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> La définition s'écrit: <code class=\"language-text\">bonjour = (&quot;Bonjour &quot; + a + &quot; :)&quot;)</code>, et l'appel s'écrit: <code class=\"language-text\">bonjour(&quot;Python&quot;)</code>.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> La définition s'écrit: <code class=\"language-text\">bonjour = lambda a: &quot;Bonjour &quot; + a + &quot; :)&quot;</code>, et l'appel s'écrit: <code class=\"language-text\">bonjour(&quot;Python&quot;)</code>.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> La définition s'écrit: <code class=\"language-text\">lambda a: &quot;Bonjour &quot; + a + &quot; :) = bonjour&quot;</code>, et l'appel s'écrit: <code class=\"language-text\">bonjour(&quot;Python&quot;)</code>.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Cette définition est impossibla car une fonction ne peut pas renvoyer plusieurs valeurs.</li>\n</ul>\n<h2 id=\"programmation-fonctionnelle-avec-filter-map-reduce\" style=\"position:relative;\"><a href=\"#programmation-fonctionnelle-avec-filter-map-reduce\" aria-label=\"programmation fonctionnelle avec filter map reduce permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Programmation fonctionnelle avec <code class=\"language-text\">filter</code>, <code class=\"language-text\">map</code>, <code class=\"language-text\">reduce</code></h2>\n<ol>\n<li>\n<p>Bien que ces fonctions soient définies en Python, nous allons les implémenter avec les noms\nsuivants:</p>\n<p>a) <code class=\"language-text\">filtre(fonction, liste)</code> <em>(filter)</em>: fonction qui prend deux paramètres en entrée:</p>\n<ul>\n<li>un fonction de décision à 1 paramètre de type simple(<code class=\"language-text\">int pour simplifier</code>).</li>\n<li>et une liste,</li>\n</ul>\n<p> Cette fonction renvoie une nouvelle liste avec seulement les éléments ayant satisfait la\nfonction de décision.</p>\n<p> Voici quelques tests à effectuer pour vérifier son fonctionnement:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># nb impairs</span>\n<span class=\"token keyword\">assert</span> filtre<span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># nb pairs</span>\n<span class=\"token keyword\">assert</span> filtre<span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>b) <code class=\"language-text\">applique(fonction, liste)</code> <em>(map)</em>: fonction qui prend deux paramètres en entrée:</p>\n<ul>\n<li>un fonction à 1 paramètre de type simple(<code class=\"language-text\">int pour simplifier</code>) qui renvoie une valeur.</li>\n<li>et une liste,</li>\n</ul>\n<p> Cette fonction renvoie une nouvelle liste pour laquelle a été appliqué la fonction donnée en\nargument à chacun des éléments de la liste d'entrée.</p>\n<p> Voici quelques tests à effectuer pour vérifier son fonctionnement:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># doubles</span>\n<span class=\"token keyword\">assert</span> applique<span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x <span class=\"token operator\">**</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># puissances de 2</span>\n<span class=\"token keyword\">assert</span> applique<span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> n<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token operator\">**</span>n<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>c) <code class=\"language-text\">réduit</code> <em>(reduce)</em>: fonction qui prend deux paramètres en entrée:</p>\n<ul>\n<li>un fonction à 2 paramètres de type simple qui renvoie une valeur.</li>\n<li>une liste.</li>\n</ul>\n<p> Cette fonction renvoie une valeur par l'accumulation des valeurs de la liste par la fonction\nd'accumulation donnée en argument.</p>\n<p> Voici quelques tests à effectuer pour vérifier son fonctionnement:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># addition des éléments</span>\n<span class=\"token keyword\">assert</span> réduit<span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">10</span>\n<span class=\"token comment\"># soustraction des éléments</span>\n<span class=\"token keyword\">assert</span> réduit<span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> x <span class=\"token operator\">-</span> y<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">10</span>\n<span class=\"token comment\"># concaténation des éléments</span>\n<span class=\"token keyword\">assert</span> réduit<span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"01234\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>En utilisant la fonction <code class=\"language-text\">applique</code>, créer en une ligne une fonction <code class=\"language-text\">négatif</code> qui permet de\npasser ce test:\n<code class=\"language-text\">python\nassert négatif([0, 1, 2, 3, 4]) == [0, -1, -2, -3, -4]</code></li>\n<li>En utilisant la fonction <code class=\"language-text\">réduit</code>, créer en une ligne une fonction <code class=\"language-text\">longueur</code> qui permet de\npasser ces tests:\n<code class=\"language-text\">python\nassert longueur([]) == 0\nassert longueur([0, 1, 2]) == 3\nassert longueur([0, 1, 2, 3, 4]) == 5</code></li>\n</ol>","fields":{"classe":"tg","chapter":"Paradigmes de programmation","matter":"nsi","nChapter":"5","part":"Langages et programmation","nPart":"4","type":"exo"}}},"pageContext":{"slug":"tg/nsi/4-langages-et-programmation/5-paradigmes-de-programmation/exo"}},"staticQueryHashes":["604483588"]}