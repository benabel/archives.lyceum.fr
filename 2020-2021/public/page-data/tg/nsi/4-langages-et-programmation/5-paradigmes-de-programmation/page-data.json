{"componentChunkName":"component---src-templates-cours-md-js","path":"/tg/nsi/4-langages-et-programmation/5-paradigmes-de-programmation","result":{"data":{"markdownRemark":{"html":"<details class=\"programme\"><summary>Programme Officiel</summary><div><table class=\"table table-bordered table-hover\"><thead class=\"table-warning\"><tr><th colspan=\"1\" rowspan=\"1\"><p>Contenus</p></th><th colspan=\"1\" rowspan=\"1\"><p>Capacités attendues</p></th><th colspan=\"1\" rowspan=\"1\"><p>Commentaires</p></th></tr></thead><tbody><tr><td colspan=\"1\" rowspan=\"1\"><p>Paradigmes de\nprogrammation.</p></td><td colspan=\"1\" rowspan=\"1\"><p>Distinguer sur des exemples les\nparadigmes impératif,\nfonctionnel et objet.</p></td><td colspan=\"1\" rowspan=\"1\"><p>Choisir le paradigme de\nprogrammation selon le champ\nd’application d’un programme.\nAvec un même langage de\nprogrammation, on peut utiliser\ndes paradigmes différents. Dans\nun même programme, on peut\nutiliser des paradigmes différents.</p></td></tr></tbody></table></div><a class=\"lien-programme\" href=\"../programme/\">Lien vers le programme complet</a></details>\n<blockquote>\n<p>La création du premier programme informatique par Ada Lovelace sur la machine de Babbage en 1842\na permis de formaliser les <a href=\"/2020-2021/1g/nsi/7-langages-et-programmation/1-les-ingredients-dun-algorithme\">ingrédients des\nalgorithmes</a> tels que nous\nles connaissons: affectations, boucles, conditions Cependant, maintenant que l'informatique\nest présente dans très nombreux domaines, il s'est avéré nécessaire d'adapter la programmation\naux problèmes à traiter. Ces approches appelées <em>paradigmes de programmation</em> fournissent au\ndéveloppeur une vue différente de la façon dont s'éxecute le programme, la <a href=\"/2020-2021/tg/nsi/1-structures-de-donnees/2-programmation-objet\">programmation\norientée objet</a> en est un exemple bien\nconnu.</p>\n</blockquote>\n<h2 id=\"les-trois-grands-types-de-programmation\" style=\"position:relative;\"><a href=\"#les-trois-grands-types-de-programmation\" aria-label=\"les trois grands types de programmation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Les trois grands types de programmation</h2>\n<p>Il existe trois grands types de programmation :</p>\n<ul>\n<li>La programmation <strong>impérative</strong>: le paradigme originel est le plus courant.</li>\n<li>La programmation <strong>orientée objet</strong>(POO) consistant en la définition et l’assemblage de briques\nlogicielles appelées objets.</li>\n<li>La programmation <em>déclarative</em> consistant à déclarer les données du problème, puis à demander au\nprogramme de le résoudre. La programmation <strong>fonctionnelle</strong> en est un exemple représentatif dans\nlequel le résultat souhaité est déclaré comme la valeur d'une série d'applications de fonctions.</li>\n</ul>\n<p>Même si certains langages forcent à utiliser un paradigme de programmation (ex: Smalltalk: POO,\nHaskell: fonctionnnelle), de nombreux langages modernes comme Python (ou Javascript) sont\nmultiparadigmes  et permettent la programmation impérative structurée, fonctionnelle et orientée\nobjet; laissant ainsi le choix au programmeur du paradigme à utiliser en fonction du problème posé.</p>\n<h2 id=\"exemples-dapproches-en-python\" style=\"position:relative;\"><a href=\"#exemples-dapproches-en-python\" aria-label=\"exemples dapproches en python permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exemples d'approches en Python</h2>\n<p>Pour illustrer les différences entre ces paradigmes, nous allons utiliser un exemple très simple\nissu de <a href=\"https://opensource.com/article/19/10/python-programming-paradigms\">opensource.com</a>.</p>\n<p>On a une liste de caractères que nous souhaitons concaténer en une chaine de caractères.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">ENTREE: entrée = [&#39;p&#39;,&#39;y&#39;,&#39;t&#39;,&#39;h&#39;,&#39;o&#39;,&#39;n&#39;]\nSORTIE: sortie = &#39;python&#39;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<h3 id=\"programmation-impérative--le-comment\" style=\"position:relative;\"><a href=\"#programmation-imp%C3%A9rative--le-comment\" aria-label=\"programmation impérative  le comment permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Programmation impérative : <em>le comment</em></h3>\n<p>La programmation impérative est un paradigme de programmation qui décrit les opérations en\nséquences d'instructions exécutées par l'ordinateur pour modifier l'état du programme.</p>\n<p>La programmation impérative se concentre sur la description du fonctionnement d'un programme : <strong>le\ncomment</strong>.</p>\n<p>La plupart des langages de haut niveau comporte cinq types d'instructions principales :</p>\n<ul>\n<li>la séquence d'instructions</li>\n<li>l'assignation ou affectation</li>\n<li>l'instruction conditionnelle(<code class=\"language-text\">if</code>, <code class=\"language-text\">else</code>)</li>\n<li>la boucle(<code class=\"language-text\">for</code>, <code class=\"language-text\">while</code>)</li>\n<li>les branchements(<code class=\"language-text\">GOTO</code> p.ex)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">entrée <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'y'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'t'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'h'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'n'</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># on initialise une chaine vide pour la sortie</span>\nsortie <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n<span class=\"token comment\"># On concatène à l'aide d'une boucle</span>\n<span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> entrée<span class=\"token punctuation\">:</span>\n     sortie <span class=\"token operator\">=</span> sortie <span class=\"token operator\">+</span> c\n \n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sortie<span class=\"token punctuation\">)</span>\npython</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Ce type de programmation est le plus ancien et utilisé, il est facile à comprendre, souvent\nefficace car proche des instructions réalisés par les processeurs. Par contre, il est assez\ndifficile à tester car l'état du programme ne cesse de changer et il est difficile de tester une\npetite partie du programme au milieu de son exécution par exemple car elle ne nécessite que toutes\nles instructions précédentes aient déjà été appliquées correctement.</p>\n<h3 id=\"programmation-fonctionnelle--le-quoi\" style=\"position:relative;\"><a href=\"#programmation-fonctionnelle--le-quoi\" aria-label=\"programmation fonctionnelle  le quoi permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Programmation fonctionnelle : <em>le quoi</em></h3>\n<p>En programmation fonctionnelle <strong>on décrit les résultats que l'on veut obtenir à partir des\ndonnées</strong> plutôt que  la séquence d'instructions qui permettent d'obtenir les résultats <em>(c'est un\nparadigme déclaratif)</em>.</p>\n<p>L'approche fonctionnelle considère le calcul en tant qu'évaluation de <strong>fonctions</strong> mathématiques.\nVous donnez vos données en entrée aux fonctions, qui vous renvoient les valeurs calculées en\nsortie.</p>\n<p>L'utilisation massive de fonctions a amené à la création d'une syntaxe raccourcie pour la définition\nde fonctions anonymes, les fonctions <code class=\"language-text\">lambda</code>s :</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">lambda</span> param1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">,</span> paramN<span class=\"token punctuation\">:</span> valeur_retournée</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Au lieu de:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">ma_fonction</span><span class=\"token punctuation\">(</span>param1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">,</span> paramN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">return</span> valeur_retournée</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>En programmation fonctionnelle, <strong>il n'y a pas d'état</strong>, l'<em>opération d'affectation est interdite</em>,\nce qui permet de s'affranchir des effets secondaires (ou effets de bord).</p>\n<p>Ceci rend les programmes parfaitement prédictibles, faciles à tester et à paralléliser, par contre\nil est souvent compliqué de se débarrasser complétement de l'état du programme.</p>\n<p>Comme vu dans le chapitre précédent, en programmation fonctionnelle, on remplace souvent les\nboucles par des <a href=\"../4-recursivite\">fonctions récursives</a>. Une approche fonctionnelle par la\nrécursion de notre problème pourrait être :</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">entrée <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'y'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'t'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'h'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'n'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">list_to_string</span><span class=\"token punctuation\">(</span>ma_liste<span class=\"token punctuation\">,</span> ma_chaine<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Fonction récursive pour concaténer les éléments d'une liste\"\"\"</span>\n    <span class=\"token keyword\">if</span> ma_liste<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># on enlève le premier élement de la liste</span>\n        <span class=\"token comment\"># qu'on ajoute à la chaine de caractères</span>\n        ma_chaine <span class=\"token operator\">+=</span> ma_liste<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># application récursive</span>\n        <span class=\"token keyword\">return</span> list_to_string<span class=\"token punctuation\">(</span>ma_liste<span class=\"token punctuation\">,</span> ma_chaine<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># cas de base</span>\n        <span class=\"token keyword\">return</span> ma_chaine\n    \n    \nlist_to_string<span class=\"token punctuation\">(</span>entrée<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<details class=\"plus\" data-titre=\"filter, map, reduce\"><summary>filter, map, reduce</summary><p>Parmi les fonctions les plus représentatives de la programmation fonctionnelle, on trouve:\n<code class=\"language-text\">filter</code>, <code class=\"language-text\">map</code> et <code class=\"language-text\">reduce</code> (voir <a href=\"http://sametmax.com/map-filter-et-reduce/\">ici</a> pour plus de\ndétails).</p><div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># on importe le module functools qui comporte </span>\n<span class=\"token comment\"># les utilitaires de programmation fonctionnelle</span>\n<span class=\"token keyword\">import</span> functools\nentrée <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'y'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'t'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'h'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'n'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># on concatène avec la méthode reduce</span>\nsortie <span class=\"token operator\">=</span> functools<span class=\"token punctuation\">.</span><span class=\"token builtin\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> s<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">:</span> s <span class=\"token operator\">+</span> c<span class=\"token punctuation\">,</span> entrée<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sortie<span class=\"token punctuation\">)</span>\npython</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div><p>On utilise ici <code class=\"language-text\">reduce</code> une <a href=\"https://fr.wikipedia.org/wiki/Fonction_d%27ordre_sup%C3%A9rieur\">fonction d'ordre\nsupérieur</a> très utilisée en\nprogrammation fonctionnelle. Cette fonction applique une fonction de deux arguments de manière\ncumulative aux éléments en séquence, de gauche à droite, pour réduire la séquence à une seule\nvaleur. Par exemple:</p><div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">sample_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">import</span> functools\nsomme <span class=\"token operator\">=</span> functools<span class=\"token punctuation\">.</span><span class=\"token builtin\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">,</span> sample_list<span class=\"token punctuation\">)</span>\nsomme\n<span class=\"token number\">15</span>\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">15</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div><p>Pour plus de méthodes fonctionnelles, consulter la documentation du module\n<a href=\"https://docs.python.org/3/library/functools.html\"><code class=\"language-text\">functools</code></a> qui est utilisé pour des fonctions\nde haut niveau : des fonctions qui agissent sur ou revoient d'autres fonctions.</p><p>Une implémentation et des exemples d'utilisation des fonctions <code class=\"language-text\">filter</code>, <code class=\"language-text\">map</code>, <code class=\"language-text\">reduce</code> est\nproposée en <a href=\"./exo\">exercice</a>.</p></details>\n<h3 id=\"programmation-objet-poo\" style=\"position:relative;\"><a href=\"#programmation-objet-poo\" aria-label=\"programmation objet poo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Programmation objet: <em>POO</em></h3>\n<p>La POO consiste en la définition et l'interaction de <strong>briques logicielles appelées objets</strong>; un\nobjet représente un concept, une idée ou toute entité du monde physique, comme une voiture, une\npersonne ou encore une page d'un livre.</p>\n<p>Un objet possède:</p>\n<ul>\n<li>des données: ses <strong>attributs</strong> et</li>\n<li>des fonctions: ses <strong>méthodes</strong></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ListeLettres</span><span class=\"token punctuation\">:</span>\n    <span class=\"token string\">\"Classe permettant de lier une chaîne de caractères à une liste de caractères\"</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> lettres<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"Intialisation de l'objet\n\n        Paramètres\n        ----------\n        lettres: list\n            liste des caractères vide par défaut\n        \"\"\"</span>    \n        <span class=\"token comment\"># initialisation des attributs de l'objet</span>\n        self<span class=\"token punctuation\">.</span>lettres <span class=\"token operator\">=</span> lettres\n        <span class=\"token comment\"># Conversion en chaine de caractères</span>\n        self<span class=\"token punctuation\">.</span>string <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>lettres<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># définition d'une méthode</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_string</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>string\n \nentrée <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'y'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'t'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'h'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'n'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># instanciation de l'objet avec les données de la liste</span>\nobjet_py <span class=\"token operator\">=</span> ListeLettres<span class=\"token punctuation\">(</span>entrée<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># récupération de l'attribut string de l'objet</span>\nobjet_py<span class=\"token punctuation\">.</span>string <span class=\"token comment\"># renvoie 'python'</span>\n\n<span class=\"token comment\"># récupération de l'attribut string grâce à la méthode get_string (préféré)</span>\nobjet_py<span class=\"token punctuation\">.</span>get_string<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># renvoie 'python'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Les différents principes de la conception orientée objet aident à la réutilisation du code, au\nmasquage des données, etc., mais c'est une bête complexe, et comprendre toute la logique des objets\net de leurs interactions est délicat et souvent difficile à tester en raison de ces\ninterdépendances.</p>\n<p>Nous aborderons plus en détail la <a href=\"/2020-2021/tg/nsi/4-langages-et-programmation/6-programmation-objet\">programmation orientée\nobjet</a> au prochain chapitre.</p>\n<h2 id=\"comment-choisir-le-paradigme-à-utiliser\" style=\"position:relative;\"><a href=\"#comment-choisir-le-paradigme-%C3%A0-utiliser\" aria-label=\"comment choisir le paradigme à utiliser permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Comment choisir le paradigme à utiliser?</h2>\n<blockquote>\n<p>Pour simplifier, si votre problème implique une série de manipulations séquentielles simples,\nsuivre le paradigme de <strong>programmation impérative</strong> de la vieille école serait le moins cher en\ntermes de temps et d'efforts et vous donnerait potentiellement les meilleures performances.</p>\n</blockquote>\n<blockquote>\n<p>Dans le cas de problèmes nécessitant des transformations mathématiques des valeurs, le filtrage\ndes informations, le mappage( transformer une liste en une autre) et les réductions( transformer\nune liste en une valeur), la <strong>programmation fonctionnelle</strong> pourrait être adaptée.</p>\n</blockquote>\n<blockquote>\n<p>Si le problème est structuré comme un tas d'objets interdépendants avec certains attributs qui\npeuvent changer avec le temps, en fonction de certaines conditions, la <strong>programmation orientée\nobjet</strong> sera certainement la plus naturelle.</p>\n</blockquote>\n<blockquote>\n<p>Bien sûr, il n'y a pas de règle simple, car le choix du paradigme de programmation dépend\négalement fortement du type de données à traiter, des connaissances des programmeurs et de\ndiverses autres choses comme l'évolutivité.</p>\n</blockquote>\n<p><em class=\"cite-source\"><a href=\"https://opensource.com/article/19/10/python-programming-paradigms\">Perceiving Python programming paradigms</a></em></p>\n<div class=\"ref\"><ul>\n<li><a href=\"https://fr.wikipedia.org/wiki/Paradigme_(programmation)\">Article Wikipedia sur les paradigmes de programmation</a></li>\n<li><a href=\"https://opensource.com/article/19/10/python-programming-paradigms\">Perceiving Python programming paradigms</a></li>\n</ul></div>","tableOfContents":"<ul>\n<li><a href=\"#les-trois-grands-types-de-programmation\">Les trois grands types de programmation</a></li>\n<li>\n<p><a href=\"#exemples-dapproches-en-python\">Exemples d'approches en Python</a></p>\n<ul>\n<li><a href=\"#programmation-imp%C3%A9rative--le-comment\">Programmation impérative : <em>le comment</em></a></li>\n<li><a href=\"#programmation-fonctionnelle--le-quoi\">Programmation fonctionnelle : <em>le quoi</em></a></li>\n<li><a href=\"#programmation-objet-poo\">Programmation objet: <em>POO</em></a></li>\n</ul>\n</li>\n<li><a href=\"#comment-choisir-le-paradigme-%C3%A0-utiliser\">Comment choisir le paradigme à utiliser?</a></li>\n</ul>","frontmatter":{"tags":["cours","terminale","lycée","numérique et sciences informatiques","nsi"]},"fields":{"classe":"tg","chapter":"Paradigmes de programmation","matter":"nsi","nChapter":"5","part":"Langages et programmation","nPart":"4"}}},"pageContext":{"slug":"tg/nsi/4-langages-et-programmation/5-paradigmes-de-programmation","chapter":"Paradigmes de programmation"}},"staticQueryHashes":["604483588"]}