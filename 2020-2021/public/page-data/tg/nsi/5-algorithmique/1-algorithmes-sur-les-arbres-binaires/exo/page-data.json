{"componentChunkName":"component---src-templates-exo-md-js","path":"/tg/nsi/5-algorithmique/1-algorithmes-sur-les-arbres-binaires/exo","result":{"data":{"markdownRemark":{"html":"<h2 id=\"implémentations-des-algorithmes-du-cours\" style=\"position:relative;\"><a href=\"#impl%C3%A9mentations-des-algorithmes-du-cours\" aria-label=\"implémentations des algorithmes du cours permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Implémentations des algorithmes du cours</h2>\n<p>En utilisant le module <a href=\"https://github.com/joowani/binarytree\"><code class=\"language-text\">binarytree</code></a>, implémenter les algorithmes du programme officiel:</p>\n<ul>\n<li>Calculer la hauteur de l'arbre</li>\n<li>Calculer la taille de l'arbre</li>\n<li>\n<p>Parcours de l'arbre</p>\n<ul>\n<li>Parcours préfixe</li>\n<li>Parcours postfixe</li>\n<li>Parcours infixe</li>\n<li>Parcours en largeur</li>\n</ul>\n</li>\n<li>\n<p>Arbre binaire de recherche</p>\n<ul>\n<li>Insertion d'une clé</li>\n<li>Recherche d'une clé</li>\n</ul>\n</li>\n</ul>\n<p>Pour le parcours en largeur, on pourra utiliser la classe <code class=\"language-text\">File</code> suivante.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> deque\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># pas d'initialisation si on crée tjs des files vides</span>\n    _data <span class=\"token operator\">=</span> deque<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">enfiler</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> élément<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>_data<span class=\"token punctuation\">.</span>appendleft<span class=\"token punctuation\">(</span>élément<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">def</span> défiler<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_data<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">est_vide</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">not</span> self<span class=\"token punctuation\">.</span>_data\n\n    <span class=\"token keyword\">def</span> tête<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_data<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id=\"version-itérative-des-parcours-en-profondeur\" style=\"position:relative;\"><a href=\"#version-it%C3%A9rative-des-parcours-en-profondeur\" aria-label=\"version itérative des parcours en profondeur permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Version itérative des parcours en profondeur</h2>\n<p>Il est possible d'écrire des version iteratives (et non récursive) des algorithmes d parcours en profondeur.</p>\n<p>Pour cela on utilisera une pile(stack en anglais).</p>\n<p>Voici les pseudo-codes proposées sur l'article <a href=\"https://en.wikipedia.org/wiki/Tree_traversal#Implementations\">Wikipédia en anglais</a>.</p>\n<h3 id=\"parcours-préfixe-itératif\" style=\"position:relative;\"><a href=\"#parcours-pr%C3%A9fixe-it%C3%A9ratif\" aria-label=\"parcours préfixe itératif permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Parcours préfixe itératif</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">iterativePreorder(node)\n  if (node == null)\n    return\n  s ← empty stack\n  s.push(node)\n  while (not s.isEmpty())\n    node ← s.pop()\n    visit(node)\n    //right child is pushed first so that left is processed first\n    if node.right ≠ null\n      s.push(node.right)\n    if node.left ≠ null\n      s.push(node.left)</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"parcours-infixe-itératif\" style=\"position:relative;\"><a href=\"#parcours-infixe-it%C3%A9ratif\" aria-label=\"parcours infixe itératif permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Parcours infixe itératif</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">iterativeInorder(node)\n  s ← empty stack\n  while (not s.isEmpty() or node ≠ null)\n    if (node ≠ null)\n      s.push(node)\n      node ← node.left\n    else\n      node ← s.pop()\n      visit(node)\n      node ← node.right</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"parcours-postfixe-itératif\" style=\"position:relative;\"><a href=\"#parcours-postfixe-it%C3%A9ratif\" aria-label=\"parcours postfixe itératif permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Parcours postfixe itératif</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">iterativePostorder(node)\n  s ← empty stack\n  lastNodeVisited ← null\n  while (not s.isEmpty() or node ≠ null)\n    if (node ≠ null)\n      s.push(node)\n      node ← node.left\n    else\n      peekNode ← s.peek()\n      // if right child exists and traversing node\n      // from left child, then move right\n      if (peekNode.right ≠ null and lastNodeVisited ≠ peekNode.right)\n        node ← peekNode.right\n      else\n        visit(peekNode)\n        lastNodeVisited ← s.pop()</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Pour faire cet exercice, on pourra utiliser la classe <code class=\"language-text\">Pile</code> suivante.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Pile</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Initialisation par une liste vide</span>\n        self<span class=\"token punctuation\">.</span>_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">empiler</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> élément<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>_data<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>élément<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">def</span> dépiler<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_data<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">est_vide</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">not</span> self<span class=\"token punctuation\">.</span>_data\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">sommet</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_data<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","fields":{"classe":"tg","chapter":"Algorithmes sur les arbres binaires","matter":"nsi","nChapter":"1","part":"Algorithmique","nPart":"5","type":"exo"}}},"pageContext":{"slug":"tg/nsi/5-algorithmique/1-algorithmes-sur-les-arbres-binaires/exo"}},"staticQueryHashes":["604483588"]}