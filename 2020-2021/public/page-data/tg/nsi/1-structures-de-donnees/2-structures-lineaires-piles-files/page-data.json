{"componentChunkName":"component---src-templates-cours-md-js","path":"/tg/nsi/1-structures-de-donnees/2-structures-lineaires-piles-files","result":{"data":{"markdownRemark":{"html":"<details class=\"programme\"><summary>Programme Officiel</summary><div><table class=\"table table-bordered table-hover\"><thead class=\"table-warning\"><tr><th colspan=\"1\" rowspan=\"1\"><p>Contenus</p></th><th colspan=\"1\" rowspan=\"1\"><p>Capacités attendues</p></th><th colspan=\"1\" rowspan=\"1\"><p>Commentaires</p></th></tr></thead><tbody><tr><td colspan=\"1\" rowspan=\"1\"><p>Structures de données,\ninterface et\nimplémentation.</p></td><td colspan=\"1\" rowspan=\"1\"><p>Spécifier une structure de\ndonnées par son interface.</p><p>Distinguer interface et\nimplémentation.</p><p>Écrire plusieurs implémentations\nd’une même structure de\ndonnées.</p></td><td colspan=\"1\" rowspan=\"1\"><p>L’abstraction des structures de\ndonnées est introduite après\nplusieurs implémentations d’une\nstructure simple comme la file\n(avec un tableau ou avec deux\npiles).</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>Listes, piles, files :\nstructures linéaires.</p></td><td colspan=\"1\" rowspan=\"1\"><p>Distinguer des structures par le\njeu des méthodes qui les\ncaractérisent.</p><p>Choisir une structure de\ndonnées adaptée à la situation à\nmodéliser.</p></td><td colspan=\"1\" rowspan=\"1\"><p>On distingue les modes FIFO(`first_\n<em>in first out</em>) et LIFO (<em>last in first</em>\n<em>out</em>) des piles et des files.</p></td></tr></tbody></table></div><a class=\"lien-programme\" href=\"../programme/\">Lien vers le programme complet</a></details>\n<blockquote>\n<p>Dans ce chapitre nous allons décrire des structures de données linéaires appelées <strong>listes</strong>,\ndont nous verrons deux formes restreintes : les <strong>piles</strong> et les <strong>files</strong>. Il faut bien\ncomprendre que lorsqu'on parle de structure de données, on parle d'une <em>représentation abstraite</em>\nqui n'est pas en lien direct avec son implémentation qui peut-être réalisé de diverses manières\nsuivant le langage de programmation voire au sein d'un même langage de programmation.</p>\n</blockquote>\n<!-- TODO implémentation en python avec des classes queue from collections ou sinon fonction(voir IPT Eyrolles) ou Prpeabac -->\n<h2 id=\"les-piles-lifo\" style=\"position:relative;\"><a href=\"#les-piles-lifo\" aria-label=\"les piles lifo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Les piles: <em>LIFO</em></h2>\n<p>Les <strong>pile</strong>s(<em>stacks</em> en anglais) correspondent exactement à la notion de pile dans la vie courante:</p>\n<ul>\n<li>Une pile de cartes,</li>\n<li>Une pile d'assiettes...</li>\n</ul>\n<p><a title=\"User:Boivie / Public domain\" href=\"https://commons.wikimedia.org/wiki/File:Data_stack.svg\"><img width=\"256\" alt=\"Data stack\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/2/29/Data_stack.svg/256px-Data_stack.svg.png\"></a></p>\n<p>Pour ajouter un élément on l'empile, il se retrouve donc au-dessus, et pour retirer un élément on\nne peut retirer <strong>que l'élément se trouvant au sommet de la pile</strong>.</p>\n<p>En anglais on dit <em>last in, first out</em> ou <em>LIFO</em> pour dire: dernier arrivé premier sorti.</p>\n<p>Ce type de structure de données est par exemple utilisé dans:</p>\n<ul>\n<li>les éditeurs avec la fonction <em>Annuler</em> (CTRL+Z)</li>\n<li>les navigateurs pour reculer d'une page.</li>\n<li>les compilateurs et interpréteurs pour évaluer des séries de fonctions (voir <a href=\"/2020-2021/tg/nsi/4-langages-et-programmation/4-recursivite\">fonctions récursives</a>)</li>\n<li>Sans l'évaluation des expressions mathématiques avec parenthèses <code class=\"language-text\">((ax + b) * c)</code></li>\n</ul>\n<h3 id=\"interface\" style=\"position:relative;\"><a href=\"#interface\" aria-label=\"interface permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Interface</h3>\n<p>Une pile est définie par l'interface comprenant les opérations suivantes:</p>\n<ul>\n<li>Consulter le dernier élément de la pile: <code class=\"language-text\">sommet()</code></li>\n<li>Savoir si la pile est vide: <code class=\"language-text\">est_vide()</code></li>\n<li><strong>Empiler</strong> un élément pour le mettre au sommet de la pile: <code class=\"language-text\">empiler(élément)</code>.</li>\n<li><strong>Dépiler</strong> un élément pour le retirer du sommet de la pile: <code class=\"language-text\">dépiler()</code>.</li>\n</ul>\n<div class=\"prop\"><p>Les méthodes <code class=\"language-text\">empiler</code> et <code class=\"language-text\">dépiler</code> doivent s'effectuer en temps constant (Complexité <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>)</p></div>\n<h3 id=\"implémentation-en-python\" style=\"position:relative;\"><a href=\"#impl%C3%A9mentation-en-python\" aria-label=\"implémentation en python permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Implémentation en Python</h3>\n<p>L'objet <code class=\"language-text\">list</code> en Python présente deux méthodes qui lui permettent d'implémenter la pile:</p>\n<ul>\n<li><code class=\"language-text\">list.append(el)</code>: ajoute l'élément en fin de liste.</li>\n<li><code class=\"language-text\">list.pop()</code>: supprime le dernier élément de la liste et le renvoie.</li>\n</ul>\n<p>De plus ces deux méthodes s'effectuent en temps constant (voir ce\n<a href=\"/2020-2021/tg/nsi/1-structures-de-donnees/1-interface-et-implementation/#cas-des-listes\">tableau</a>\npour plus de détails.)</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">pile <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\npile<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\npile<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>pile<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># affiche [3, 4, 5, 6, 7]</span>\npile<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\"># renvoie 7</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>pile<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># affiche [3, 4, 5, 6]</span>\npile<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\"># renvoie 6</span>\npile<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\"># renvoie 5</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>pile<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># affiche [3, 4]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><em class=\"cite-source\"><a href=\"https://docs.python.org/3/tutorial/datastructures.html#using-lists-as-stacks\">Documentation de\nPython</a></em></p>\n<details class=\"appli\"><summary>&nbsp;</summary><p>Créer une classe <code class=\"language-text\">Pile</code> qui implémente le type abstrait pile en stockant les données de la pile\ndans un attribut privé <code class=\"language-text\">_data</code>. Voir cet <a href=\"./exo/#exo2\">exercice</a> pour plus de détails.</p></details>\n<h2 id=\"les-files-fifo\" style=\"position:relative;\"><a href=\"#les-files-fifo\" aria-label=\"les files fifo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Les files: <em>FIFO</em></h2>\n<p>Les files(<em>queues</em> en anglais) correspondent également à la notion de file dans la vie courante:</p>\n<ul>\n<li>Une file d'attente à la caisse,</li>\n<li>à un feu rouge...</li>\n</ul>\n<p><a href=\"https://commons.wikimedia.org/wiki/File:Data_Queue.svg#/media/File:Data_Queue.svg\"><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/5/52/Data_Queue.svg/1200px-Data_Queue.svg.png\" alt=\"Data Queue.svg\"></a><br>By <a href=\"https://upload.wikimedia.org/wikipedia/commons/5/52/Data_Queue.svg\" class=\"internal\" title=\"Data Queue.svg\">This Image</a> was created by <a href=\"https://en.wikipedia.org/wiki/User:Vegpuff\" class=\"extiw\" title=\"en:User:Vegpuff\">User:Vegpuff</a>.\nIf you are using the image under the <a rel=\"nofollow\" class=\"external text\" href=\"https://creativecommons.org/licenses/by-sa/3.0/\">creative commons share alike license</a> please credit the photo Vegpuff/Wikipedia and include a link to this page. No explicit permission is needed from me, but an email if my work has been of help to you.\nIf you dont want to release your work under a creative commons license, please mail me at <a class=\"external text\" href=\"https://commons.wikimedia.org/wiki/Special:EmailUser/Vegpuff\">vegpuff@gmail.com</a> or catch me at my <a rel=\"nofollow\" class=\"external text\" href=\"https://twitter.com/alagu\">twitter stream</a> for a custom license. - <span class=\"int-own-work\" lang=\"en\">Own work</span>, <a href=\"https://creativecommons.org/licenses/by-sa/3.0\" title=\"Creative Commons Attribution-Share Alike 3.0\">CC BY-SA 3.0</a>, <a href=\"https://commons.wikimedia.org/w/index.php?curid=7586271\">Link</a></p>\n<p>Lorsqu'on ajoute un élément, celui-ci se retrouve à la fin de la file, et on <strong>retire les éléments\ndans l'ordre dans lequel ils sont arrivés</strong>.</p>\n<p>En anglais on dit <em>first in, first out</em> ou <em>FIFO</em> pour dire: <strong>premier arrivé premier sorti</strong>.</p>\n<p>Ce type de structure de données est par exemple utilisé dans:</p>\n<ul>\n<li>Un gestionnaire d'impression pour ordonner l'ordre des impressions.</li>\n<li>Un processeur pour planifier l'ordre des opérations.</li>\n<li>Un serveur web pour ordonner les réponses en fonction de l'ordre des demandes.</li>\n</ul>\n<h3 id=\"interface-1\" style=\"position:relative;\"><a href=\"#interface-1\" aria-label=\"interface 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Interface</h3>\n<p>Une file est une liste sur laquelle on autorise seulement 4 opérations:</p>\n<ul>\n<li>Consulter le premier élément de la file: la tête: <code class=\"language-text\">tête()</code>.</li>\n<li>Tester si la file est vide: <code class=\"language-text\">est_vide()</code>.</li>\n<li><strong>Enfiler</strong> un nouvel élément: le mettre en dernier dans la queue: <code class=\"language-text\">enfiler(élément)</code>.</li>\n<li><strong>Défiler</strong> un élément, supprimer et renvoyer le premier élément: <code class=\"language-text\">défiler()</code>.</li>\n</ul>\n<div class=\"prop\"><p>Les méthodes <code class=\"language-text\">enfiler</code> et <code class=\"language-text\">défiler</code> doivent s'effectuer en temps constant (Complexité <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>)</p></div>\n<h3 id=\"implémentation-en-python-1\" style=\"position:relative;\"><a href=\"#impl%C3%A9mentation-en-python-1\" aria-label=\"implémentation en python 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Implémentation en Python</h3>\n<p>L'objet <code class=\"language-text\">list</code> en Python présente deux méthodes qui lui permettent d'implémenter la file:</p>\n<ul>\n<li><code class=\"language-text\">list.append(el)</code>: ajoute l'élément en fin de liste.</li>\n<li><code class=\"language-text\">list.pop(0)</code>: supprime le premier élément de la liste et le renvoie.</li>\n</ul>\n<p>Toutefois, les listes ne sont pas très efficaces pour réaliser ce type de traitement. Alors que les\najouts et suppressions en fin de liste sont rapides, les opérations d'insertions ou de retraits en\ndébut de liste sont lentes (car tous les autres éléments doivent être décalés d'une position <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>).</p>\n<p>Pour implémenter une file avec des opérations en temps constant <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>, on peut utiliser la classe\n<a href=\"https://docs.python.org/fr/3/library/collections.html#collections.deque\"><code class=\"language-text\">collections.deque</code></a>. Les\n<code class=\"language-text\">deques</code> sont une généralisation des piles et des files appelée <strong>liste chainée double</strong> (en\nanglais <em>double-ended queue</em>).</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> deque\nqueue <span class=\"token operator\">=</span> deque<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># On considère une file allant de gauche à droite</span>\n<span class=\"token comment\"># on enfile à gauche</span>\nqueue<span class=\"token punctuation\">.</span>appendleft<span class=\"token punctuation\">(</span><span class=\"token string\">\"Jobi\"</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># enfile 'Jobi'</span>\nqueue<span class=\"token punctuation\">.</span>appendleft<span class=\"token punctuation\">(</span><span class=\"token string\">\"Joba\"</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># enfile 'Joba'</span>\n\n<span class=\"token comment\"># L'élément en tête est à droite au dernier indice</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>            <span class=\"token comment\"># affiche \"Jobi\"</span>\n\n<span class=\"token comment\"># on défile à droite</span>\nqueue<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                 <span class=\"token comment\"># défile 'Jobi' et le renvoie</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>            <span class=\"token comment\"># affiche \"Joba\" qui est en tête de queue maintenant</span>\nqueue<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                 <span class=\"token comment\"># défile 'Joba' et le renvoie</span>\n\n<span class=\"token comment\"># on vérifie que la queue est bien vide</span>\n<span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span>             <span class=\"token comment\"># renvoie True</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><em class=\"cite-source\"><a href=\"https://docs.python.org/3/tutorial/datastructures.html#using-lists-as-queues\">Documentation de\nPython</a></em></p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#les-piles-lifo\">Les piles: <em>LIFO</em></a></p>\n<ul>\n<li><a href=\"#interface\">Interface</a></li>\n<li><a href=\"#impl%C3%A9mentation-en-python\">Implémentation en Python</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#les-files-fifo\">Les files: <em>FIFO</em></a></p>\n<ul>\n<li><a href=\"#interface-1\">Interface</a></li>\n<li><a href=\"#impl%C3%A9mentation-en-python-1\">Implémentation en Python</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"tags":["cours","terminale","lycée","numérique et sciences informatiques","nsi"]},"fields":{"classe":"tg","chapter":"Structures linéaires: piles, files","matter":"nsi","nChapter":"2","part":"Structures de données","nPart":"1"}}},"pageContext":{"slug":"tg/nsi/1-structures-de-donnees/2-structures-lineaires-piles-files","chapter":"Structures linéaires: piles, files"}},"staticQueryHashes":["604483588"]}