{"version":3,"sources":["webpack:///./src/pages/courses/1g/nsi/6-Architectures matérielles et systèmes d'exploitation/2-Jeu d'instructions du processeur/exo.mdx"],"names":["_frontmatter","layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-courses-1-g-nsi-6-architectures-materielles-et-systemes-dexploitation-2-jeu-dinstructions-du-processeur-exo-mdx-05cbe8d08c11618bbcc4.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"tags\": [\"nsi\", \"exercices\"]\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2 {...{\n      \"id\": \"ex-1\"\n    }}>{`Ecrire de l’assembleur sur un simulateur`}</h2>\n    <p>{`La page suivante propose d’écrire quelques programmes en assembleur.`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://pixees.fr/informatiquelycee/n_site/nsi_prem_sim_cpu.html\"\n      }}>{`https://pixees.fr/informatiquelycee/n_site/nsi_prem_sim_cpu.html`}</a></p>\n    <p>{`Elle utilise la simulation de Peter Higginson qui simule le langage assembleur AQA.`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"http://www.peterhigginson.co.uk/AQA/\"\n      }}>{`http://www.peterhigginson.co.uk/AQA/`}</a></p>\n    <h2 {...{\n      \"id\": \"ex-2\"\n    }}>{`De python à l’assembleur`}</h2>\n    <p>{` Voici un programme Python très simple :`}</p>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"text\"\n    }}><pre parentName=\"div\" {...{\n        \"className\": \"language-text\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-text\"\n        }}>{`x = 4\ny = 8\nif x == 10:\n\ty = 9\nelse :\n\tx=x+1\nz=6`}</code></pre></div>\n    <p>{`et voici maintenant voici son équivalent en assembleur :`}</p>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"asm\"\n    }}><pre parentName=\"div\" {...{\n        \"className\": \"language-asm\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-asm\"\n        }}>{`   MOV R0, #4\n   STR R0,30\n   MOV R0, #8\n   STR R0,75\n   LDR R0,30\n   CMP R0, #10\n   BNE else\n   MOV R0, #9\n   STR R0,75\n   B endif\nelse:\n   LDR R0,30\n   ADD R0, R0, #1\n   STR R0,30\nendif:\n   MOV R0, #6\n   STR R0,23\n   HALT`}</code></pre></div>\n    <p>{`Après avoir analysé très attentivement le programme en assembleur ci-dessus, vous essaierez\nd’établir une correspondance entre les lignes du programme en Python et les lignes du programme en\nassembleur. À quoi sert la ligne “B endif” ? À quoi correspondent les adresses mémoires 23, 75 et\n30 ?`}</p>\n    <p>{`Source: pixees.fr CC-BY-SA`}</p>\n    <h4>{`AIDE: L’ensemble d’instructions AQA`}</h4>\n    <p>{`Voici une traduction de la documentation proposée à partir du bouton `}<a parentName=\"p\" {...{\n        \"href\": \"http://www.peterhigginson.co.uk/AQA/info.html\"\n      }}>{`INFO`}</a></p>\n    <p>{`Les registres sont numérotés de `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`R0`}</code>{` à `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`R12`}</code>{`.`}</p>\n    <p>{`Les opérations peuvent être effectuées sur deux types de valeurs (notées `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`<opérande2>`}</code>{` dans la suite):`}</p>\n    <ul>\n      <li parentName=\"ul\">{`une constante notée `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`#nnn`}</code>{`. Ex: `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`#12`}</code>{`: la valeur décimale 12.`}</li>\n      <li parentName=\"ul\">{`le contenu du régistre n `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`Rn`}</code>{`. Ex: `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`R1`}</code>{`: la valeur contenie dans le registre 1.`}</li>\n    </ul>\n    <p>{`On peut ajouter des étiquettes dans le programme (notées `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`<label>`}</code>{`); il suffit de noter le nom de\nl’étiquette de son choix et de le faire suivre de deux points. `}</p>\n    <p>{`exemple:`}</p>\n    <p><code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`asm test: `}</code></p>\n    <p>{`Toute référence à cette étiquette fera “sauter” le programme à la case mémoire de\nl’étiquette et exécutera donc les instructions qui suivent.`}</p>\n    <p>{`les commentaires commencent par au moins un `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`/`}</code>{`.`}</p>\n    <h5>{`Affectations`}</h5>\n    <ul>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`LDR Rd, <adresse mémoire>`}</code></li>\n    </ul>\n    <p>{`Charge la valeur stockée dans l’emplacement de mémoire spécifié par `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`<adresse mémoire>`}</code>{` dans le\nregistre d.`}</p>\n    <ul>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`STR Rd, <adresse mémoire>`}</code></li>\n    </ul>\n    <p>{`Stocke la valeur qui se trouve dans le registre d dans l’emplacement de mémoire spécifié par\n`}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`<adresse mémoire>`}</code>{`.`}</p>\n    <ul>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`MOV Rd, <opérande2>`}</code></li>\n    </ul>\n    <p>{`Copiez la valeur spécifiée par `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`<opérande 2>`}</code>{`dans le registre d.`}</p>\n    <h5>{`Opérations`}</h5>\n    <ul>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`ADD Rd, Rn, <opérande2>`}</code></li>\n    </ul>\n    <p>{`Ajouter la valeur spécifiée dans `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`<opérande 2>`}</code>{`à la valeur du registre\nn et stocker le résultat dans le registre d.`}</p>\n    <ul>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`SUB Rd, Rn, <opérande2>`}</code></li>\n    </ul>\n    <p>{`Soustrayez la valeur spécifiée par `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`<opérande 2>`}</code>{`de la valeur du\nregistre n et stockez le résultat dans le registre d.`}</p>\n    <h5>{`Comparaisons`}</h5>\n    <ul>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`CMP Rn, <opérande2>`}</code></li>\n    </ul>\n    <p>{`Comparez la valeur stockée dans le registre n avec la valeur spécifiée\npar `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`<opérande 2>`}</code></p>\n    <ul>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`B <condition> <label>`}</code></li>\n    </ul>\n    <p>{`Connectez conditionnellement l’instruction à la position `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`<label>`}</code>{` dans\nle programme si la dernière comparaison a répondu aux critères spécifiés par la `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`<condition>`}</code>{`. Les\nvaleurs possibles pour `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`<condition>`}</code>{` et leur signification sont les suivantes:`}</p>\n    <ul>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`EQ`}</code>{`: égal à,`}</li>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`NE`}</code>{`: différent de,`}</li>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`GT`}</code>{`: supérieur à,`}</li>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`LT`}</code>{`: inférieur à. `}</li>\n    </ul>\n    <h5>{`Sauts(JUMP)`}</h5>\n    <ul>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`B <label>`}</code></li>\n    </ul>\n    <p>{`Toujours relier l’instruction à la position `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`<label>`}</code>{` dans le programme.`}</p>\n    <h5>{`Fin du programme`}</h5>\n    <ul>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`HALT`}</code>{`: Arrête l’exécution du programme.`}</li>\n    </ul>\n    <h5>{`Non utilisées dans ce TD`}</h5>\n    <ul>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`AND Rd, Rn, <opérande2>`}</code>{`:`}</li>\n    </ul>\n    <p>{`Effectue une opération ET logique au niveau du bit entre la valeur du\nregistre n et la valeur spécifiée par `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`<opérande 2>`}</code>{` et stocke le résultat dans le registre d.`}</p>\n    <ul>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`ORR Rd, Rn, <opérande2>`}</code>{`:`}</li>\n    </ul>\n    <p>{`Effectue une opération OU logique au niveau des bits entre la\nvaleur du registre n et la valeur spécifiée par `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`<opérande 2>`}</code>{`et stocke le résultat dans le registre\nd.`}</p>\n    <ul>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`EOR Rd, Rn, <opérande2>`}</code>{`:`}</li>\n    </ul>\n    <p>{`Effectue une opération logique ou binaire exclusive au sens des bits\nentre la valeur du registre n et la valeur spécifiée par `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`<opérande 2>`}</code>{`et stocke le résultat dans le\nregistre d.`}</p>\n    <ul>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`MVN Rd, <opérande2>`}</code>{`:`}</li>\n    </ul>\n    <p>{`Exécutez une opération NOT logique au niveau des bits sur la valeur\nspécifiée par `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`<opérande 2>`}</code>{`et stockez le résultat dans le registre d.`}</p>\n    <ul>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`LSL Rd, Rn, <opérande2>`}</code>{`:`}</li>\n    </ul>\n    <p>{`Décalez logiquement vers la gauche la valeur stockée dans le registre\nn du nombre de bits spécifié par `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`<opérande 2>`}</code>{` et stockez le résultat dans le registre d.`}</p>\n    <ul>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`LSR Rd, Rn, <opérande2>`}</code>{`:`}</li>\n    </ul>\n    <p>{`Décalez logiquement à droite la valeur stockée dans le registre n du\nnombre de bits spécifié par `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`<opérande 2>`}</code>{` et stockez le résultat dans le registre d.`}</p>\n    <h4>{`Sources`}</h4>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://pixees.fr/informatiquelycee/n_site/nsi_prem_sim_cpu.html\"\n        }}>{`https://pixees.fr/informatiquelycee/n_site/nsi_prem_sim_cpu.html`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"http://www.lyceerotroudreux.com/images/NSI/Langage_Assembleur.pdf\"\n        }}>{`http://www.lyceerotroudreux.com/images/NSI/Langage_Assembleur.pdf`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"http://www.peterhigginson.co.uk/AQA/info.html\"\n        }}>{`http://www.peterhigginson.co.uk/AQA/info.html`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}