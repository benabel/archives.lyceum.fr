{"componentChunkName":"component---src-templates-exo-mdx-js","path":"/1g/nsi/2-representation-des-donnees-types-et-valeurs-de-base/5-representation-approximative-des-nombres-reels/exo","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"nsi\", \"exercices\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"On rappelle que l\\u2019encodage des flottants s\\u2019effectue de la fa\\xE7on suivante:\"), mdx(\"p\", null, \"$$\\ns\\\\ m \\\\cdot 2^n\\n$$\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$s$ est le signe repr\\xE9sent\\xE9 par le bit de poids fort:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$s=0$: signe $+$\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$s=1$: signe $-$\")))), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"$n$ est l\\u2019exposant repr\\xE9sent\\xE9 par un \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"entier relatif d\\xE9cal\\xE9\"), \" de $2^{e-1} - 1$ (e repr\\xE9sente le nombre de bits de l\\u2019exposant)\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"$m$ est la mantisse qui est un nombre binaire \\xE0 virgule compris entre 1 inclus et 2 exclus. Le\\nseul chiffre avant la virgule \\xE9tant toujours 1, il n\\u2019est pas repr\\xE9sent\\xE9(on le dit \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"implicite\"), \"),\\net le codage binaire de la mantisse repr\\xE9sente donc uniquement les chiffres apr\\xE8s la virgule qui\\nsont en base 2 des demis, des quarts, des huiti\\xE8mes\\u2026\"))), mdx(\"h2\", {\n    \"id\": \"ex-1\"\n  }, \"Encodage sur un octet\"), mdx(\"p\", null, \"On consid\\xE8re des nombres flottants encod\\xE9s sur un octet avec dans l\\u2019ordre:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"1 bit de signe,\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"3 bits d\\u2019exposant,\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"4 bits de mantisse.\")), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Trouver les nombres \\xE0 virgule repr\\xE9sent\\xE9s par les mots binaires suivants\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"0111 1000\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"1001 0001\"))), mdx(\"ol\", {\n    \"start\": 2\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Donner les repr\\xE9sentations binaires des nombres flottants suivants:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$2,5$ (qui est \\xE9gal \\xE0 $1,25 \\\\times 2$).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$-1,125$.\")), mdx(\"ol\", {\n    \"start\": 3\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Avec cet encodage \\xE0 8 bits: \")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Quel est le plus grand nombre \\xE0 virgules que l\\u2019on peut repr\\xE9senter?\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Quel est le plus petit nombre \\xE0 virgule, donc n\\xE9gatif?\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Quel est le plus petit nombre \\xE0 virgule strictement positif que l\\u2019on peut repr\\xE9senter?\")), mdx(\"h2\", {\n    \"id\": \"ex-2\"\n  }, \"Encodage double pr\\xE9cision: sur 64 bits\"), mdx(\"p\", null, \"On consid\\xE8re des nombres flottants encod\\xE9s sur 64 bits avec dans l\\u2019ordre:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"1 bit de signe,\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"11 bits d\\u2019exposant (-1022 \\xE0 1023)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"52 bits de mantisse.\")), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Trouver les nombres \\xE0 virgule repr\\xE9sent\\xE9s par les mots binaires suivants\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"1 10001000110 1001001111000011100000000000000000000000000000000000\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"0 00100000011 1101001110010101100000000000000000000000000000000000\"))), mdx(\"ol\", {\n    \"start\": 2\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Donner les repr\\xE9sentations binaires des nombres flottants suivants:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$2^{-1022}$ (qui est \\xE9gal \\xE0 $2,225 \\\\times 10^{-308}$).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$7,0$.\")), mdx(\"ol\", {\n    \"start\": 3\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Avec cet encodage \\xE0 64 bits: \")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Quel est le plus grand nombre \\xE0 virgules que l\\u2019on peut repr\\xE9senter?\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Quel est le plus petit nombre \\xE0 virgule, donc n\\xE9gatif?\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Quel est le plus petit nombre \\xE0 virgule strictement positif que l\\u2019on peut repr\\xE9senter?\")), mdx(\"h2\", {\n    \"id\": \"ex-3\"\n  }, \"Exercice Python n\\xB01\"), mdx(\"p\", null, \"On consid\\xE8re le programme suivant:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"python\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-python\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"x \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"1.0\"), \"\\ny \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" x \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"+\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"1.0\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"while\"), \" y \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"-\"), \" x \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"==\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"1.0\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \"\\n    x \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" x \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"*\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"2.0\"), \"\\n    y \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" x \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"+\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"1.0\")))), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Si l\\u2019on calculait sur des nombres rationnels exacts, que se passerait-il lors de l\\u2019ex\\xE9cution de ce programme ?\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\xC9crire ce programme et l\\u2019ex\\xE9cuter. Que constate-t-on ?\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Modifier le programme de fa\\xE7on \\xE0 d\\xE9terminer au bout de combien d\\u2019ex\\xE9cutions du corps de la boucle il s\\u2019arr\\xEAte, ainsi que la valeur de \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"x\"), \" \\xE0 la fin de cette ex\\xE9cution.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Comment est repr\\xE9sent\\xE9e cette derni\\xE8re valeur de \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"x\"), \" ? Et celle de \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"y\"), \" ? \"))), mdx(\"p\", null, \"On pourra utiliser un convertisseur en ligne comme: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://www.binaryconvert.com/convert_double.html\"\n  }), \"http://www.binaryconvert.com/convert_double.html\")), mdx(\"ol\", {\n    \"start\": 5\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Proposer une explication de ce comportement.\")), mdx(\"h2\", {\n    \"id\": \"ex-4\"\n  }, \"Exercice Python n\\xB02\"), mdx(\"p\", null, \"On consid\\xE8re le programme suivant:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"python\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-python\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"a \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"0.0\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"for\"), \" loop \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"in\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token builtin\"\n  }), \"range\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"0\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \",\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"10\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \"\\n    a \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \" a \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"+\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"0.1\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"print\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \"a\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\")))), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Si l\\u2019on calculait sur des nombres rationnels exacts, que se passerait-il lors de l\\u2019ex\\xE9cution de ce programme ?\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\xC9crire ce programme et l\\u2019ex\\xE9cuter. Que constate-t-on ?\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"V\\xE9rifier avec le convertisseur en ligne que la repr\\xE9sentation binaire de 0,1 est\\n\", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"0_01111111011_1001100110011001100110011001100110011001100110011010\"), \".\"))), mdx(\"p\", null, \"Quel nombre d\\xE9cimal cette repr\\xE9sentation d\\xE9signe-t-elle en r\\xE9alit\\xE9 ?\"), mdx(\"ol\", {\n    \"start\": 4\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Expliquer le r\\xE9sultat obtenu.\")), mdx(\"h4\", null, \"Source\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://www.editions-eyrolles.com/Livre/9782212135435/\"\n  }), \"Informatique et sciences du num\\xE9rique Sp\\xE9cialit\\xE9 ISN en terminale S - Avec des exercices corrig\\xE9s et des id\\xE9es de projets par Gilles Dowek\")));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"classe":"1g","chapter":"Représentation approximative des nombres réels","matter":"nsi","nChapter":"5","part":"Représentation des données : types et valeurs de base","nPart":"2","type":"exo"}}},"pageContext":{"slug":"1g/nsi/2-representation-des-donnees-types-et-valeurs-de-base/5-representation-approximative-des-nombres-reels/exo"}}}